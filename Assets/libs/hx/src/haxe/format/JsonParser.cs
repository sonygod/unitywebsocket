// Generated by Haxe 4.0.2+606b176a3
using haxe.root;

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.format {
	public class JsonParser : global::haxe.lang.HxObject {
		
		public JsonParser(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public JsonParser(string str) {
			#line 51 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
			global::haxe.format.JsonParser.__hx_ctor_haxe_format_JsonParser(this, str);
		}
		#line default
		
		protected static void __hx_ctor_haxe_format_JsonParser(global::haxe.format.JsonParser __hx_this, string str) {
			#line 52 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
			__hx_this.str = str;
			__hx_this.pos = 0;
		}
		#line default
		
		public static object parse(string str) {
			#line 45 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
			return new global::haxe.format.JsonParser(((string) (str) )).doParse();
		}
		#line default
		
		public string str;
		
		public int pos;
		
		public virtual object doParse() {
			unchecked {
				#line 57 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
				object result = this.parseRec();
				int c = default(int);
				#line 59 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
				while (true) {
					#line 59 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
					string s = this.str;
					#line 59 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
					int index = this.pos++;
					#line 59 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
					c = ( (((bool) (( ((uint) (index) ) < s.Length )) )) ? (((int) (s[index]) )) : (-1) );
					#line 59 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
					if ( ! ((( c != -1 ))) ) {
						#line 59 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
						break;
					}
					
					#line 60 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
					switch (c) {
						case 9:
						case 10:
						case 13:
						case 32:
						{
							#line 61 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							break;
						}
						
						
						default:
						{
							#line 64 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							this.invalidChar();
							#line 64 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							break;
						}
						
					}
					
				}
				
				#line 67 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
				return result;
			}
			#line default
		}
		
		
		public virtual object parseRec() {
			unchecked {
				#line 71 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
				while (true) {
					#line 72 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
					string s = this.str;
					#line 72 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
					int index = this.pos++;
					#line 72 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
					int c = ( (((bool) (( ((uint) (index) ) < s.Length )) )) ? (((int) (s[index]) )) : (-1) );
					switch (c) {
						case 9:
						case 10:
						case 13:
						case 32:
						{
							#line 74 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							break;
						}
						
						
						case 34:
						{
							#line 143 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							return this.parseString();
						}
						
						
						case 45:
						case 48:
						case 49:
						case 50:
						case 51:
						case 52:
						case 53:
						case 54:
						case 55:
						case 56:
						case 57:
						{
							#line 145 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							int c1 = c;
							#line 145 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							int start = ( this.pos - 1 );
							#line 145 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							bool minus = ( c1 == 45 );
							#line 145 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							bool digit =  ! (minus) ;
							#line 145 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							bool zero = ( c1 == 48 );
							#line 145 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							bool point = false;
							#line 145 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							bool e = false;
							#line 145 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							bool pm = false;
							#line 145 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							bool end = false;
							#line 145 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							while (true) {
								#line 145 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								string s1 = this.str;
								#line 145 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								int index1 = this.pos++;
								#line 145 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								c1 = ( (((bool) (( ((uint) (index1) ) < s1.Length )) )) ? (((int) (s1[index1]) )) : (-1) );
								#line 145 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								switch (c1) {
									case 43:
									case 45:
									{
										#line 145 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
										if ((  ! (e)  || pm )) {
											#line 145 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
											this.invalidNumber(start);
										}
										
										#line 145 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
										digit = false;
										#line 145 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
										pm = true;
										#line 145 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
										break;
									}
									
									
									case 46:
									{
										#line 145 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
										if (( ( minus || point ) || e )) {
											#line 145 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
											this.invalidNumber(start);
										}
										
										#line 145 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
										digit = false;
										#line 145 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
										point = true;
										#line 145 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
										break;
									}
									
									
									case 48:
									{
										#line 145 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
										if (( zero &&  ! (point)  )) {
											#line 145 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
											this.invalidNumber(start);
										}
										
										#line 145 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
										if (minus) {
											#line 145 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
											minus = false;
											#line 145 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
											zero = true;
										}
										
										#line 145 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
										digit = true;
										#line 145 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
										break;
									}
									
									
									case 49:
									case 50:
									case 51:
									case 52:
									case 53:
									case 54:
									case 55:
									case 56:
									case 57:
									{
										#line 145 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
										if (( zero &&  ! (point)  )) {
											#line 145 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
											this.invalidNumber(start);
										}
										
										#line 145 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
										if (minus) {
											#line 145 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
											minus = false;
										}
										
										#line 145 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
										digit = true;
										#line 145 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
										zero = false;
										#line 145 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
										break;
									}
									
									
									case 69:
									case 101:
									{
										#line 145 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
										if (( ( minus || zero ) || e )) {
											#line 145 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
											this.invalidNumber(start);
										}
										
										#line 145 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
										digit = false;
										#line 145 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
										e = true;
										#line 145 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
										break;
									}
									
									
									default:
									{
										#line 145 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
										if ( ! (digit) ) {
											#line 145 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
											this.invalidNumber(start);
										}
										
										#line 145 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
										this.pos--;
										#line 145 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
										end = true;
										#line 145 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
										break;
									}
									
								}
								
								#line 145 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								if (end) {
									#line 145 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
									break;
								}
								
							}
							
							#line 145 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							double f = global::haxe.root.Std.parseFloat(global::haxe.lang.StringExt.substr(this.str, start, ( this.pos - start )));
							#line 145 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							int i = ((int) (f) );
							#line 145 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							if (( i == f )) {
								#line 145 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								return i;
							}
							else {
								#line 145 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								return f;
							}
							
						}
						
						
						case 91:
						{
							#line 103 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							global::haxe.root.Array arr = new global::haxe.root.Array(new object[]{});
							#line 103 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							object comma = null;
							while (true) {
								#line 105 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								string s2 = this.str;
								#line 105 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								int index2 = this.pos++;
								#line 105 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								int c2 = ( (((bool) (( ((uint) (index2) ) < s2.Length )) )) ? (((int) (s2[index2]) )) : (-1) );
								switch (c2) {
									case 9:
									case 10:
									case 13:
									case 32:
									{
										#line 107 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
										break;
									}
									
									
									case 44:
									{
										#line 113 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
										if (global::haxe.lang.Runtime.toBool((comma))) {
											#line 113 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
											comma = false;
										}
										else {
											#line 113 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
											this.invalidChar();
										}
										
										#line 113 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
										break;
									}
									
									
									case 93:
									{
										#line 110 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
										if (global::haxe.lang.Runtime.eq(comma, false)) {
											#line 110 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
											this.invalidChar();
										}
										
										#line 111 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
										return arr;
									}
									
									
									default:
									{
										#line 115 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
										if (global::haxe.lang.Runtime.toBool((comma))) {
											#line 115 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
											this.invalidChar();
										}
										
										#line 116 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
										this.pos--;
										arr.push(this.parseRec());
										#line 118 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
										comma = true;
										#line 114 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
										break;
									}
									
								}
								
							}
							
							#line 102 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							break;
						}
						
						
						case 102:
						{
							#line 129 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							int save = this.pos;
							bool tmp = default(bool);
							bool tmp1 = default(bool);
							bool tmp2 = default(bool);
							string s3 = this.str;
							int index3 = this.pos++;
							if (( (( (((bool) (( ((uint) (index3) ) < s3.Length )) )) ? (((int) (s3[index3]) )) : (-1) )) == 97 )) {
								#line 130 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								string s4 = this.str;
								#line 130 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								int index4 = this.pos++;
								#line 130 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								tmp2 = ( (( (((bool) (( ((uint) (index4) ) < s4.Length )) )) ? (((int) (s4[index4]) )) : (-1) )) != 108 );
							}
							else {
								#line 130 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								tmp2 = true;
							}
							
							#line 130 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							if ( ! (tmp2) ) {
								#line 130 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								string s5 = this.str;
								#line 130 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								int index5 = this.pos++;
								#line 130 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								tmp1 = ( (( (((bool) (( ((uint) (index5) ) < s5.Length )) )) ? (((int) (s5[index5]) )) : (-1) )) != 115 );
							}
							else {
								#line 130 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								tmp1 = true;
							}
							
							#line 130 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							if ( ! (tmp1) ) {
								#line 130 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								string s6 = this.str;
								#line 130 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								int index6 = this.pos++;
								#line 130 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								tmp = ( (( (((bool) (( ((uint) (index6) ) < s6.Length )) )) ? (((int) (s6[index6]) )) : (-1) )) != 101 );
							}
							else {
								#line 130 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								tmp = true;
							}
							
							#line 130 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							if (tmp) {
								#line 131 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								this.pos = save;
								this.invalidChar();
							}
							
							#line 134 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							return false;
						}
						
						
						case 110:
						{
							#line 136 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							int save1 = this.pos;
							bool tmp3 = default(bool);
							bool tmp4 = default(bool);
							string s7 = this.str;
							int index7 = this.pos++;
							if (( (( (((bool) (( ((uint) (index7) ) < s7.Length )) )) ? (((int) (s7[index7]) )) : (-1) )) == 117 )) {
								#line 137 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								string s8 = this.str;
								#line 137 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								int index8 = this.pos++;
								#line 137 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								tmp4 = ( (( (((bool) (( ((uint) (index8) ) < s8.Length )) )) ? (((int) (s8[index8]) )) : (-1) )) != 108 );
							}
							else {
								#line 137 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								tmp4 = true;
							}
							
							#line 137 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							if ( ! (tmp4) ) {
								#line 137 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								string s9 = this.str;
								#line 137 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								int index9 = this.pos++;
								#line 137 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								tmp3 = ( (( (((bool) (( ((uint) (index9) ) < s9.Length )) )) ? (((int) (s9[index9]) )) : (-1) )) != 108 );
							}
							else {
								#line 137 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								tmp3 = true;
							}
							
							#line 137 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							if (tmp3) {
								#line 138 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								this.pos = save1;
								this.invalidChar();
							}
							
							#line 141 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							return null;
						}
						
						
						case 116:
						{
							#line 122 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							int save2 = this.pos;
							bool tmp5 = default(bool);
							bool tmp6 = default(bool);
							string s10 = this.str;
							int index10 = this.pos++;
							if (( (( (((bool) (( ((uint) (index10) ) < s10.Length )) )) ? (((int) (s10[index10]) )) : (-1) )) == 114 )) {
								#line 123 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								string s11 = this.str;
								#line 123 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								int index11 = this.pos++;
								#line 123 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								tmp6 = ( (( (((bool) (( ((uint) (index11) ) < s11.Length )) )) ? (((int) (s11[index11]) )) : (-1) )) != 117 );
							}
							else {
								#line 123 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								tmp6 = true;
							}
							
							#line 123 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							if ( ! (tmp6) ) {
								#line 123 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								string s12 = this.str;
								#line 123 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								int index12 = this.pos++;
								#line 123 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								tmp5 = ( (( (((bool) (( ((uint) (index12) ) < s12.Length )) )) ? (((int) (s12[index12]) )) : (-1) )) != 101 );
							}
							else {
								#line 123 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								tmp5 = true;
							}
							
							#line 123 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							if (tmp5) {
								#line 124 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								this.pos = save2;
								this.invalidChar();
							}
							
							#line 127 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							return true;
						}
						
						
						case 123:
						{
							#line 77 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							object obj = new global::haxe.lang.DynamicObject(new int[]{}, new object[]{}, new int[]{}, new double[]{});
							#line 77 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							string field = null;
							#line 77 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							object comma1 = null;
							while (true) {
								#line 79 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								string s13 = this.str;
								#line 79 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								int index13 = this.pos++;
								#line 79 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								int c3 = ( (((bool) (( ((uint) (index13) ) < s13.Length )) )) ? (((int) (s13[index13]) )) : (-1) );
								switch (c3) {
									case 9:
									case 10:
									case 13:
									case 32:
									{
										#line 81 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
										break;
									}
									
									
									case 34:
									{
										#line 96 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
										if (( ((bool) (( field != null )) ) || global::haxe.lang.Runtime.toBool(comma1) )) {
											#line 96 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
											this.invalidChar();
										}
										
										#line 97 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
										field = this.parseString();
										#line 95 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
										break;
									}
									
									
									case 44:
									{
										#line 94 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
										if (global::haxe.lang.Runtime.toBool((comma1))) {
											#line 94 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
											comma1 = false;
										}
										else {
											#line 94 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
											this.invalidChar();
										}
										
										#line 94 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
										break;
									}
									
									
									case 58:
									{
										#line 88 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
										if (( field == null )) {
											#line 89 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
											this.invalidChar();
										}
										
										#line 90 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
										global::haxe.root.Reflect.setField(obj, field, this.parseRec());
										field = null;
										#line 92 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
										comma1 = true;
										#line 87 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
										break;
									}
									
									
									case 125:
									{
										#line 84 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
										if (( ( field != null ) || global::haxe.lang.Runtime.eq(comma1, false) )) {
											#line 85 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
											this.invalidChar();
										}
										
										#line 86 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
										return obj;
									}
									
									
									default:
									{
										#line 99 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
										this.invalidChar();
										#line 99 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
										break;
									}
									
								}
								
							}
							
							#line 76 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							break;
						}
						
						
						default:
						{
							#line 147 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							this.invalidChar();
							#line 147 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							break;
						}
						
					}
					
				}
				
				#line 70 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
				return null;
			}
			#line default
		}
		
		
		public virtual string parseString() {
			unchecked {
				#line 153 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
				int start = this.pos;
				global::haxe.root.StringBuf buf = null;
				#line 156 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
				int prev = -1;
				#line 163 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
				while (true) {
					#line 164 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
					string s = this.str;
					#line 164 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
					int index = this.pos++;
					#line 164 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
					int c = ( (((bool) (( ((uint) (index) ) < s.Length )) )) ? (((int) (s[index]) )) : (-1) );
					if (( c == 34 )) {
						#line 166 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
						break;
					}
					
					#line 167 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
					if (( c == 92 )) {
						#line 168 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
						if (( buf == null )) {
							#line 169 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							buf = new global::haxe.root.StringBuf();
						}
						
						#line 171 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
						{
							#line 171 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							string s1 = this.str;
							#line 171 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							object len = ( ( this.pos - start ) - 1 );
							#line 171 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							buf.b.Append(((string) (s1) ), ((int) (start) ), ((int) (( (( len == default(object) )) ? (( s1.Length - start )) : (((int) (global::haxe.lang.Runtime.toInt(len)) )) )) ));
						}
						
						#line 172 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
						string s2 = this.str;
						#line 172 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
						int index1 = this.pos++;
						#line 172 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
						c = ( (((bool) (( ((uint) (index1) ) < s2.Length )) )) ? (((int) (s2[index1]) )) : (-1) );
						#line 174 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
						if (( ( c != 117 ) && ( prev != -1 ) )) {
							#line 175 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							buf.addChar(65533);
							#line 175 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							prev = -1;
						}
						
						#line 177 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
						switch (c) {
							case 34:
							case 47:
							case 92:
							{
								#line 189 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								buf.addChar(c);
								#line 189 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								break;
							}
							
							
							case 98:
							{
								#line 185 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								buf.addChar(8);
								#line 185 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								break;
							}
							
							
							case 102:
							{
								#line 187 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								buf.addChar(12);
								#line 187 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								break;
							}
							
							
							case 110:
							{
								#line 181 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								buf.addChar(10);
								#line 181 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								break;
							}
							
							
							case 114:
							{
								#line 179 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								buf.addChar(13);
								#line 179 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								break;
							}
							
							
							case 116:
							{
								#line 183 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								buf.addChar(9);
								#line 183 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								break;
							}
							
							
							case 117:
							{
								#line 191 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								int uc = ((int) (global::haxe.lang.Runtime.toInt(global::haxe.root.Std.parseInt(global::haxe.lang.Runtime.concat("0x", global::haxe.lang.StringExt.substr(this.str, this.pos, 4))))) );
								this.pos += 4;
								#line 210 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								if (( prev != -1 )) {
									#line 211 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
									if (( ( uc < 56320 ) || ( uc > 57343 ) )) {
										#line 212 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
										buf.addChar(65533);
										#line 212 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
										prev = -1;
									}
									else {
										#line 214 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
										buf.addChar(( ( (( ( prev - 55296 ) << 10 )) + (( uc - 56320 )) ) + 65536 ));
										prev = -1;
									}
									
								}
								else if (( ( uc >= 55296 ) && ( uc <= 56319 ) )) {
									#line 218 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
									prev = uc;
								}
								else {
									#line 220 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
									buf.addChar(uc);
								}
								
								#line 190 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								break;
							}
							
							
							default:
							{
								#line 223 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								throw global::haxe.lang.HaxeException.wrap(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("Invalid escape sequence \\", global::haxe.lang.StringExt.fromCharCode(c)), " at position "), global::haxe.lang.Runtime.toString((( this.pos - 1 )))));
							}
							
						}
						
						#line 225 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
						start = this.pos;
					}
					else if (( c == -1 )) {
						#line 242 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
						throw global::haxe.lang.HaxeException.wrap("Unclosed string");
					}
					
				}
				
				#line 245 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
				if (( prev != -1 )) {
					#line 246 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
					buf.addChar(65533);
					#line 246 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
					prev = -1;
				}
				
				#line 248 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
				if (( buf == null )) {
					#line 249 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
					return global::haxe.lang.StringExt.substr(this.str, start, ( ( this.pos - start ) - 1 ));
				}
				else {
					#line 251 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
					{
						#line 251 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
						string s3 = this.str;
						#line 251 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
						object len1 = ( ( this.pos - start ) - 1 );
						#line 251 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
						buf.b.Append(((string) (s3) ), ((int) (start) ), ((int) (( (( len1 == default(object) )) ? (( s3.Length - start )) : (((int) (global::haxe.lang.Runtime.toInt(len1)) )) )) ));
					}
					
					#line 252 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
					return buf.b.ToString();
				}
				
			}
			#line default
		}
		
		
		public object parseNumber(int c) {
			unchecked {
				#line 257 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
				int start = ( this.pos - 1 );
				bool minus = ( c == 45 );
				bool digit =  ! (minus) ;
				bool zero = ( c == 48 );
				#line 259 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
				bool point = false;
				#line 259 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
				bool e = false;
				#line 259 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
				bool pm = false;
				#line 259 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
				bool end = false;
				while (true) {
					#line 261 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
					string s = this.str;
					#line 261 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
					int index = this.pos++;
					#line 261 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
					c = ( (((bool) (( ((uint) (index) ) < s.Length )) )) ? (((int) (s[index]) )) : (-1) );
					switch (c) {
						case 43:
						case 45:
						{
							#line 289 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							if ((  ! (e)  || pm )) {
								#line 290 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								this.invalidNumber(start);
							}
							
							#line 291 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							digit = false;
							pm = true;
							#line 288 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							break;
						}
						
						
						case 46:
						{
							#line 279 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							if (( ( minus || point ) || e )) {
								#line 280 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								this.invalidNumber(start);
							}
							
							#line 281 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							digit = false;
							point = true;
							#line 278 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							break;
						}
						
						
						case 48:
						{
							#line 264 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							if (( zero &&  ! (point)  )) {
								#line 265 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								this.invalidNumber(start);
							}
							
							#line 266 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							if (minus) {
								#line 267 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								minus = false;
								zero = true;
							}
							
							#line 270 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							digit = true;
							#line 263 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							break;
						}
						
						
						case 49:
						case 50:
						case 51:
						case 52:
						case 53:
						case 54:
						case 55:
						case 56:
						case 57:
						{
							#line 272 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							if (( zero &&  ! (point)  )) {
								#line 273 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								this.invalidNumber(start);
							}
							
							#line 274 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							if (minus) {
								#line 275 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								minus = false;
							}
							
							#line 276 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							digit = true;
							zero = false;
							#line 271 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							break;
						}
						
						
						case 69:
						case 101:
						{
							#line 284 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							if (( ( minus || zero ) || e )) {
								#line 285 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								this.invalidNumber(start);
							}
							
							#line 286 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							digit = false;
							e = true;
							#line 283 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							break;
						}
						
						
						default:
						{
							#line 294 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							if ( ! (digit) ) {
								#line 295 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
								this.invalidNumber(start);
							}
							
							#line 296 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							this.pos--;
							end = true;
							#line 293 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
							break;
						}
						
					}
					
					#line 299 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
					if (end) {
						#line 300 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
						break;
					}
					
				}
				
				#line 303 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
				double f = global::haxe.root.Std.parseFloat(global::haxe.lang.StringExt.substr(this.str, start, ( this.pos - start )));
				int i = ((int) (f) );
				#line 305 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
				if (( i == f )) {
					#line 305 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
					return i;
				}
				else {
					#line 305 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
					return f;
				}
				
			}
			#line default
		}
		
		
		public int nextChar() {
			unchecked {
				#line 309 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
				string s = this.str;
				#line 309 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
				int index = this.pos++;
				#line 309 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
				if (((bool) (( ((uint) (index) ) < s.Length )) )) {
					#line 309 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
					return ((int) (s[index]) );
				}
				else {
					#line 309 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
					return -1;
				}
				
			}
			#line default
		}
		
		
		public virtual void invalidChar() {
			unchecked {
				#line 313 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
				this.pos--;
				string s = this.str;
				int index = this.pos;
				throw global::haxe.lang.HaxeException.wrap(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("Invalid char ", global::haxe.lang.Runtime.toString((( (((bool) (( ((uint) (index) ) < s.Length )) )) ? (((int) (s[index]) )) : (-1) )))), " at position "), global::haxe.lang.Runtime.toString(this.pos)));
			}
			#line default
		}
		
		
		public virtual void invalidNumber(int start) {
			#line 318 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
			throw global::haxe.lang.HaxeException.wrap(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("Invalid number at position ", global::haxe.lang.Runtime.toString(start)), ": "), global::haxe.lang.StringExt.substr(this.str, start, ( this.pos - start ))));
		}
		#line default
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				#line 33 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
				switch (hash) {
					case 5594516:
					{
						#line 33 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
						this.pos = ((int) (@value) );
						#line 33 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
						return @value;
					}
					
					
					default:
					{
						#line 33 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
			#line default
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				#line 33 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
				switch (hash) {
					case 5594516:
					{
						#line 33 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
						this.pos = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						#line 33 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
						return @value;
					}
					
					
					case 5744817:
					{
						#line 33 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
						this.str = global::haxe.lang.Runtime.toString(@value);
						#line 33 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
						return @value;
					}
					
					
					default:
					{
						#line 33 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
			#line default
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				#line 33 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
				switch (hash) {
					case 652994848:
					{
						#line 33 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "invalidNumber", 652994848)) );
					}
					
					
					case 701410669:
					{
						#line 33 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "invalidChar", 701410669)) );
					}
					
					
					case 1837892969:
					{
						#line 33 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "nextChar", 1837892969)) );
					}
					
					
					case 481768284:
					{
						#line 33 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "parseNumber", 481768284)) );
					}
					
					
					case 208459108:
					{
						#line 33 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "parseString", 208459108)) );
					}
					
					
					case 1450762973:
					{
						#line 33 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "parseRec", 1450762973)) );
					}
					
					
					case 1887596712:
					{
						#line 33 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "doParse", 1887596712)) );
					}
					
					
					case 5594516:
					{
						#line 33 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
						return this.pos;
					}
					
					
					case 5744817:
					{
						#line 33 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
						return this.str;
					}
					
					
					default:
					{
						#line 33 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
			#line default
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				#line 33 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
				switch (hash) {
					case 5594516:
					{
						#line 33 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
						return ((double) (this.pos) );
					}
					
					
					default:
					{
						#line 33 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
			#line default
		}
		
		
		public override object __hx_invokeField(string field, int hash, object[] dynargs) {
			unchecked {
				#line 33 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
				switch (hash) {
					case 652994848:
					{
						#line 33 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
						this.invalidNumber(((int) (global::haxe.lang.Runtime.toInt(((object) (dynargs[0]) ))) ));
						#line 33 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
						break;
					}
					
					
					case 701410669:
					{
						#line 33 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
						this.invalidChar();
						#line 33 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
						break;
					}
					
					
					case 1837892969:
					{
						#line 33 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
						return this.nextChar();
					}
					
					
					case 481768284:
					{
						#line 33 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
						return this.parseNumber(((int) (global::haxe.lang.Runtime.toInt(((object) (dynargs[0]) ))) ));
					}
					
					
					case 208459108:
					{
						#line 33 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
						return this.parseString();
					}
					
					
					case 1450762973:
					{
						#line 33 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
						return this.parseRec();
					}
					
					
					case 1887596712:
					{
						#line 33 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
						return this.doParse();
					}
					
					
					default:
					{
						#line 33 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				#line 33 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
				return null;
			}
			#line default
		}
		
		
		public override void __hx_getFields(global::haxe.root.Array baseArr) {
			#line 33 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
			baseArr.push("pos");
			#line 33 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
			baseArr.push("str");
			#line 33 "C:\\HaxeToolkit\\haxe\\std\\haxe\\format\\JsonParser.hx"
			base.__hx_getFields(baseArr);
		}
		#line default
		
	}
}


