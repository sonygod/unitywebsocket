// Generated by Haxe 4.1.0-rc.1+0d88c583b
using haxe.root;

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe {
	public class EntryPoint : global::haxe.lang.HxObject {
		
		static EntryPoint() {
			global::haxe.EntryPoint.sleepLock = new global::sys.thread.Lock();
			global::haxe.EntryPoint.mutex = new global::sys.thread.Mutex();
			global::haxe.EntryPoint.pending = new global::haxe.root.Array();
			global::haxe.EntryPoint.threadCount = 0;
		}
		
		
		public EntryPoint(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public EntryPoint() {
			global::haxe.EntryPoint.__hx_ctor_haxe_EntryPoint(this);
		}
		
		
		protected static void __hx_ctor_haxe_EntryPoint(global::haxe.EntryPoint __hx_this) {
		}
		
		
		public static global::sys.thread.Lock sleepLock;
		
		public static global::sys.thread.Mutex mutex;
		
		public static global::haxe.root.Array pending;
		
		public static int threadCount;
		
		public static void wakeup() {
			global::haxe.EntryPoint.sleepLock.release();
		}
		
		
		public static void runInMainThread(global::haxe.lang.Function f) {
			global::haxe.EntryPoint.mutex.acquire();
			global::haxe.EntryPoint.pending.push(f);
			global::haxe.EntryPoint.mutex.release();
			global::haxe.EntryPoint.wakeup();
		}
		
		
		public static void addThread(global::haxe.lang.Function f) {
			global::haxe.EntryPoint.mutex.acquire();
			global::haxe.EntryPoint.threadCount++;
			global::haxe.EntryPoint.mutex.release();
			global::sys.thread._Thread.Thread_Impl_.create(new global::haxe.EntryPoint_addThread_68__Fun(f));
		}
		
		
		public static double processEvents() {
			unchecked {
				while (true) {
					global::haxe.EntryPoint.mutex.acquire();
					global::haxe.lang.Function f = ((global::haxe.lang.Function) (global::haxe.EntryPoint.pending.shift()) );
					global::haxe.EntryPoint.mutex.release();
					if (( f == null )) {
						break;
					}
					
					((global::haxe.lang.Function) (f) ).__hx_invoke0_o();
				}
				
				double time = global::haxe.MainLoop.tick();
				if ((  ! (global::haxe.MainLoop.hasEvents())  && ( global::haxe.EntryPoint.threadCount == 0 ) )) {
					return ((double) (-1) );
				}
				
				return time;
			}
		}
		
		
		public static void run() {
			while (true) {
				double nextTick = global::haxe.EntryPoint.processEvents();
				if (( nextTick < 0 )) {
					break;
				}
				
				if (( nextTick > 0 )) {
					global::haxe.EntryPoint.sleepLock.wait(nextTick);
				}
				
			}
			
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe {
	public class EntryPoint_addThread_68__Fun : global::haxe.lang.Function {
		
		public EntryPoint_addThread_68__Fun(global::haxe.lang.Function f) : base(0, 0) {
			this.f = f;
		}
		
		
		public override object __hx_invoke0_o() {
			this.f.__hx_invoke0_o();
			global::haxe.EntryPoint.mutex.acquire();
			global::haxe.EntryPoint.threadCount--;
			if (( global::haxe.EntryPoint.threadCount == 0 )) {
				global::haxe.EntryPoint.wakeup();
			}
			
			global::haxe.EntryPoint.mutex.release();
			return null;
		}
		
		
		public global::haxe.lang.Function f;
		
	}
}


