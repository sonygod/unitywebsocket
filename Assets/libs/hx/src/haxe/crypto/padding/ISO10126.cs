// Generated by Haxe 4.1.0-rc.1+0d88c583b
using haxe.root;

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.crypto.padding {
	public class ISO10126 : global::haxe.lang.HxObject {
		
		public ISO10126(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public ISO10126() {
			global::haxe.crypto.padding.ISO10126.__hx_ctor_haxe_crypto_padding_ISO10126(this);
		}
		
		
		protected static void __hx_ctor_haxe_crypto_padding_ISO10126(global::haxe.crypto.padding.ISO10126 __hx_this) {
		}
		
		
		public static global::haxe.io.Bytes pad(global::haxe.io.Bytes ciphertext, int blockSize) {
			unchecked {
				global::haxe.io.BytesBuffer buffer = new global::haxe.io.BytesBuffer();
				{
					int len = ciphertext.length;
					if (( ( len < 0 ) || ( len > ciphertext.length ) )) {
						throw global::haxe.lang.HaxeException.wrap(global::haxe.io.Error.OutsideBounds);
					}
					
					( buffer.b as global::System.IO.Stream ).Write(((byte[]) (ciphertext.b) ), ((int) (0) ), ((int) (len) ));
				}
				
				int padding = ( ( blockSize - ( ciphertext.length % blockSize ) ) - 1 );
				{
					int _g = 0;
					int _g1 = padding;
					while (( _g < _g1 )) {
						int i = _g++;
						{
							int @byte = global::haxe.root.Std.random(255);
							( buffer.b as global::System.IO.Stream ).WriteByte(((byte) (@byte) ));
						}
						
					}
					
				}
				
				( buffer.b as global::System.IO.Stream ).WriteByte(((byte) (( padding + 1 )) ));
				return buffer.getBytes();
			}
		}
		
		
		public static global::haxe.io.Bytes unpad(global::haxe.io.Bytes encrypt) {
			unchecked {
				int padding = ((int) (((byte) (encrypt.b[( encrypt.length - 1 )]) )) );
				return encrypt.sub(0, ( encrypt.length - padding ));
			}
		}
		
		
	}
}


