// Generated by Haxe 4.1.0-rc.1+0d88c583b
using haxe.root;

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.crypto {
	public class Aes : global::haxe.lang.HxObject {
		
		static Aes() {
			unchecked{
				global::haxe.crypto.Aes.SBOX_ARRAY = new global::haxe.root.Array(new object[]{99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118, 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22});
				global::haxe.crypto.Aes.RSBOX_ARRAY = new global::haxe.root.Array(new object[]{82, 9, 106, 213, 48, 54, 165, 56, 191, 64, 163, 158, 129, 243, 215, 251, 124, 227, 57, 130, 155, 47, 255, 135, 52, 142, 67, 68, 196, 222, 233, 203, 84, 123, 148, 50, 166, 194, 35, 61, 238, 76, 149, 11, 66, 250, 195, 78, 8, 46, 161, 102, 40, 217, 36, 178, 118, 91, 162, 73, 109, 139, 209, 37, 114, 248, 246, 100, 134, 104, 152, 22, 212, 164, 92, 204, 93, 101, 182, 146, 108, 112, 72, 80, 253, 237, 185, 218, 94, 21, 70, 87, 167, 141, 157, 132, 144, 216, 171, 0, 140, 188, 211, 10, 247, 228, 88, 5, 184, 179, 69, 6, 208, 44, 30, 143, 202, 63, 15, 2, 193, 175, 189, 3, 1, 19, 138, 107, 58, 145, 17, 65, 79, 103, 220, 234, 151, 242, 207, 206, 240, 180, 230, 115, 150, 172, 116, 34, 231, 173, 53, 133, 226, 249, 55, 232, 28, 117, 223, 110, 71, 241, 26, 113, 29, 41, 197, 137, 111, 183, 98, 14, 170, 24, 190, 27, 252, 86, 62, 75, 198, 210, 121, 32, 154, 219, 192, 254, 120, 205, 90, 244, 31, 221, 168, 51, 136, 7, 199, 49, 177, 18, 16, 89, 39, 128, 236, 95, 96, 81, 127, 169, 25, 181, 74, 13, 45, 229, 122, 159, 147, 201, 156, 239, 160, 224, 59, 77, 174, 42, 245, 176, 200, 235, 187, 60, 131, 83, 153, 97, 23, 43, 4, 126, 186, 119, 214, 38, 225, 105, 20, 99, 85, 33, 12, 125});
				global::haxe.crypto.Aes.POWER3_ARRAY = new global::haxe.root.Array(new object[]{1, 3, 5, 15, 17, 51, 85, 255, 26, 46, 114, 150, 161, 248, 19, 53, 95, 225, 56, 72, 216, 115, 149, 164, 247, 2, 6, 10, 30, 34, 102, 170, 229, 52, 92, 228, 55, 89, 235, 38, 106, 190, 217, 112, 144, 171, 230, 49, 83, 245, 4, 12, 20, 60, 68, 204, 79, 209, 104, 184, 211, 110, 178, 205, 76, 212, 103, 169, 224, 59, 77, 215, 98, 166, 241, 8, 24, 40, 120, 136, 131, 158, 185, 208, 107, 189, 220, 127, 129, 152, 179, 206, 73, 219, 118, 154, 181, 196, 87, 249, 16, 48, 80, 240, 11, 29, 39, 105, 187, 214, 97, 163, 254, 25, 43, 125, 135, 146, 173, 236, 47, 113, 147, 174, 233, 32, 96, 160, 251, 22, 58, 78, 210, 109, 183, 194, 93, 231, 50, 86, 250, 21, 63, 65, 195, 94, 226, 61, 71, 201, 64, 192, 91, 237, 44, 116, 156, 191, 218, 117, 159, 186, 213, 100, 172, 239, 42, 126, 130, 157, 188, 223, 122, 142, 137, 128, 155, 182, 193, 88, 232, 35, 101, 175, 234, 37, 111, 177, 200, 67, 197, 84, 252, 31, 33, 99, 165, 244, 7, 9, 27, 45, 119, 153, 176, 203, 70, 202, 69, 207, 74, 222, 121, 139, 134, 145, 168, 227, 62, 66, 198, 81, 243, 14, 18, 54, 90, 238, 41, 123, 141, 140, 143, 138, 133, 148, 167, 242, 13, 23, 57, 75, 221, 124, 132, 151, 162, 253, 28, 36, 108, 180, 199, 82, 246});
				global::haxe.crypto.Aes.LOG3_ARRAY = new global::haxe.root.Array(new object[]{0, 0, 25, 1, 50, 2, 26, 198, 75, 199, 27, 104, 51, 238, 223, 3, 100, 4, 224, 14, 52, 141, 129, 239, 76, 113, 8, 200, 248, 105, 28, 193, 125, 194, 29, 181, 249, 185, 39, 106, 77, 228, 166, 114, 154, 201, 9, 120, 101, 47, 138, 5, 33, 15, 225, 36, 18, 240, 130, 69, 53, 147, 218, 142, 150, 143, 219, 189, 54, 208, 206, 148, 19, 92, 210, 241, 64, 70, 131, 56, 102, 221, 253, 48, 191, 6, 139, 98, 179, 37, 226, 152, 34, 136, 145, 16, 126, 110, 72, 195, 163, 182, 30, 66, 58, 107, 40, 84, 250, 133, 61, 186, 43, 121, 10, 21, 155, 159, 94, 202, 78, 212, 172, 229, 243, 115, 167, 87, 175, 88, 168, 80, 244, 234, 214, 116, 79, 174, 233, 213, 231, 230, 173, 232, 44, 215, 117, 122, 235, 22, 11, 245, 89, 203, 95, 176, 156, 169, 81, 160, 127, 12, 246, 111, 23, 196, 73, 236, 216, 67, 31, 45, 164, 118, 123, 183, 204, 187, 62, 90, 251, 96, 177, 134, 59, 82, 161, 108, 170, 85, 41, 157, 151, 178, 135, 144, 97, 190, 220, 252, 188, 149, 207, 205, 55, 63, 91, 209, 83, 57, 132, 60, 65, 162, 109, 71, 20, 42, 158, 93, 86, 242, 211, 171, 68, 17, 146, 217, 35, 32, 46, 137, 180, 124, 184, 38, 119, 153, 227, 165, 103, 74, 237, 222, 197, 49, 254, 24, 13, 99, 140, 128, 192, 247, 112, 7});
				global::haxe.crypto.Aes.RCON_ARRAY = new global::haxe.root.Array(new object[]{141, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54});
				global::haxe.crypto.Aes.NB = 4;
				global::haxe.crypto.Aes.BLOCK_SIZE = 16;
			}
		}
		
		
		public Aes(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Aes(global::haxe.io.Bytes key, global::haxe.io.Bytes iv) {
			global::haxe.crypto.Aes.__hx_ctor_haxe_crypto_Aes(this, key, iv);
		}
		
		
		protected static void __hx_ctor_haxe_crypto_Aes(global::haxe.crypto.Aes __hx_this, global::haxe.io.Bytes key, global::haxe.io.Bytes iv) {
			unchecked {
				global::haxe.root.Array array = global::haxe.crypto.Aes.SBOX_ARRAY;
				int[] ret = new int[array.length];
				{
					int _g = 0;
					int _g1 = array.length;
					while (( _g < _g1 )) {
						int i = _g++;
						ret[i] = ((int) (global::haxe.lang.Runtime.toInt(array.__get(i))) );
					}
					
				}
				
				global::haxe.crypto.Aes.SBOX = ((int[]) (ret) );
				global::haxe.root.Array array1 = global::haxe.crypto.Aes.RSBOX_ARRAY;
				int[] ret1 = new int[array1.length];
				{
					int _g2 = 0;
					int _g11 = array1.length;
					while (( _g2 < _g11 )) {
						int i1 = _g2++;
						ret1[i1] = ((int) (global::haxe.lang.Runtime.toInt(array1.__get(i1))) );
					}
					
				}
				
				global::haxe.crypto.Aes.RSBOX = ((int[]) (ret1) );
				global::haxe.root.Array array2 = global::haxe.crypto.Aes.POWER3_ARRAY;
				int[] ret2 = new int[array2.length];
				{
					int _g3 = 0;
					int _g12 = array2.length;
					while (( _g3 < _g12 )) {
						int i2 = _g3++;
						ret2[i2] = ((int) (global::haxe.lang.Runtime.toInt(array2.__get(i2))) );
					}
					
				}
				
				global::haxe.crypto.Aes.POWER3 = ((int[]) (ret2) );
				global::haxe.root.Array array3 = global::haxe.crypto.Aes.LOG3_ARRAY;
				int[] ret3 = new int[array3.length];
				{
					int _g4 = 0;
					int _g13 = array3.length;
					while (( _g4 < _g13 )) {
						int i3 = _g4++;
						ret3[i3] = ((int) (global::haxe.lang.Runtime.toInt(array3.__get(i3))) );
					}
					
				}
				
				global::haxe.crypto.Aes.LOG3 = ((int[]) (ret3) );
				global::haxe.root.Array array4 = global::haxe.crypto.Aes.RCON_ARRAY;
				int[] ret4 = new int[array4.length];
				{
					int _g5 = 0;
					int _g14 = array4.length;
					while (( _g5 < _g14 )) {
						int i4 = _g5++;
						ret4[i4] = ((int) (global::haxe.lang.Runtime.toInt(array4.__get(i4))) );
					}
					
				}
				
				global::haxe.crypto.Aes.RCON = ((int[]) (ret4) );
				int[][] this1 = new int[4][];
				__hx_this.state = ((int[][]) (this1) );
				if (( key != null )) {
					__hx_this.init(key, iv);
				}
				
			}
		}
		
		
		public static int[] SBOX;
		
		public static int[] RSBOX;
		
		public static int[] POWER3;
		
		public static int[] LOG3;
		
		public static int[] RCON;
		
		public static global::haxe.root.Array SBOX_ARRAY;
		
		public static global::haxe.root.Array RSBOX_ARRAY;
		
		public static global::haxe.root.Array POWER3_ARRAY;
		
		public static global::haxe.root.Array LOG3_ARRAY;
		
		public static global::haxe.root.Array RCON_ARRAY;
		
		public static int NB;
		
		public static int BLOCK_SIZE;
		
		public int[] roundKey;
		
		public int[][] state;
		
		public int Nk;
		
		public int Nr;
		
		public global::haxe.io.Bytes iv;
		
		public virtual global::haxe.io.Bytes set_iv(global::haxe.io.Bytes vector) {
			unchecked {
				this.iv = vector;
				if (( this.iv == null )) {
					this.iv = global::haxe.io.Bytes.alloc(16);
					this.iv.fill(0, 16, 0);
				}
				
				return this.iv;
			}
		}
		
		
		public virtual void init(global::haxe.io.Bytes key, global::haxe.io.Bytes iv) {
			unchecked {
				int keyLength = key.length;
				this.Nk = ( keyLength >> 2 );
				this.Nr = ( this.Nk + 6 );
				this.set_iv(iv);
				this.roundKey = this.keyExpansion(key);
			}
		}
		
		
		public virtual int getBlockSize() {
			unchecked {
				return 16;
			}
		}
		
		
		public virtual global::haxe.io.Bytes encrypt(string cipherMode, global::haxe.io.Bytes data, string padding) {
			unchecked {
				if (( padding == null )) {
					padding = "PKCS7";
				}
				
				global::haxe.io.Bytes @out = null;
				switch (((string) ((padding)) )) {
					case "AnsiX923":
					{
						@out = global::haxe.crypto.padding.AnsiX923.pad(data, 16);
						break;
					}
					
					
					case "BitPadding":
					{
						@out = global::haxe.crypto.padding.BitPadding.pad(data, 16);
						break;
					}
					
					
					case "ISO10126":
					{
						@out = global::haxe.crypto.padding.ISO10126.pad(data, 16);
						break;
					}
					
					
					case "NoPadding":
					{
						@out = global::haxe.crypto.padding.NoPadding.pad(data, 16);
						break;
					}
					
					
					case "NullPadding":
					{
						@out = global::haxe.crypto.padding.NullPadding.pad(data, 16);
						break;
					}
					
					
					case "PKCS7":
					{
						@out = global::haxe.crypto.padding.PKCS7.pad(data, 16);
						break;
					}
					
					
					case "SpacePadding":
					{
						@out = global::haxe.crypto.padding.SpacePadding.pad(data, 16);
						break;
					}
					
					
					case "TBC":
					{
						@out = global::haxe.crypto.padding.TBC.pad(data, 16);
						break;
					}
					
					
				}
				
				switch (cipherMode) {
					case "cbc":
					{
						global::haxe.crypto.mode.CBC.encrypt(@out, this.iv, 16, ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "encryptBlock", 3217576)) ));
						break;
					}
					
					
					case "cfb":
					{
						global::haxe.crypto.mode.CFB.encrypt(@out, this.iv, 16, ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "encryptBlock", 3217576)) ));
						break;
					}
					
					
					case "ctr":
					{
						global::haxe.crypto.mode.CTR.encrypt(@out, this.iv, 16, ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "encryptBlock", 3217576)) ));
						break;
					}
					
					
					case "ecb":
					{
						global::haxe.crypto.mode.ECB.encrypt(@out, 16, ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "encryptBlock", 3217576)) ));
						break;
					}
					
					
					case "ofb":
					{
						global::haxe.crypto.mode.OFB.encrypt(@out, this.iv, 16, ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "encryptBlock", 3217576)) ));
						break;
					}
					
					
					case "pcbc":
					{
						global::haxe.crypto.mode.PCBC.encrypt(@out, this.iv, 16, ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "encryptBlock", 3217576)) ));
						break;
					}
					
					
				}
				
				return @out;
			}
		}
		
		
		public virtual global::haxe.io.Bytes decrypt(string cipherMode, global::haxe.io.Bytes data, string padding) {
			unchecked {
				if (( padding == null )) {
					padding = "PKCS7";
				}
				
				global::haxe.io.Bytes @out = data;
				switch (cipherMode) {
					case "cbc":
					{
						global::haxe.crypto.mode.CBC.decrypt(@out, this.iv, 16, ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "decryptBlock", 916448704)) ));
						break;
					}
					
					
					case "cfb":
					{
						global::haxe.crypto.mode.CFB.decrypt(@out, this.iv, 16, ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "encryptBlock", 3217576)) ));
						break;
					}
					
					
					case "ctr":
					{
						global::haxe.crypto.mode.CTR.decrypt(@out, this.iv, 16, ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "encryptBlock", 3217576)) ));
						break;
					}
					
					
					case "ecb":
					{
						global::haxe.crypto.mode.ECB.decrypt(@out, 16, ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "decryptBlock", 916448704)) ));
						break;
					}
					
					
					case "ofb":
					{
						global::haxe.crypto.mode.OFB.decrypt(@out, this.iv, 16, ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "encryptBlock", 3217576)) ));
						break;
					}
					
					
					case "pcbc":
					{
						global::haxe.crypto.mode.PCBC.decrypt(@out, this.iv, 16, ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "decryptBlock", 916448704)) ));
						break;
					}
					
					
				}
				
				switch (((string) ((padding)) )) {
					case "AnsiX923":
					{
						@out = global::haxe.crypto.padding.AnsiX923.unpad(@out);
						break;
					}
					
					
					case "BitPadding":
					{
						@out = global::haxe.crypto.padding.BitPadding.unpad(@out);
						break;
					}
					
					
					case "ISO10126":
					{
						@out = global::haxe.crypto.padding.ISO10126.unpad(@out);
						break;
					}
					
					
					case "NoPadding":
					{
						@out = global::haxe.crypto.padding.NoPadding.unpad(@out);
						break;
					}
					
					
					case "NullPadding":
					{
						@out = global::haxe.crypto.padding.NullPadding.unpad(@out);
						break;
					}
					
					
					case "PKCS7":
					{
						@out = global::haxe.crypto.padding.PKCS7.unpad(@out);
						break;
					}
					
					
					case "SpacePadding":
					{
						@out = global::haxe.crypto.padding.SpacePadding.unpad(@out);
						break;
					}
					
					
					case "TBC":
					{
						@out = global::haxe.crypto.padding.TBC.unpad(@out);
						break;
					}
					
					
				}
				
				return @out;
			}
		}
		
		
		public virtual void encryptBlock(global::haxe.io.Bytes src, int srcIndex, global::haxe.io.Bytes dst, int dstIndex) {
			unchecked {
				{
					((int[][]) (this.state) )[0] = new int[]{((int) (((byte) (src.b[srcIndex]) )) ), ((int) (((byte) (src.b[( srcIndex + 1 )]) )) ), ((int) (((byte) (src.b[( srcIndex + 2 )]) )) ), ((int) (((byte) (src.b[( srcIndex + 3 )]) )) )};
					((int[][]) (this.state) )[1] = new int[]{((int) (((byte) (src.b[( 4 + srcIndex )]) )) ), ((int) (((byte) (src.b[( ( 4 + srcIndex ) + 1 )]) )) ), ((int) (((byte) (src.b[( ( 4 + srcIndex ) + 2 )]) )) ), ((int) (((byte) (src.b[( ( 4 + srcIndex ) + 3 )]) )) )};
					((int[][]) (this.state) )[2] = new int[]{((int) (((byte) (src.b[( 8 + srcIndex )]) )) ), ((int) (((byte) (src.b[( ( 8 + srcIndex ) + 1 )]) )) ), ((int) (((byte) (src.b[( ( 8 + srcIndex ) + 2 )]) )) ), ((int) (((byte) (src.b[( ( 8 + srcIndex ) + 3 )]) )) )};
					((int[][]) (this.state) )[3] = new int[]{((int) (((byte) (src.b[( 12 + srcIndex )]) )) ), ((int) (((byte) (src.b[( ( 12 + srcIndex ) + 1 )]) )) ), ((int) (((byte) (src.b[( ( 12 + srcIndex ) + 2 )]) )) ), ((int) (((byte) (src.b[( ( 12 + srcIndex ) + 3 )]) )) )};
				}
				
				this.addRoundKey(0);
				{
					int _g = 1;
					int _g1 = this.Nr;
					while (( _g < _g1 )) {
						int round = _g++;
						this.subBytes();
						this.shiftRows();
						this.mixColumns();
						this.addRoundKey(round);
					}
					
				}
				
				this.subBytes();
				this.shiftRows();
				this.addRoundKey(this.Nr);
				{
					{
						dst.b[dstIndex] = ((byte) (((int) (((int[]) (((int[][]) (this.state) )[0]) )[0]) )) );
						dst.b[( 1 + dstIndex )] = ((byte) (((int) (((int[]) (((int[][]) (this.state) )[0]) )[1]) )) );
						dst.b[( 2 + dstIndex )] = ((byte) (((int) (((int[]) (((int[][]) (this.state) )[0]) )[2]) )) );
						dst.b[( 3 + dstIndex )] = ((byte) (((int) (((int[]) (((int[][]) (this.state) )[0]) )[3]) )) );
					}
					
					{
						dst.b[( 4 + dstIndex )] = ((byte) (((int) (((int[]) (((int[][]) (this.state) )[1]) )[0]) )) );
						dst.b[( 5 + dstIndex )] = ((byte) (((int) (((int[]) (((int[][]) (this.state) )[1]) )[1]) )) );
						dst.b[( 6 + dstIndex )] = ((byte) (((int) (((int[]) (((int[][]) (this.state) )[1]) )[2]) )) );
						dst.b[( 7 + dstIndex )] = ((byte) (((int) (((int[]) (((int[][]) (this.state) )[1]) )[3]) )) );
					}
					
					{
						dst.b[( 8 + dstIndex )] = ((byte) (((int) (((int[]) (((int[][]) (this.state) )[2]) )[0]) )) );
						dst.b[( 9 + dstIndex )] = ((byte) (((int) (((int[]) (((int[][]) (this.state) )[2]) )[1]) )) );
						dst.b[( 10 + dstIndex )] = ((byte) (((int) (((int[]) (((int[][]) (this.state) )[2]) )[2]) )) );
						dst.b[( 11 + dstIndex )] = ((byte) (((int) (((int[]) (((int[][]) (this.state) )[2]) )[3]) )) );
					}
					
					{
						dst.b[( 12 + dstIndex )] = ((byte) (((int) (((int[]) (((int[][]) (this.state) )[3]) )[0]) )) );
						dst.b[( 13 + dstIndex )] = ((byte) (((int) (((int[]) (((int[][]) (this.state) )[3]) )[1]) )) );
						dst.b[( 14 + dstIndex )] = ((byte) (((int) (((int[]) (((int[][]) (this.state) )[3]) )[2]) )) );
						dst.b[( 15 + dstIndex )] = ((byte) (((int) (((int[]) (((int[][]) (this.state) )[3]) )[3]) )) );
					}
					
				}
				
			}
		}
		
		
		public virtual void decryptBlock(global::haxe.io.Bytes src, int srcIndex, global::haxe.io.Bytes dst, int dstIndex) {
			unchecked {
				{
					((int[][]) (this.state) )[0] = new int[]{((int) (((byte) (src.b[srcIndex]) )) ), ((int) (((byte) (src.b[( srcIndex + 1 )]) )) ), ((int) (((byte) (src.b[( srcIndex + 2 )]) )) ), ((int) (((byte) (src.b[( srcIndex + 3 )]) )) )};
					((int[][]) (this.state) )[1] = new int[]{((int) (((byte) (src.b[( 4 + srcIndex )]) )) ), ((int) (((byte) (src.b[( ( 4 + srcIndex ) + 1 )]) )) ), ((int) (((byte) (src.b[( ( 4 + srcIndex ) + 2 )]) )) ), ((int) (((byte) (src.b[( ( 4 + srcIndex ) + 3 )]) )) )};
					((int[][]) (this.state) )[2] = new int[]{((int) (((byte) (src.b[( 8 + srcIndex )]) )) ), ((int) (((byte) (src.b[( ( 8 + srcIndex ) + 1 )]) )) ), ((int) (((byte) (src.b[( ( 8 + srcIndex ) + 2 )]) )) ), ((int) (((byte) (src.b[( ( 8 + srcIndex ) + 3 )]) )) )};
					((int[][]) (this.state) )[3] = new int[]{((int) (((byte) (src.b[( 12 + srcIndex )]) )) ), ((int) (((byte) (src.b[( ( 12 + srcIndex ) + 1 )]) )) ), ((int) (((byte) (src.b[( ( 12 + srcIndex ) + 2 )]) )) ), ((int) (((byte) (src.b[( ( 12 + srcIndex ) + 3 )]) )) )};
				}
				
				this.addRoundKey(this.Nr);
				int round = ( this.Nr - 1 );
				while (( round > 0 )) {
					this.invShiftRows();
					this.invSubBytes();
					this.addRoundKey(round);
					this.invMixColumns();
					 -- round;
				}
				
				this.invShiftRows();
				this.invSubBytes();
				this.addRoundKey(0);
				{
					{
						dst.b[dstIndex] = ((byte) (((int) (((int[]) (((int[][]) (this.state) )[0]) )[0]) )) );
						dst.b[( 1 + dstIndex )] = ((byte) (((int) (((int[]) (((int[][]) (this.state) )[0]) )[1]) )) );
						dst.b[( 2 + dstIndex )] = ((byte) (((int) (((int[]) (((int[][]) (this.state) )[0]) )[2]) )) );
						dst.b[( 3 + dstIndex )] = ((byte) (((int) (((int[]) (((int[][]) (this.state) )[0]) )[3]) )) );
					}
					
					{
						dst.b[( 4 + dstIndex )] = ((byte) (((int) (((int[]) (((int[][]) (this.state) )[1]) )[0]) )) );
						dst.b[( 5 + dstIndex )] = ((byte) (((int) (((int[]) (((int[][]) (this.state) )[1]) )[1]) )) );
						dst.b[( 6 + dstIndex )] = ((byte) (((int) (((int[]) (((int[][]) (this.state) )[1]) )[2]) )) );
						dst.b[( 7 + dstIndex )] = ((byte) (((int) (((int[]) (((int[][]) (this.state) )[1]) )[3]) )) );
					}
					
					{
						dst.b[( 8 + dstIndex )] = ((byte) (((int) (((int[]) (((int[][]) (this.state) )[2]) )[0]) )) );
						dst.b[( 9 + dstIndex )] = ((byte) (((int) (((int[]) (((int[][]) (this.state) )[2]) )[1]) )) );
						dst.b[( 10 + dstIndex )] = ((byte) (((int) (((int[]) (((int[][]) (this.state) )[2]) )[2]) )) );
						dst.b[( 11 + dstIndex )] = ((byte) (((int) (((int[]) (((int[][]) (this.state) )[2]) )[3]) )) );
					}
					
					{
						dst.b[( 12 + dstIndex )] = ((byte) (((int) (((int[]) (((int[][]) (this.state) )[3]) )[0]) )) );
						dst.b[( 13 + dstIndex )] = ((byte) (((int) (((int[]) (((int[][]) (this.state) )[3]) )[1]) )) );
						dst.b[( 14 + dstIndex )] = ((byte) (((int) (((int[]) (((int[][]) (this.state) )[3]) )[2]) )) );
						dst.b[( 15 + dstIndex )] = ((byte) (((int) (((int[]) (((int[][]) (this.state) )[3]) )[3]) )) );
					}
					
				}
				
			}
		}
		
		
		public virtual int[] rotWord(int[] w) {
			unchecked {
				int tmp = ((int) (((int[]) (w) )[0]) );
				{
					((int[]) (w) )[0] = ((int) (((int[]) (w) )[1]) );
					((int[]) (w) )[1] = ((int) (((int[]) (w) )[2]) );
					((int[]) (w) )[2] = ((int) (((int[]) (w) )[3]) );
				}
				
				((int[]) (w) )[3] = tmp;
				return w;
			}
		}
		
		
		public virtual int[] subWord(int[] w) {
			unchecked {
				{
					((int[]) (w) )[0] = ((int) (((int[]) (global::haxe.crypto.Aes.SBOX) )[((int) (((int[]) (w) )[0]) )]) );
					((int[]) (w) )[1] = ((int) (((int[]) (global::haxe.crypto.Aes.SBOX) )[((int) (((int[]) (w) )[1]) )]) );
					((int[]) (w) )[2] = ((int) (((int[]) (global::haxe.crypto.Aes.SBOX) )[((int) (((int[]) (w) )[2]) )]) );
					((int[]) (w) )[3] = ((int) (((int[]) (global::haxe.crypto.Aes.SBOX) )[((int) (((int[]) (w) )[3]) )]) );
				}
				
				return w;
			}
		}
		
		
		public virtual int[] keyExpansion(global::haxe.io.Bytes key) {
			unchecked {
				int[] this1 = new int[( 16 * (( this.Nr + 1 )) )];
				int[] roundKey = ((int[]) (this1) );
				int[] this2 = new int[4];
				int[] temp = ((int[]) (this2) );
				{
					int _g = 0;
					int _g1 = this.Nk;
					while (( _g < _g1 )) {
						int i = _g++;
						{
							((int[]) (roundKey) )[( 4 * i )] = ((int) (((byte) (key.b[( 4 * i )]) )) );
							((int[]) (roundKey) )[( ( 4 * i ) + 1 )] = ((int) (((byte) (key.b[( ( 4 * i ) + 1 )]) )) );
							((int[]) (roundKey) )[( ( 4 * i ) + 2 )] = ((int) (((byte) (key.b[( ( 4 * i ) + 2 )]) )) );
							((int[]) (roundKey) )[( ( 4 * i ) + 3 )] = ((int) (((byte) (key.b[( ( 4 * i ) + 3 )]) )) );
						}
						
					}
					
				}
				
				{
					int _g2 = this.Nk;
					int _g3 = ( 4 * (( this.Nr + 1 )) );
					while (( _g2 < _g3 )) {
						int i1 = _g2++;
						{
							((int[]) (temp) )[0] = ((int) (((int[]) (roundKey) )[( 4 * (( i1 - 1 )) )]) );
							((int[]) (temp) )[1] = ((int) (((int[]) (roundKey) )[( ( 4 * (( i1 - 1 )) ) + 1 )]) );
							((int[]) (temp) )[2] = ((int) (((int[]) (roundKey) )[( ( 4 * (( i1 - 1 )) ) + 2 )]) );
							((int[]) (temp) )[3] = ((int) (((int[]) (roundKey) )[( ( 4 * (( i1 - 1 )) ) + 3 )]) );
						}
						
						if (( ( i1 % this.Nk ) == 0 )) {
							temp = this.subWord(this.rotWord(temp));
							int k = ( i1 / this.Nk );
							{
								int[] _g21 = temp;
								((int[]) (_g21) )[0] = ( ((int) (((int[]) (_g21) )[0]) ) ^ ((int) (((int[]) (global::haxe.crypto.Aes.RCON) )[k]) ) );
							}
							
						}
						else if (( ( this.Nk > 6 ) && ( ( i1 % this.Nk ) == 4 ) )) {
							temp = this.subWord(temp);
						}
						
						int k1 = ( i1 * 4 );
						int m = ( (( i1 - this.Nk )) * 4 );
						{
							((int[]) (roundKey) )[k1] = ( ((int) (((int[]) (roundKey) )[m]) ) ^ ((int) (((int[]) (temp) )[0]) ) );
							((int[]) (roundKey) )[( k1 + 1 )] = ( ((int) (((int[]) (roundKey) )[( m + 1 )]) ) ^ ((int) (((int[]) (temp) )[1]) ) );
							((int[]) (roundKey) )[( k1 + 2 )] = ( ((int) (((int[]) (roundKey) )[( m + 2 )]) ) ^ ((int) (((int[]) (temp) )[2]) ) );
							((int[]) (roundKey) )[( k1 + 3 )] = ( ((int) (((int[]) (roundKey) )[( m + 3 )]) ) ^ ((int) (((int[]) (temp) )[3]) ) );
						}
						
					}
					
				}
				
				return roundKey;
			}
		}
		
		
		public virtual void addRoundKey(int round) {
			unchecked {
				round <<= 2;
				{
					{
						{
							int _g = 0;
							int[] _g1 = ((int[]) (((int[][]) (this.state) )[0]) );
							((int[]) (_g1) )[_g] = ( ((int) (((int[]) (_g1) )[_g]) ) ^ ((int) (((int[]) (this.roundKey) )[( round * 4 )]) ) );
						}
						
						{
							int _g2 = 1;
							int[] _g11 = ((int[]) (((int[][]) (this.state) )[0]) );
							((int[]) (_g11) )[_g2] = ( ((int) (((int[]) (_g11) )[_g2]) ) ^ ((int) (((int[]) (this.roundKey) )[( ( round * 4 ) + 1 )]) ) );
						}
						
						{
							int _g3 = 2;
							int[] _g12 = ((int[]) (((int[][]) (this.state) )[0]) );
							((int[]) (_g12) )[_g3] = ( ((int) (((int[]) (_g12) )[_g3]) ) ^ ((int) (((int[]) (this.roundKey) )[( ( round * 4 ) + 2 )]) ) );
						}
						
						{
							int _g4 = 3;
							int[] _g13 = ((int[]) (((int[][]) (this.state) )[0]) );
							((int[]) (_g13) )[_g4] = ( ((int) (((int[]) (_g13) )[_g4]) ) ^ ((int) (((int[]) (this.roundKey) )[( ( round * 4 ) + 3 )]) ) );
						}
						
					}
					
					{
						{
							int _g5 = 0;
							int[] _g14 = ((int[]) (((int[][]) (this.state) )[1]) );
							((int[]) (_g14) )[_g5] = ( ((int) (((int[]) (_g14) )[_g5]) ) ^ ((int) (((int[]) (this.roundKey) )[( ( round * 4 ) + 4 )]) ) );
						}
						
						{
							int _g6 = 1;
							int[] _g15 = ((int[]) (((int[][]) (this.state) )[1]) );
							((int[]) (_g15) )[_g6] = ( ((int) (((int[]) (_g15) )[_g6]) ) ^ ((int) (((int[]) (this.roundKey) )[( ( ( round * 4 ) + 4 ) + 1 )]) ) );
						}
						
						{
							int _g7 = 2;
							int[] _g16 = ((int[]) (((int[][]) (this.state) )[1]) );
							((int[]) (_g16) )[_g7] = ( ((int) (((int[]) (_g16) )[_g7]) ) ^ ((int) (((int[]) (this.roundKey) )[( ( ( round * 4 ) + 4 ) + 2 )]) ) );
						}
						
						{
							int _g8 = 3;
							int[] _g17 = ((int[]) (((int[][]) (this.state) )[1]) );
							((int[]) (_g17) )[_g8] = ( ((int) (((int[]) (_g17) )[_g8]) ) ^ ((int) (((int[]) (this.roundKey) )[( ( ( round * 4 ) + 4 ) + 3 )]) ) );
						}
						
					}
					
					{
						{
							int _g9 = 0;
							int[] _g18 = ((int[]) (((int[][]) (this.state) )[2]) );
							((int[]) (_g18) )[_g9] = ( ((int) (((int[]) (_g18) )[_g9]) ) ^ ((int) (((int[]) (this.roundKey) )[( ( round * 4 ) + 8 )]) ) );
						}
						
						{
							int _g10 = 1;
							int[] _g19 = ((int[]) (((int[][]) (this.state) )[2]) );
							((int[]) (_g19) )[_g10] = ( ((int) (((int[]) (_g19) )[_g10]) ) ^ ((int) (((int[]) (this.roundKey) )[( ( ( round * 4 ) + 8 ) + 1 )]) ) );
						}
						
						{
							int _g20 = 2;
							int[] _g110 = ((int[]) (((int[][]) (this.state) )[2]) );
							((int[]) (_g110) )[_g20] = ( ((int) (((int[]) (_g110) )[_g20]) ) ^ ((int) (((int[]) (this.roundKey) )[( ( ( round * 4 ) + 8 ) + 2 )]) ) );
						}
						
						{
							int _g21 = 3;
							int[] _g111 = ((int[]) (((int[][]) (this.state) )[2]) );
							((int[]) (_g111) )[_g21] = ( ((int) (((int[]) (_g111) )[_g21]) ) ^ ((int) (((int[]) (this.roundKey) )[( ( ( round * 4 ) + 8 ) + 3 )]) ) );
						}
						
					}
					
					{
						{
							int _g22 = 0;
							int[] _g112 = ((int[]) (((int[][]) (this.state) )[3]) );
							((int[]) (_g112) )[_g22] = ( ((int) (((int[]) (_g112) )[_g22]) ) ^ ((int) (((int[]) (this.roundKey) )[( ( round * 4 ) + 12 )]) ) );
						}
						
						{
							int _g23 = 1;
							int[] _g113 = ((int[]) (((int[][]) (this.state) )[3]) );
							((int[]) (_g113) )[_g23] = ( ((int) (((int[]) (_g113) )[_g23]) ) ^ ((int) (((int[]) (this.roundKey) )[( ( ( round * 4 ) + 12 ) + 1 )]) ) );
						}
						
						{
							int _g24 = 2;
							int[] _g114 = ((int[]) (((int[][]) (this.state) )[3]) );
							((int[]) (_g114) )[_g24] = ( ((int) (((int[]) (_g114) )[_g24]) ) ^ ((int) (((int[]) (this.roundKey) )[( ( ( round * 4 ) + 12 ) + 2 )]) ) );
						}
						
						{
							int _g25 = 3;
							int[] _g115 = ((int[]) (((int[][]) (this.state) )[3]) );
							((int[]) (_g115) )[_g25] = ( ((int) (((int[]) (_g115) )[_g25]) ) ^ ((int) (((int[]) (this.roundKey) )[( ( ( round * 4 ) + 12 ) + 3 )]) ) );
						}
						
					}
					
				}
				
			}
		}
		
		
		public virtual void subBytes() {
			unchecked {
				{
					((int[]) (((int[][]) (this.state) )[0]) )[0] = ((int) (((int[]) (global::haxe.crypto.Aes.SBOX) )[((int) (((int[]) (((int[][]) (this.state) )[0]) )[0]) )]) );
					((int[]) (((int[][]) (this.state) )[0]) )[1] = ((int) (((int[]) (global::haxe.crypto.Aes.SBOX) )[((int) (((int[]) (((int[][]) (this.state) )[0]) )[1]) )]) );
					((int[]) (((int[][]) (this.state) )[0]) )[2] = ((int) (((int[]) (global::haxe.crypto.Aes.SBOX) )[((int) (((int[]) (((int[][]) (this.state) )[0]) )[2]) )]) );
					((int[]) (((int[][]) (this.state) )[0]) )[3] = ((int) (((int[]) (global::haxe.crypto.Aes.SBOX) )[((int) (((int[]) (((int[][]) (this.state) )[0]) )[3]) )]) );
				}
				
				{
					((int[]) (((int[][]) (this.state) )[1]) )[0] = ((int) (((int[]) (global::haxe.crypto.Aes.SBOX) )[((int) (((int[]) (((int[][]) (this.state) )[1]) )[0]) )]) );
					((int[]) (((int[][]) (this.state) )[1]) )[1] = ((int) (((int[]) (global::haxe.crypto.Aes.SBOX) )[((int) (((int[]) (((int[][]) (this.state) )[1]) )[1]) )]) );
					((int[]) (((int[][]) (this.state) )[1]) )[2] = ((int) (((int[]) (global::haxe.crypto.Aes.SBOX) )[((int) (((int[]) (((int[][]) (this.state) )[1]) )[2]) )]) );
					((int[]) (((int[][]) (this.state) )[1]) )[3] = ((int) (((int[]) (global::haxe.crypto.Aes.SBOX) )[((int) (((int[]) (((int[][]) (this.state) )[1]) )[3]) )]) );
				}
				
				{
					((int[]) (((int[][]) (this.state) )[2]) )[0] = ((int) (((int[]) (global::haxe.crypto.Aes.SBOX) )[((int) (((int[]) (((int[][]) (this.state) )[2]) )[0]) )]) );
					((int[]) (((int[][]) (this.state) )[2]) )[1] = ((int) (((int[]) (global::haxe.crypto.Aes.SBOX) )[((int) (((int[]) (((int[][]) (this.state) )[2]) )[1]) )]) );
					((int[]) (((int[][]) (this.state) )[2]) )[2] = ((int) (((int[]) (global::haxe.crypto.Aes.SBOX) )[((int) (((int[]) (((int[][]) (this.state) )[2]) )[2]) )]) );
					((int[]) (((int[][]) (this.state) )[2]) )[3] = ((int) (((int[]) (global::haxe.crypto.Aes.SBOX) )[((int) (((int[]) (((int[][]) (this.state) )[2]) )[3]) )]) );
				}
				
				{
					((int[]) (((int[][]) (this.state) )[3]) )[0] = ((int) (((int[]) (global::haxe.crypto.Aes.SBOX) )[((int) (((int[]) (((int[][]) (this.state) )[3]) )[0]) )]) );
					((int[]) (((int[][]) (this.state) )[3]) )[1] = ((int) (((int[]) (global::haxe.crypto.Aes.SBOX) )[((int) (((int[]) (((int[][]) (this.state) )[3]) )[1]) )]) );
					((int[]) (((int[][]) (this.state) )[3]) )[2] = ((int) (((int[]) (global::haxe.crypto.Aes.SBOX) )[((int) (((int[]) (((int[][]) (this.state) )[3]) )[2]) )]) );
					((int[]) (((int[][]) (this.state) )[3]) )[3] = ((int) (((int[]) (global::haxe.crypto.Aes.SBOX) )[((int) (((int[]) (((int[][]) (this.state) )[3]) )[3]) )]) );
				}
				
			}
		}
		
		
		public virtual void shiftRows() {
			unchecked {
				int[] this1 = new int[4];
				int[] t = ((int[]) (this1) );
				{
					{
						{
							((int[]) (t) )[0] = ((int) (((int[]) (((int[][]) (this.state) )[( 1 % 4 )]) )[1]) );
							((int[]) (t) )[1] = ((int) (((int[]) (((int[][]) (this.state) )[( 2 % 4 )]) )[1]) );
							((int[]) (t) )[2] = ((int) (((int[]) (((int[][]) (this.state) )[( 3 % 4 )]) )[1]) );
							((int[]) (t) )[3] = ((int) (((int[]) (((int[][]) (this.state) )[( 4 % 4 )]) )[1]) );
						}
						
						{
							((int[]) (((int[][]) (this.state) )[0]) )[1] = ((int) (((int[]) (t) )[0]) );
							((int[]) (((int[][]) (this.state) )[1]) )[1] = ((int) (((int[]) (t) )[1]) );
							((int[]) (((int[][]) (this.state) )[2]) )[1] = ((int) (((int[]) (t) )[2]) );
							((int[]) (((int[][]) (this.state) )[3]) )[1] = ((int) (((int[]) (t) )[3]) );
						}
						
					}
					
					{
						{
							((int[]) (t) )[0] = ((int) (((int[]) (((int[][]) (this.state) )[( 2 % 4 )]) )[2]) );
							((int[]) (t) )[1] = ((int) (((int[]) (((int[][]) (this.state) )[( 3 % 4 )]) )[2]) );
							((int[]) (t) )[2] = ((int) (((int[]) (((int[][]) (this.state) )[( 4 % 4 )]) )[2]) );
							((int[]) (t) )[3] = ((int) (((int[]) (((int[][]) (this.state) )[( 5 % 4 )]) )[2]) );
						}
						
						{
							((int[]) (((int[][]) (this.state) )[0]) )[2] = ((int) (((int[]) (t) )[0]) );
							((int[]) (((int[][]) (this.state) )[1]) )[2] = ((int) (((int[]) (t) )[1]) );
							((int[]) (((int[][]) (this.state) )[2]) )[2] = ((int) (((int[]) (t) )[2]) );
							((int[]) (((int[][]) (this.state) )[3]) )[2] = ((int) (((int[]) (t) )[3]) );
						}
						
					}
					
					{
						{
							((int[]) (t) )[0] = ((int) (((int[]) (((int[][]) (this.state) )[( 3 % 4 )]) )[3]) );
							((int[]) (t) )[1] = ((int) (((int[]) (((int[][]) (this.state) )[( 4 % 4 )]) )[3]) );
							((int[]) (t) )[2] = ((int) (((int[]) (((int[][]) (this.state) )[( 5 % 4 )]) )[3]) );
							((int[]) (t) )[3] = ((int) (((int[]) (((int[][]) (this.state) )[( 6 % 4 )]) )[3]) );
						}
						
						{
							((int[]) (((int[][]) (this.state) )[0]) )[3] = ((int) (((int[]) (t) )[0]) );
							((int[]) (((int[][]) (this.state) )[1]) )[3] = ((int) (((int[]) (t) )[1]) );
							((int[]) (((int[][]) (this.state) )[2]) )[3] = ((int) (((int[]) (t) )[2]) );
							((int[]) (((int[][]) (this.state) )[3]) )[3] = ((int) (((int[]) (t) )[3]) );
						}
						
					}
					
				}
				
			}
		}
		
		
		public virtual void mixColumns() {
			unchecked {
				int[] this1 = new int[4];
				int[] t = ((int[]) (this1) );
				{
					int _g = 0;
					while (( _g < 4 )) {
						int i = _g++;
						{
							((int[]) (t) )[0] = ((int) (((int[]) (((int[][]) (this.state) )[i]) )[0]) );
							((int[]) (t) )[1] = ((int) (((int[]) (((int[][]) (this.state) )[i]) )[1]) );
							((int[]) (t) )[2] = ((int) (((int[]) (((int[][]) (this.state) )[i]) )[2]) );
							((int[]) (t) )[3] = ((int) (((int[]) (((int[][]) (this.state) )[i]) )[3]) );
						}
						
						{
							((int[]) (((int[][]) (this.state) )[i]) )[0] = ( ( ( this.mul(2, ((int) (((int[]) (t) )[0]) )) ^ this.mul(3, ((int) (((int[]) (t) )[( 1 % 4 )]) )) ) ^ this.mul(1, ((int) (((int[]) (t) )[( 2 % 4 )]) )) ) ^ this.mul(1, ((int) (((int[]) (t) )[( 3 % 4 )]) )) );
							((int[]) (((int[][]) (this.state) )[i]) )[1] = ( ( ( this.mul(2, ((int) (((int[]) (t) )[1]) )) ^ this.mul(3, ((int) (((int[]) (t) )[( 2 % 4 )]) )) ) ^ this.mul(1, ((int) (((int[]) (t) )[( 3 % 4 )]) )) ) ^ this.mul(1, ((int) (((int[]) (t) )[( 4 % 4 )]) )) );
							((int[]) (((int[][]) (this.state) )[i]) )[2] = ( ( ( this.mul(2, ((int) (((int[]) (t) )[2]) )) ^ this.mul(3, ((int) (((int[]) (t) )[( 3 % 4 )]) )) ) ^ this.mul(1, ((int) (((int[]) (t) )[( 4 % 4 )]) )) ) ^ this.mul(1, ((int) (((int[]) (t) )[( 5 % 4 )]) )) );
							((int[]) (((int[][]) (this.state) )[i]) )[3] = ( ( ( this.mul(2, ((int) (((int[]) (t) )[3]) )) ^ this.mul(3, ((int) (((int[]) (t) )[( 4 % 4 )]) )) ) ^ this.mul(1, ((int) (((int[]) (t) )[( 5 % 4 )]) )) ) ^ this.mul(1, ((int) (((int[]) (t) )[( 6 % 4 )]) )) );
						}
						
					}
					
				}
				
			}
		}
		
		
		public virtual int mul(int a, int b) {
			unchecked {
				if (( ( a != 0 ) && ( b != 0 ) )) {
					return ((int) (((int[]) (global::haxe.crypto.Aes.POWER3) )[( (( ((int) (((int[]) (global::haxe.crypto.Aes.LOG3) )[a]) ) + ((int) (((int[]) (global::haxe.crypto.Aes.LOG3) )[b]) ) )) % 255 )]) );
				}
				else {
					return 0;
				}
				
			}
		}
		
		
		public virtual void invMixColumns() {
			unchecked {
				int[] this1 = new int[4];
				int[] t = ((int[]) (this1) );
				{
					int _g = 0;
					while (( _g < 4 )) {
						int i = _g++;
						{
							((int[]) (t) )[0] = ((int) (((int[]) (((int[][]) (this.state) )[i]) )[0]) );
							((int[]) (t) )[1] = ((int) (((int[]) (((int[][]) (this.state) )[i]) )[1]) );
							((int[]) (t) )[2] = ((int) (((int[]) (((int[][]) (this.state) )[i]) )[2]) );
							((int[]) (t) )[3] = ((int) (((int[]) (((int[][]) (this.state) )[i]) )[3]) );
						}
						
						{
							((int[]) (((int[][]) (this.state) )[i]) )[0] = ( ( ( this.mul(14, ((int) (((int[]) (t) )[0]) )) ^ this.mul(11, ((int) (((int[]) (t) )[( 1 % 4 )]) )) ) ^ this.mul(13, ((int) (((int[]) (t) )[( 2 % 4 )]) )) ) ^ this.mul(9, ((int) (((int[]) (t) )[( 3 % 4 )]) )) );
							((int[]) (((int[][]) (this.state) )[i]) )[1] = ( ( ( this.mul(14, ((int) (((int[]) (t) )[1]) )) ^ this.mul(11, ((int) (((int[]) (t) )[( 2 % 4 )]) )) ) ^ this.mul(13, ((int) (((int[]) (t) )[( 3 % 4 )]) )) ) ^ this.mul(9, ((int) (((int[]) (t) )[( 4 % 4 )]) )) );
							((int[]) (((int[][]) (this.state) )[i]) )[2] = ( ( ( this.mul(14, ((int) (((int[]) (t) )[2]) )) ^ this.mul(11, ((int) (((int[]) (t) )[( 3 % 4 )]) )) ) ^ this.mul(13, ((int) (((int[]) (t) )[( 4 % 4 )]) )) ) ^ this.mul(9, ((int) (((int[]) (t) )[( 5 % 4 )]) )) );
							((int[]) (((int[][]) (this.state) )[i]) )[3] = ( ( ( this.mul(14, ((int) (((int[]) (t) )[3]) )) ^ this.mul(11, ((int) (((int[]) (t) )[( 4 % 4 )]) )) ) ^ this.mul(13, ((int) (((int[]) (t) )[( 5 % 4 )]) )) ) ^ this.mul(9, ((int) (((int[]) (t) )[( 6 % 4 )]) )) );
						}
						
					}
					
				}
				
			}
		}
		
		
		public virtual void invSubBytes() {
			unchecked {
				{
					((int[]) (((int[][]) (this.state) )[0]) )[0] = ((int) (((int[]) (global::haxe.crypto.Aes.RSBOX) )[((int) (((int[]) (((int[][]) (this.state) )[0]) )[0]) )]) );
					((int[]) (((int[][]) (this.state) )[1]) )[0] = ((int) (((int[]) (global::haxe.crypto.Aes.RSBOX) )[((int) (((int[]) (((int[][]) (this.state) )[1]) )[0]) )]) );
					((int[]) (((int[][]) (this.state) )[2]) )[0] = ((int) (((int[]) (global::haxe.crypto.Aes.RSBOX) )[((int) (((int[]) (((int[][]) (this.state) )[2]) )[0]) )]) );
					((int[]) (((int[][]) (this.state) )[3]) )[0] = ((int) (((int[]) (global::haxe.crypto.Aes.RSBOX) )[((int) (((int[]) (((int[][]) (this.state) )[3]) )[0]) )]) );
				}
				
				{
					((int[]) (((int[][]) (this.state) )[0]) )[1] = ((int) (((int[]) (global::haxe.crypto.Aes.RSBOX) )[((int) (((int[]) (((int[][]) (this.state) )[0]) )[1]) )]) );
					((int[]) (((int[][]) (this.state) )[1]) )[1] = ((int) (((int[]) (global::haxe.crypto.Aes.RSBOX) )[((int) (((int[]) (((int[][]) (this.state) )[1]) )[1]) )]) );
					((int[]) (((int[][]) (this.state) )[2]) )[1] = ((int) (((int[]) (global::haxe.crypto.Aes.RSBOX) )[((int) (((int[]) (((int[][]) (this.state) )[2]) )[1]) )]) );
					((int[]) (((int[][]) (this.state) )[3]) )[1] = ((int) (((int[]) (global::haxe.crypto.Aes.RSBOX) )[((int) (((int[]) (((int[][]) (this.state) )[3]) )[1]) )]) );
				}
				
				{
					((int[]) (((int[][]) (this.state) )[0]) )[2] = ((int) (((int[]) (global::haxe.crypto.Aes.RSBOX) )[((int) (((int[]) (((int[][]) (this.state) )[0]) )[2]) )]) );
					((int[]) (((int[][]) (this.state) )[1]) )[2] = ((int) (((int[]) (global::haxe.crypto.Aes.RSBOX) )[((int) (((int[]) (((int[][]) (this.state) )[1]) )[2]) )]) );
					((int[]) (((int[][]) (this.state) )[2]) )[2] = ((int) (((int[]) (global::haxe.crypto.Aes.RSBOX) )[((int) (((int[]) (((int[][]) (this.state) )[2]) )[2]) )]) );
					((int[]) (((int[][]) (this.state) )[3]) )[2] = ((int) (((int[]) (global::haxe.crypto.Aes.RSBOX) )[((int) (((int[]) (((int[][]) (this.state) )[3]) )[2]) )]) );
				}
				
				{
					((int[]) (((int[][]) (this.state) )[0]) )[3] = ((int) (((int[]) (global::haxe.crypto.Aes.RSBOX) )[((int) (((int[]) (((int[][]) (this.state) )[0]) )[3]) )]) );
					((int[]) (((int[][]) (this.state) )[1]) )[3] = ((int) (((int[]) (global::haxe.crypto.Aes.RSBOX) )[((int) (((int[]) (((int[][]) (this.state) )[1]) )[3]) )]) );
					((int[]) (((int[][]) (this.state) )[2]) )[3] = ((int) (((int[]) (global::haxe.crypto.Aes.RSBOX) )[((int) (((int[]) (((int[][]) (this.state) )[2]) )[3]) )]) );
					((int[]) (((int[][]) (this.state) )[3]) )[3] = ((int) (((int[]) (global::haxe.crypto.Aes.RSBOX) )[((int) (((int[]) (((int[][]) (this.state) )[3]) )[3]) )]) );
				}
				
			}
		}
		
		
		public virtual void invShiftRows() {
			unchecked {
				int[] this1 = new int[4];
				int[] t = ((int[]) (this1) );
				{
					{
						{
							((int[]) (t) )[0] = ((int) (((int[]) (((int[][]) (this.state) )[( 3 % 4 )]) )[1]) );
							((int[]) (t) )[1] = ((int) (((int[]) (((int[][]) (this.state) )[( 4 % 4 )]) )[1]) );
							((int[]) (t) )[2] = ((int) (((int[]) (((int[][]) (this.state) )[( 5 % 4 )]) )[1]) );
							((int[]) (t) )[3] = ((int) (((int[]) (((int[][]) (this.state) )[( 6 % 4 )]) )[1]) );
						}
						
						{
							((int[]) (((int[][]) (this.state) )[0]) )[1] = ((int) (((int[]) (t) )[0]) );
							((int[]) (((int[][]) (this.state) )[1]) )[1] = ((int) (((int[]) (t) )[1]) );
							((int[]) (((int[][]) (this.state) )[2]) )[1] = ((int) (((int[]) (t) )[2]) );
							((int[]) (((int[][]) (this.state) )[3]) )[1] = ((int) (((int[]) (t) )[3]) );
						}
						
					}
					
					{
						{
							((int[]) (t) )[0] = ((int) (((int[]) (((int[][]) (this.state) )[( 2 % 4 )]) )[2]) );
							((int[]) (t) )[1] = ((int) (((int[]) (((int[][]) (this.state) )[( 3 % 4 )]) )[2]) );
							((int[]) (t) )[2] = ((int) (((int[]) (((int[][]) (this.state) )[( 4 % 4 )]) )[2]) );
							((int[]) (t) )[3] = ((int) (((int[]) (((int[][]) (this.state) )[( 5 % 4 )]) )[2]) );
						}
						
						{
							((int[]) (((int[][]) (this.state) )[0]) )[2] = ((int) (((int[]) (t) )[0]) );
							((int[]) (((int[][]) (this.state) )[1]) )[2] = ((int) (((int[]) (t) )[1]) );
							((int[]) (((int[][]) (this.state) )[2]) )[2] = ((int) (((int[]) (t) )[2]) );
							((int[]) (((int[][]) (this.state) )[3]) )[2] = ((int) (((int[]) (t) )[3]) );
						}
						
					}
					
					{
						{
							((int[]) (t) )[0] = ((int) (((int[]) (((int[][]) (this.state) )[( 1 % 4 )]) )[3]) );
							((int[]) (t) )[1] = ((int) (((int[]) (((int[][]) (this.state) )[( 2 % 4 )]) )[3]) );
							((int[]) (t) )[2] = ((int) (((int[]) (((int[][]) (this.state) )[( 3 % 4 )]) )[3]) );
							((int[]) (t) )[3] = ((int) (((int[]) (((int[][]) (this.state) )[( 4 % 4 )]) )[3]) );
						}
						
						{
							((int[]) (((int[][]) (this.state) )[0]) )[3] = ((int) (((int[]) (t) )[0]) );
							((int[]) (((int[][]) (this.state) )[1]) )[3] = ((int) (((int[]) (t) )[1]) );
							((int[]) (((int[][]) (this.state) )[2]) )[3] = ((int) (((int[]) (t) )[2]) );
							((int[]) (((int[][]) (this.state) )[3]) )[3] = ((int) (((int[]) (t) )[3]) );
						}
						
					}
					
				}
				
			}
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 17508:
					{
						this.Nr = ((int) (@value) );
						return @value;
					}
					
					
					case 17501:
					{
						this.Nk = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 23533:
					{
						if (handleProperties) {
							this.set_iv(((global::haxe.io.Bytes) (@value) ));
							return @value;
						}
						else {
							this.iv = ((global::haxe.io.Bytes) (@value) );
							return @value;
						}
						
					}
					
					
					case 17508:
					{
						this.Nr = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 17501:
					{
						this.Nk = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 67859985:
					{
						this.state = ((int[][]) (@value) );
						return @value;
					}
					
					
					case 1617751537:
					{
						this.roundKey = ((int[]) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1910809482:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "invShiftRows", 1910809482)) );
					}
					
					
					case 1122566364:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "invSubBytes", 1122566364)) );
					}
					
					
					case 779384562:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "invMixColumns", 779384562)) );
					}
					
					
					case 5446660:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "mul", 5446660)) );
					}
					
					
					case 1963552417:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "mixColumns", 1963552417)) );
					}
					
					
					case 1453881019:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "shiftRows", 1453881019)) );
					}
					
					
					case 850878155:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "subBytes", 850878155)) );
					}
					
					
					case 298394930:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "addRoundKey", 298394930)) );
					}
					
					
					case 2098590048:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "keyExpansion", 2098590048)) );
					}
					
					
					case 486578026:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "subWord", 486578026)) );
					}
					
					
					case 1786603393:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "rotWord", 1786603393)) );
					}
					
					
					case 916448704:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "decryptBlock", 916448704)) );
					}
					
					
					case 3217576:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "encryptBlock", 3217576)) );
					}
					
					
					case 1825556557:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "decrypt", 1825556557)) );
					}
					
					
					case 798719589:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "encrypt", 798719589)) );
					}
					
					
					case 1631127864:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "getBlockSize", 1631127864)) );
					}
					
					
					case 1169898256:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "init", 1169898256)) );
					}
					
					
					case 1870153642:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "set_iv", 1870153642)) );
					}
					
					
					case 23533:
					{
						return this.iv;
					}
					
					
					case 17508:
					{
						return this.Nr;
					}
					
					
					case 17501:
					{
						return this.Nk;
					}
					
					
					case 67859985:
					{
						return this.state;
					}
					
					
					case 1617751537:
					{
						return this.roundKey;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 17508:
					{
						return ((double) (this.Nr) );
					}
					
					
					case 17501:
					{
						return ((double) (this.Nk) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, object[] dynargs) {
			unchecked {
				switch (hash) {
					case 1910809482:
					{
						this.invShiftRows();
						break;
					}
					
					
					case 1122566364:
					{
						this.invSubBytes();
						break;
					}
					
					
					case 779384562:
					{
						this.invMixColumns();
						break;
					}
					
					
					case 5446660:
					{
						return this.mul(((int) (global::haxe.lang.Runtime.toInt(((object) (dynargs[0]) ))) ), ((int) (global::haxe.lang.Runtime.toInt(((object) (dynargs[1]) ))) ));
					}
					
					
					case 1963552417:
					{
						this.mixColumns();
						break;
					}
					
					
					case 1453881019:
					{
						this.shiftRows();
						break;
					}
					
					
					case 850878155:
					{
						this.subBytes();
						break;
					}
					
					
					case 298394930:
					{
						this.addRoundKey(((int) (global::haxe.lang.Runtime.toInt(((object) (dynargs[0]) ))) ));
						break;
					}
					
					
					case 2098590048:
					{
						return this.keyExpansion(((global::haxe.io.Bytes) (((object) (dynargs[0]) )) ));
					}
					
					
					case 486578026:
					{
						return this.subWord(((int[]) (((object) (dynargs[0]) )) ));
					}
					
					
					case 1786603393:
					{
						return this.rotWord(((int[]) (((object) (dynargs[0]) )) ));
					}
					
					
					case 916448704:
					{
						this.decryptBlock(((global::haxe.io.Bytes) (((object) (dynargs[0]) )) ), ((int) (global::haxe.lang.Runtime.toInt(((object) (dynargs[1]) ))) ), ((global::haxe.io.Bytes) (((object) (dynargs[2]) )) ), ((int) (global::haxe.lang.Runtime.toInt(((object) (dynargs[3]) ))) ));
						break;
					}
					
					
					case 3217576:
					{
						this.encryptBlock(((global::haxe.io.Bytes) (((object) (dynargs[0]) )) ), ((int) (global::haxe.lang.Runtime.toInt(((object) (dynargs[1]) ))) ), ((global::haxe.io.Bytes) (((object) (dynargs[2]) )) ), ((int) (global::haxe.lang.Runtime.toInt(((object) (dynargs[3]) ))) ));
						break;
					}
					
					
					case 1825556557:
					{
						return this.decrypt(global::haxe.lang.Runtime.toString(((object) (dynargs[0]) )), ((global::haxe.io.Bytes) (((object) (dynargs[1]) )) ), global::haxe.lang.Runtime.toString(((object) (dynargs[2]) )));
					}
					
					
					case 798719589:
					{
						return this.encrypt(global::haxe.lang.Runtime.toString(((object) (dynargs[0]) )), ((global::haxe.io.Bytes) (((object) (dynargs[1]) )) ), global::haxe.lang.Runtime.toString(((object) (dynargs[2]) )));
					}
					
					
					case 1631127864:
					{
						return this.getBlockSize();
					}
					
					
					case 1169898256:
					{
						this.init(((global::haxe.io.Bytes) (((object) (dynargs[0]) )) ), ((global::haxe.io.Bytes) (((object) (dynargs[1]) )) ));
						break;
					}
					
					
					case 1870153642:
					{
						return this.set_iv(((global::haxe.io.Bytes) (((object) (dynargs[0]) )) ));
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::haxe.root.Array baseArr) {
			baseArr.push("iv");
			baseArr.push("Nr");
			baseArr.push("Nk");
			baseArr.push("state");
			baseArr.push("roundKey");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}


