// Generated by Haxe 4.0.0+ef18b627e

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe._Int64 {
	public sealed class Int64_Impl_ {
		
		public static long make(int high, int low) {
			unchecked {
				#line 34 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
				long this1 = ((long) (( ((long) (( ((long) (high) ) << 32 )) ) | ((long) (( ((long) (low) ) & ((long) (0xffffffffL) ) )) ) )) );
				#line 34 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
				return ((long) (this1) );
			}
			#line default
		}
		
		
		[global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
		public static long _new(long x) {
			#line 36 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
			long this1 = x;
			#line 36 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
			return ((long) (this1) );
		}
		#line default
		
		
		
		public static long get_val(long this1) {
			#line 42 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
			return this1;
		}
		#line default
		
		public static long set_val(long this1, long x) {
			#line 45 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
			this1 = x;
			#line 45 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
			return this1;
		}
		#line default
		
		
		
		public static int get_high(long this1) {
			unchecked {
				#line 50 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
				return ((int) (((long) (( this1 >> 32 )) )) );
			}
			#line default
		}
		
		
		
		
		public static int get_low(long this1) {
			#line 55 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
			return ((int) (this1) );
		}
		#line default
		
		public static long copy(long this1) {
			#line 58 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
			long this2 = this1;
			#line 58 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
			return ((long) (this2) );
		}
		#line default
		
		public static long ofInt(int x) {
			#line 61 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
			return ((long) (x) );
		}
		#line default
		
		public static int toInt(long x) {
			unchecked {
				#line 64 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
				if (( ((bool) (( ((long) (x) ) < -2147483648 )) ) || ((bool) (( ((long) (x) ) > 2147483647 )) ) )) {
					#line 65 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
					throw global::haxe.lang.HaxeException.wrap("Overflow");
				}
				
				#line 66 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
				return ((int) (((long) (x) )) );
			}
			#line default
		}
		
		
		public static bool @is(object val) {
			#line 70 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
			return ( val is global::System.Int64 );
		}
		#line default
		
		public static int getHigh(long x) {
			unchecked {
				#line 73 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
				return ((int) (((long) (( ((long) (x) ) >> 32 )) )) );
			}
			#line default
		}
		
		
		public static int getLow(long x) {
			#line 76 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
			return ((int) (((long) (x) )) );
		}
		#line default
		
		public static bool isNeg(long x) {
			#line 79 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
			return ((bool) (( ((long) (x) ) < 0 )) );
		}
		#line default
		
		public static bool isZero(long x) {
			#line 82 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
			return ( ((long) (x) ) == 0 );
		}
		#line default
		
		public static int compare(long a, long b) {
			unchecked {
				#line 85 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
				if (((bool) (( ((long) (a) ) < ((long) (b) ) )) )) {
					#line 86 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
					return -1;
				}
				
				#line 87 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
				if (((bool) (( ((long) (a) ) > ((long) (b) ) )) )) {
					#line 88 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
					return 1;
				}
				
				#line 89 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
				return 0;
			}
			#line default
		}
		
		
		public static int ucompare(long a, long b) {
			unchecked {
				#line 93 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
				if (((bool) (( ((long) (a) ) < 0 )) )) {
					#line 94 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
					if (((bool) (( ((long) (b) ) < 0 )) )) {
						#line 94 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
						if (((bool) (( ((long) (a) ) < ((long) (b) ) )) )) {
							#line 94 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
							return -1;
						}
						else if (((bool) (( ((long) (a) ) > ((long) (b) ) )) )) {
							#line 94 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
							return 1;
						}
						else {
							#line 94 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
							return 0;
						}
						
					}
					else {
						#line 94 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
						return 1;
					}
					
				}
				
				#line 95 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
				if (((bool) (( ((long) (b) ) < 0 )) )) {
					#line 95 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
					return -1;
				}
				else if (((bool) (( ((long) (a) ) < ((long) (b) ) )) )) {
					#line 95 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
					return -1;
				}
				else if (((bool) (( ((long) (a) ) > ((long) (b) ) )) )) {
					#line 95 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
					return 1;
				}
				else {
					#line 95 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
					return 0;
				}
				
			}
			#line default
		}
		
		
		public static string toStr(long x) {
			#line 99 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
			return global::haxe.lang.Runtime.concat("", global::haxe.root.Std.@string(((long) (x) )));
		}
		#line default
		
		public static object divMod(long dividend, long divisor) {
			#line 102 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
			return new global::haxe.lang.DynamicObject(new int[]{845179051, 2012934199}, new object[]{((long) (( ((long) (dividend) ) / ((long) (divisor) ) )) ), ((long) (( ((long) (dividend) ) % ((long) (divisor) ) )) )}, new int[]{}, new double[]{});
		}
		#line default
		
		public static string toString(long this1) {
			#line 105 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
			return global::haxe.lang.Runtime.concat("", global::haxe.root.Std.@string(this1));
		}
		#line default
		
		public static long parseString(string sParam) {
			#line 108 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
			return global::haxe.Int64Helper.parseString(sParam);
		}
		#line default
		
		public static long fromFloat(double f) {
			#line 112 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
			return global::haxe.Int64Helper.fromFloat(f);
		}
		#line default
		
		public static long neg(long x) {
			#line 116 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
			return  - (((long) (x) )) ;
		}
		#line default
		
		public static long preIncrement(long this1) {
			unchecked {
				#line 119 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
				this1 += ((long) (1) );
				#line 119 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
				return this1;
			}
			#line default
		}
		
		
		public static long postIncrement(long this1) {
			unchecked {
				#line 122 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
				this1 += ((long) (1) );
				#line 122 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
				return ( this1 - 1 );
			}
			#line default
		}
		
		
		public static long preDecrement(long this1) {
			unchecked {
				#line 125 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
				this1 -= ((long) (1) );
				#line 125 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
				return this1;
			}
			#line default
		}
		
		
		public static long postDecrement(long this1) {
			unchecked {
				#line 128 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
				this1 -= ((long) (1) );
				#line 128 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
				return ( this1 + 1 );
			}
			#line default
		}
		
		
		public static long @add(long a, long b) {
			#line 131 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
			return ((long) (( ((long) (a) ) + ((long) (b) ) )) );
		}
		#line default
		
		public static long addInt(long a, int b) {
			#line 134 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
			return ((long) (( ((long) (a) ) + b )) );
		}
		#line default
		
		public static long sub(long a, long b) {
			#line 137 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
			return ((long) (( ((long) (a) ) - ((long) (b) ) )) );
		}
		#line default
		
		public static long subInt(long a, int b) {
			#line 140 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
			return ((long) (( ((long) (a) ) - b )) );
		}
		#line default
		
		public static long intSub(int a, long b) {
			#line 143 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
			return ((long) (( a - ((long) (b) ) )) );
		}
		#line default
		
		public static long mul(long a, long b) {
			#line 146 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
			return ((long) (( ((long) (a) ) * ((long) (b) ) )) );
		}
		#line default
		
		public static long mulInt(long a, int b) {
			#line 149 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
			return ((long) (( ((long) (a) ) * b )) );
		}
		#line default
		
		public static long div(long a, long b) {
			#line 152 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
			return ((long) (( ((long) (a) ) / ((long) (b) ) )) );
		}
		#line default
		
		public static long divInt(long a, int b) {
			#line 155 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
			return ((long) (( ((long) (a) ) / b )) );
		}
		#line default
		
		public static long intDiv(int a, long b) {
			#line 158 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
			return ((long) (( a / ((long) (b) ) )) );
		}
		#line default
		
		public static long mod(long a, long b) {
			#line 161 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
			return ((long) (( ((long) (a) ) % ((long) (b) ) )) );
		}
		#line default
		
		public static long modInt(long a, int b) {
			#line 164 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
			return ((long) (( ((long) (a) ) % b )) );
		}
		#line default
		
		public static long intMod(int a, long b) {
			#line 167 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
			return ((long) (( a % ((long) (b) ) )) );
		}
		#line default
		
		public static bool eq(long a, long b) {
			#line 170 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
			return ( ((long) (a) ) == ((long) (b) ) );
		}
		#line default
		
		public static bool eqInt(long a, int b) {
			#line 173 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
			return ( ((long) (a) ) == b );
		}
		#line default
		
		public static bool neq(long a, long b) {
			#line 176 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
			return ( ((long) (a) ) != ((long) (b) ) );
		}
		#line default
		
		public static bool neqInt(long a, int b) {
			#line 179 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
			return ( ((long) (a) ) != b );
		}
		#line default
		
		public static bool lt(long a, long b) {
			#line 182 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
			return ((bool) (( ((long) (a) ) < ((long) (b) ) )) );
		}
		#line default
		
		public static bool ltInt(long a, int b) {
			#line 185 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
			return ((bool) (( ((long) (a) ) < b )) );
		}
		#line default
		
		public static bool intLt(int a, long b) {
			#line 188 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
			return ((bool) (( a < ((long) (b) ) )) );
		}
		#line default
		
		public static bool lte(long a, long b) {
			#line 191 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
			return ((bool) (( ((long) (a) ) <= ((long) (b) ) )) );
		}
		#line default
		
		public static bool lteInt(long a, int b) {
			#line 194 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
			return ((bool) (( ((long) (a) ) <= b )) );
		}
		#line default
		
		public static bool intLte(int a, long b) {
			#line 197 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
			return ((bool) (( a <= ((long) (b) ) )) );
		}
		#line default
		
		public static bool gt(long a, long b) {
			#line 200 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
			return ((bool) (( ((long) (a) ) > ((long) (b) ) )) );
		}
		#line default
		
		public static bool gtInt(long a, int b) {
			#line 203 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
			return ((bool) (( ((long) (a) ) > b )) );
		}
		#line default
		
		public static bool intGt(int a, long b) {
			#line 206 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
			return ((bool) (( a > ((long) (b) ) )) );
		}
		#line default
		
		public static bool gte(long a, long b) {
			#line 209 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
			return ((bool) (( ((long) (a) ) >= ((long) (b) ) )) );
		}
		#line default
		
		public static bool gteInt(long a, int b) {
			#line 212 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
			return ((bool) (( ((long) (a) ) >= b )) );
		}
		#line default
		
		public static bool intGte(int a, long b) {
			#line 215 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
			return ((bool) (( a >= ((long) (b) ) )) );
		}
		#line default
		
		public static long complement(long x) {
			#line 218 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
			return  ~ (((long) (x) )) ;
		}
		#line default
		
		public static long and(long a, long b) {
			#line 221 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
			return ((long) (( ((long) (a) ) & ((long) (b) ) )) );
		}
		#line default
		
		public static long or(long a, long b) {
			#line 224 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
			return ((long) (( ((long) (a) ) | ((long) (b) ) )) );
		}
		#line default
		
		public static long xor(long a, long b) {
			#line 227 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
			return ((long) (( ((long) (a) ) ^ ((long) (b) ) )) );
		}
		#line default
		
		public static long shl(long a, int b) {
			#line 230 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
			return ((long) (( ((long) (a) ) << b )) );
		}
		#line default
		
		public static long shr(long a, int b) {
			#line 233 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
			return ((long) (( ((long) (a) ) >> b )) );
		}
		#line default
		
		public static long ushr(long a, int b) {
			#line 236 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\haxe\\Int64.hx"
			return ((long) (((ulong) (( ((ulong) (((long) (a) )) ) >> b )) )) );
		}
		#line default
		
	}
}


