// Generated by Haxe 4.1.0-rc.1+0d88c583b
using haxe.root;

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.zip._InflateImpl {
	public class Window : global::haxe.lang.HxObject {
		
		static Window() {
			unchecked{
				global::haxe.zip._InflateImpl.Window.SIZE = 32768;
				global::haxe.zip._InflateImpl.Window.BUFSIZE = 65536;
			}
		}
		
		
		public Window(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Window(bool hasCrc) {
			global::haxe.zip._InflateImpl.Window.__hx_ctor_haxe_zip__InflateImpl_Window(this, hasCrc);
		}
		
		
		protected static void __hx_ctor_haxe_zip__InflateImpl_Window(global::haxe.zip._InflateImpl.Window __hx_this, bool hasCrc) {
			unchecked {
				__hx_this.buffer = global::haxe.io.Bytes.alloc(65536);
				__hx_this.pos = 0;
				if (hasCrc) {
					__hx_this.crc = new global::haxe.crypto.Adler32();
				}
				
			}
		}
		
		
		public static int SIZE;
		
		public static int BUFSIZE;
		
		public global::haxe.io.Bytes buffer;
		
		public int pos;
		
		public global::haxe.crypto.Adler32 crc;
		
		public virtual void slide() {
			unchecked {
				if (( this.crc != null )) {
					this.crc.update(this.buffer, 0, 32768);
				}
				
				global::haxe.io.Bytes b = global::haxe.io.Bytes.alloc(65536);
				this.pos -= 32768;
				b.blit(0, this.buffer, 32768, this.pos);
				this.buffer = b;
			}
		}
		
		
		public virtual void addBytes(global::haxe.io.Bytes b, int p, int len) {
			unchecked {
				if (( ( this.pos + len ) > 65536 )) {
					this.slide();
				}
				
				this.buffer.blit(this.pos, b, p, len);
				this.pos += len;
			}
		}
		
		
		public virtual void addByte(int c) {
			unchecked {
				if (( this.pos == 65536 )) {
					this.slide();
				}
				
				this.buffer.b[this.pos] = ((byte) (c) );
				this.pos++;
			}
		}
		
		
		public virtual int getLastChar() {
			unchecked {
				return ((int) (((byte) (this.buffer.b[( this.pos - 1 )]) )) );
			}
		}
		
		
		public virtual int available() {
			return this.pos;
		}
		
		
		public virtual global::haxe.crypto.Adler32 checksum() {
			if (( this.crc != null )) {
				this.crc.update(this.buffer, 0, this.pos);
			}
			
			return this.crc;
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 5594516:
					{
						this.pos = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 4948692:
					{
						this.crc = ((global::haxe.crypto.Adler32) (@value) );
						return @value;
					}
					
					
					case 5594516:
					{
						this.pos = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1351924992:
					{
						this.buffer = ((global::haxe.io.Bytes) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 755154371:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "checksum", 755154371)) );
					}
					
					
					case 2005096905:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "available", 2005096905)) );
					}
					
					
					case 2063350530:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "getLastChar", 2063350530)) );
					}
					
					
					case 2103468489:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "addByte", 2103468489)) );
					}
					
					
					case 922037898:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "addBytes", 922037898)) );
					}
					
					
					case 2127021361:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "slide", 2127021361)) );
					}
					
					
					case 4948692:
					{
						return this.crc;
					}
					
					
					case 5594516:
					{
						return this.pos;
					}
					
					
					case 1351924992:
					{
						return this.buffer;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 5594516:
					{
						return ((double) (this.pos) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, object[] dynargs) {
			unchecked {
				switch (hash) {
					case 755154371:
					{
						return this.checksum();
					}
					
					
					case 2005096905:
					{
						return this.available();
					}
					
					
					case 2063350530:
					{
						return this.getLastChar();
					}
					
					
					case 2103468489:
					{
						this.addByte(((int) (global::haxe.lang.Runtime.toInt(((object) (dynargs[0]) ))) ));
						break;
					}
					
					
					case 922037898:
					{
						this.addBytes(((global::haxe.io.Bytes) (((object) (dynargs[0]) )) ), ((int) (global::haxe.lang.Runtime.toInt(((object) (dynargs[1]) ))) ), ((int) (global::haxe.lang.Runtime.toInt(((object) (dynargs[2]) ))) ));
						break;
					}
					
					
					case 2127021361:
					{
						this.slide();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::haxe.root.Array baseArr) {
			baseArr.push("crc");
			baseArr.push("pos");
			baseArr.push("buffer");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.zip._InflateImpl {
	public class State : global::haxe.lang.Enum {
		
		protected State(int index) : base(index) {
		}
		
		
		public static readonly global::haxe.zip._InflateImpl.State Head = new global::haxe.zip._InflateImpl.State_Head();
		
		public static readonly global::haxe.zip._InflateImpl.State Block = new global::haxe.zip._InflateImpl.State_Block();
		
		public static readonly global::haxe.zip._InflateImpl.State CData = new global::haxe.zip._InflateImpl.State_CData();
		
		public static readonly global::haxe.zip._InflateImpl.State Flat = new global::haxe.zip._InflateImpl.State_Flat();
		
		public static readonly global::haxe.zip._InflateImpl.State Crc = new global::haxe.zip._InflateImpl.State_Crc();
		
		public static readonly global::haxe.zip._InflateImpl.State Dist = new global::haxe.zip._InflateImpl.State_Dist();
		
		public static readonly global::haxe.zip._InflateImpl.State DistOne = new global::haxe.zip._InflateImpl.State_DistOne();
		
		public static readonly global::haxe.zip._InflateImpl.State Done = new global::haxe.zip._InflateImpl.State_Done();
		
		protected static readonly string[] __hx_constructs = new string[]{"Head", "Block", "CData", "Flat", "Crc", "Dist", "DistOne", "Done"};
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.zip._InflateImpl {
	public sealed class State_Head : global::haxe.zip._InflateImpl.State {
		
		public State_Head() : base(0) {
		}
		
		
		public override string getTag() {
			return "Head";
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.zip._InflateImpl {
	public sealed class State_Block : global::haxe.zip._InflateImpl.State {
		
		public State_Block() : base(1) {
		}
		
		
		public override string getTag() {
			return "Block";
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.zip._InflateImpl {
	public sealed class State_CData : global::haxe.zip._InflateImpl.State {
		
		public State_CData() : base(2) {
		}
		
		
		public override string getTag() {
			return "CData";
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.zip._InflateImpl {
	public sealed class State_Flat : global::haxe.zip._InflateImpl.State {
		
		public State_Flat() : base(3) {
		}
		
		
		public override string getTag() {
			return "Flat";
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.zip._InflateImpl {
	public sealed class State_Crc : global::haxe.zip._InflateImpl.State {
		
		public State_Crc() : base(4) {
		}
		
		
		public override string getTag() {
			return "Crc";
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.zip._InflateImpl {
	public sealed class State_Dist : global::haxe.zip._InflateImpl.State {
		
		public State_Dist() : base(5) {
		}
		
		
		public override string getTag() {
			return "Dist";
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.zip._InflateImpl {
	public sealed class State_DistOne : global::haxe.zip._InflateImpl.State {
		
		public State_DistOne() : base(6) {
		}
		
		
		public override string getTag() {
			return "DistOne";
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.zip._InflateImpl {
	public sealed class State_Done : global::haxe.zip._InflateImpl.State {
		
		public State_Done() : base(7) {
		}
		
		
		public override string getTag() {
			return "Done";
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.zip {
	public class InflateImpl : global::haxe.lang.HxObject {
		
		static InflateImpl() {
			unchecked{
				global::haxe.zip.InflateImpl.LEN_EXTRA_BITS_TBL = new global::haxe.root.Array(new object[]{0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, -1, -1});
				global::haxe.zip.InflateImpl.LEN_BASE_VAL_TBL = new global::haxe.root.Array(new object[]{3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258});
				global::haxe.zip.InflateImpl.DIST_EXTRA_BITS_TBL = new global::haxe.root.Array(new object[]{0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, -1, -1});
				global::haxe.zip.InflateImpl.DIST_BASE_VAL_TBL = new global::haxe.root.Array(new object[]{1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577});
				global::haxe.zip.InflateImpl.CODE_LENGTHS_POS = new global::haxe.root.Array(new object[]{16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15});
				global::haxe.zip.InflateImpl.FIXED_HUFFMAN = null;
			}
		}
		
		
		public InflateImpl(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public InflateImpl(global::haxe.io.Input i, object header, object crc) {
			global::haxe.zip.InflateImpl.__hx_ctor_haxe_zip_InflateImpl(this, i, header, crc);
		}
		
		
		protected static void __hx_ctor_haxe_zip_InflateImpl(global::haxe.zip.InflateImpl __hx_this, global::haxe.io.Input i, object header, object crc) {
			unchecked {
				object crc1 = ( (( crc == default(object) )) ? (((object) (true) )) : (crc) );
				object header1 = ( (( header == default(object) )) ? (((object) (true) )) : (header) );
				__hx_this.isFinal = false;
				__hx_this.htools = new global::haxe.zip.HuffTools();
				__hx_this.huffman = __hx_this.buildFixedHuffman();
				__hx_this.huffdist = null;
				__hx_this.len = 0;
				__hx_this.dist = 0;
				__hx_this.state = ( (global::haxe.lang.Runtime.toBool((header1))) ? (global::haxe.zip._InflateImpl.State.Head) : (global::haxe.zip._InflateImpl.State.Block) );
				__hx_this.input = i;
				__hx_this.bits = 0;
				__hx_this.nbits = 0;
				__hx_this.needed = 0;
				__hx_this.output = null;
				__hx_this.outpos = 0;
				__hx_this.lengths = new global::haxe.root.Array();
				{
					__hx_this.lengths.push(-1);
					__hx_this.lengths.push(-1);
					__hx_this.lengths.push(-1);
					__hx_this.lengths.push(-1);
					__hx_this.lengths.push(-1);
					__hx_this.lengths.push(-1);
					__hx_this.lengths.push(-1);
					__hx_this.lengths.push(-1);
					__hx_this.lengths.push(-1);
					__hx_this.lengths.push(-1);
					__hx_this.lengths.push(-1);
					__hx_this.lengths.push(-1);
					__hx_this.lengths.push(-1);
					__hx_this.lengths.push(-1);
					__hx_this.lengths.push(-1);
					__hx_this.lengths.push(-1);
					__hx_this.lengths.push(-1);
					__hx_this.lengths.push(-1);
					__hx_this.lengths.push(-1);
				}
				
				__hx_this.window = new global::haxe.zip._InflateImpl.Window(global::haxe.lang.Runtime.toBool(crc1));
			}
		}
		
		
		public static global::haxe.root.Array LEN_EXTRA_BITS_TBL;
		
		public static global::haxe.root.Array LEN_BASE_VAL_TBL;
		
		public static global::haxe.root.Array DIST_EXTRA_BITS_TBL;
		
		public static global::haxe.root.Array DIST_BASE_VAL_TBL;
		
		public static global::haxe.root.Array CODE_LENGTHS_POS;
		
		public static global::haxe.zip.Huffman FIXED_HUFFMAN;
		
		public static global::haxe.io.Bytes run(global::haxe.io.Input i, object bufsize) {
			unchecked {
				object bufsize1 = ( (( bufsize == default(object) )) ? (((object) (65536) )) : (bufsize) );
				global::haxe.io.Bytes buf = global::haxe.io.Bytes.alloc(((int) (global::haxe.lang.Runtime.toInt(bufsize1)) ));
				global::haxe.io.BytesBuffer output = new global::haxe.io.BytesBuffer();
				global::haxe.zip.InflateImpl inflate = new global::haxe.zip.InflateImpl(i, null, null);
				while (true) {
					int len = inflate.readBytes(buf, 0, ((int) (global::haxe.lang.Runtime.toInt(bufsize1)) ));
					{
						if (( ( len < 0 ) || ( len > buf.length ) )) {
							throw global::haxe.lang.HaxeException.wrap(global::haxe.io.Error.OutsideBounds);
						}
						
						( output.b as global::System.IO.Stream ).Write(((byte[]) (buf.b) ), ((int) (0) ), ((int) (len) ));
					}
					
					if (( len < ((int) (global::haxe.lang.Runtime.toInt(bufsize1)) ) )) {
						break;
					}
					
				}
				
				return output.getBytes();
			}
		}
		
		
		public int nbits;
		
		public int bits;
		
		public global::haxe.zip._InflateImpl.State state;
		
		public bool isFinal;
		
		public global::haxe.zip.Huffman huffman;
		
		public global::haxe.zip.Huffman huffdist;
		
		public global::haxe.zip.HuffTools htools;
		
		public int len;
		
		public int dist;
		
		public int needed;
		
		public global::haxe.io.Bytes output;
		
		public int outpos;
		
		public global::haxe.io.Input input;
		
		public global::haxe.root.Array lengths;
		
		public global::haxe.zip._InflateImpl.Window window;
		
		public virtual global::haxe.zip.Huffman buildFixedHuffman() {
			unchecked {
				if (( global::haxe.zip.InflateImpl.FIXED_HUFFMAN != null )) {
					return global::haxe.zip.InflateImpl.FIXED_HUFFMAN;
				}
				
				global::haxe.root.Array a = new global::haxe.root.Array();
				{
					int _g = 0;
					while (( _g < 288 )) {
						int n = _g++;
						a.push(( (( n <= 143 )) ? (8) : (( (( n <= 255 )) ? (9) : (( (( n <= 279 )) ? (7) : (8) )) )) ));
					}
					
				}
				
				global::haxe.zip.InflateImpl.FIXED_HUFFMAN = this.htools.make(a, 0, 288, 10);
				return global::haxe.zip.InflateImpl.FIXED_HUFFMAN;
			}
		}
		
		
		public virtual int readBytes(global::haxe.io.Bytes b, int pos, int len) {
			this.needed = len;
			this.outpos = pos;
			this.output = b;
			if (( len > 0 )) {
				while (this.inflateLoop()) {
				}
				
			}
			
			return ( len - this.needed );
		}
		
		
		public virtual int getBits(int n) {
			unchecked {
				while (( this.nbits < n )) {
					this.bits |= ( this.input.readByte() << this.nbits );
					this.nbits += 8;
				}
				
				int b = ( this.bits & ( (( 1 << n )) - 1 ) );
				this.nbits -= n;
				this.bits >>= n;
				return b;
			}
		}
		
		
		public virtual bool getBit() {
			unchecked {
				if (( this.nbits == 0 )) {
					this.nbits = 8;
					this.bits = this.input.readByte();
				}
				
				bool b = ( (( this.bits & 1 )) == 1 );
				this.nbits--;
				this.bits >>= 1;
				return b;
			}
		}
		
		
		public virtual int getRevBits(int n) {
			unchecked {
				if (( n == 0 )) {
					return 0;
				}
				else if (this.getBit()) {
					return ( ( 1 << ( n - 1 ) ) | this.getRevBits(( n - 1 )) );
				}
				else {
					return this.getRevBits(( n - 1 ));
				}
				
			}
		}
		
		
		public virtual void resetBits() {
			this.bits = 0;
			this.nbits = 0;
		}
		
		
		public virtual void addBytes(global::haxe.io.Bytes b, int p, int len) {
			this.window.addBytes(b, p, len);
			this.output.blit(this.outpos, b, p, len);
			this.needed -= len;
			this.outpos += len;
		}
		
		
		public virtual void addByte(int b) {
			this.window.addByte(b);
			this.output.b[this.outpos] = ((byte) (b) );
			this.needed--;
			this.outpos++;
		}
		
		
		public virtual void addDistOne(int n) {
			int c = this.window.getLastChar();
			{
				int _g = 0;
				int _g1 = n;
				while (( _g < _g1 )) {
					int i = _g++;
					this.addByte(c);
				}
				
			}
			
		}
		
		
		public virtual void addDist(int d, int len) {
			this.addBytes(this.window.buffer, ( this.window.pos - d ), len);
		}
		
		
		public virtual int applyHuffman(global::haxe.zip.Huffman h) {
			unchecked {
				switch (h._hx_index) {
					case 0:
					{
						int n = ( h as global::haxe.zip.Huffman_Found ).i;
						return n;
					}
					
					
					case 1:
					{
						global::haxe.zip.Huffman b = ( h as global::haxe.zip.Huffman_NeedBit ).right;
						global::haxe.zip.Huffman a = ( h as global::haxe.zip.Huffman_NeedBit ).left;
						return this.applyHuffman(( (this.getBit()) ? (b) : (a) ));
					}
					
					
					case 2:
					{
						global::haxe.root.Array tbl = ( h as global::haxe.zip.Huffman_NeedBits ).table;
						int n1 = ( h as global::haxe.zip.Huffman_NeedBits ).n;
						return this.applyHuffman(((global::haxe.zip.Huffman) (tbl.__get(this.getBits(n1))) ));
					}
					
					
				}
				
				return default(int);
			}
		}
		
		
		public virtual void inflateLengths(global::haxe.root.Array a, int max) {
			unchecked {
				int i = 0;
				int prev = 0;
				while (( i < max )) {
					int n = this.applyHuffman(this.huffman);
					switch (n) {
						case 0:
						case 1:
						case 2:
						case 3:
						case 4:
						case 5:
						case 6:
						case 7:
						case 8:
						case 9:
						case 10:
						case 11:
						case 12:
						case 13:
						case 14:
						case 15:
						{
							prev = n;
							int __temp_expr1 = ((int) (global::haxe.lang.Runtime.toInt(a.__set(i, n))) );
							 ++ i;
							break;
						}
						
						
						case 16:
						{
							int end = ( ( i + 3 ) + this.getBits(2) );
							if (( end > max )) {
								throw global::haxe.lang.HaxeException.wrap("Invalid data");
							}
							
							while (( i < end )) {
								int __temp_expr2 = ((int) (global::haxe.lang.Runtime.toInt(a.__set(i, prev))) );
								 ++ i;
							}
							
							break;
						}
						
						
						case 17:
						{
							i += ( 3 + this.getBits(3) );
							if (( i > max )) {
								throw global::haxe.lang.HaxeException.wrap("Invalid data");
							}
							
							break;
						}
						
						
						case 18:
						{
							i += ( 11 + this.getBits(7) );
							if (( i > max )) {
								throw global::haxe.lang.HaxeException.wrap("Invalid data");
							}
							
							break;
						}
						
						
						default:
						{
							throw global::haxe.lang.HaxeException.wrap("Invalid data");
						}
						
					}
					
				}
				
			}
		}
		
		
		public virtual bool inflateLoop() {
			unchecked {
				switch (this.state._hx_index) {
					case 0:
					{
						int cmf = this.input.readByte();
						int cm = ( cmf & 15 );
						int cinfo = ( cmf >> 4 );
						if (( cm != 8 )) {
							throw global::haxe.lang.HaxeException.wrap("Invalid data");
						}
						
						int flg = this.input.readByte();
						bool fdict = ( (( flg & 32 )) != 0 );
						if (( ( (( (( cmf << 8 )) + flg )) % 31 ) != 0 )) {
							throw global::haxe.lang.HaxeException.wrap("Invalid data");
						}
						
						if (fdict) {
							throw global::haxe.lang.HaxeException.wrap("Unsupported dictionary");
						}
						
						this.state = global::haxe.zip._InflateImpl.State.Block;
						return true;
					}
					
					
					case 1:
					{
						this.isFinal = this.getBit();
						switch (this.getBits(2)) {
							case 0:
							{
								this.len = this.input.readUInt16();
								int nlen = this.input.readUInt16();
								if (( nlen != ( 65535 - this.len ) )) {
									throw global::haxe.lang.HaxeException.wrap("Invalid data");
								}
								
								this.state = global::haxe.zip._InflateImpl.State.Flat;
								bool r = this.inflateLoop();
								this.resetBits();
								return r;
							}
							
							
							case 1:
							{
								this.huffman = this.buildFixedHuffman();
								this.huffdist = null;
								this.state = global::haxe.zip._InflateImpl.State.CData;
								return true;
							}
							
							
							case 2:
							{
								int hlit = ( this.getBits(5) + 257 );
								int hdist = ( this.getBits(5) + 1 );
								int hclen = ( this.getBits(4) + 4 );
								{
									int _g = 0;
									int _g1 = hclen;
									while (( _g < _g1 )) {
										int i = _g++;
										int __temp_expr1 = ((int) (global::haxe.lang.Runtime.toInt(this.lengths.__set(((int) (global::haxe.lang.Runtime.toInt(global::haxe.zip.InflateImpl.CODE_LENGTHS_POS.__get(i))) ), this.getBits(3)))) );
									}
									
								}
								
								{
									int _g2 = hclen;
									int _g3 = 19;
									while (( _g2 < _g3 )) {
										int i1 = _g2++;
										int __temp_expr2 = ((int) (global::haxe.lang.Runtime.toInt(this.lengths.__set(((int) (global::haxe.lang.Runtime.toInt(global::haxe.zip.InflateImpl.CODE_LENGTHS_POS.__get(i1))) ), 0))) );
									}
									
								}
								
								this.huffman = this.htools.make(this.lengths, 0, 19, 8);
								global::haxe.root.Array lengths = new global::haxe.root.Array();
								{
									int _g4 = 0;
									int _g5 = ( hlit + hdist );
									while (( _g4 < _g5 )) {
										int i2 = _g4++;
										lengths.push(0);
									}
									
								}
								
								this.inflateLengths(lengths, ( hlit + hdist ));
								this.huffdist = this.htools.make(lengths, hlit, hdist, 16);
								this.huffman = this.htools.make(lengths, 0, hlit, 16);
								this.state = global::haxe.zip._InflateImpl.State.CData;
								return true;
							}
							
							
							default:
							{
								throw global::haxe.lang.HaxeException.wrap("Invalid data");
							}
							
						}
						
					}
					
					
					case 2:
					{
						int n = this.applyHuffman(this.huffman);
						if (( n < 256 )) {
							this.addByte(n);
							return ( this.needed > 0 );
						}
						else if (( n == 256 )) {
							this.state = ( (this.isFinal) ? (global::haxe.zip._InflateImpl.State.Crc) : (global::haxe.zip._InflateImpl.State.Block) );
							return true;
						}
						else {
							n -= 257;
							int extra_bits = ((int) (global::haxe.lang.Runtime.toInt(global::haxe.zip.InflateImpl.LEN_EXTRA_BITS_TBL.__get(n))) );
							if (( extra_bits == -1 )) {
								throw global::haxe.lang.HaxeException.wrap("Invalid data");
							}
							
							this.len = ( ((int) (global::haxe.lang.Runtime.toInt(global::haxe.zip.InflateImpl.LEN_BASE_VAL_TBL.__get(n))) ) + this.getBits(extra_bits) );
							int dist_code = ( (( this.huffdist == null )) ? (this.getRevBits(5)) : (this.applyHuffman(this.huffdist)) );
							extra_bits = ((int) (global::haxe.lang.Runtime.toInt(global::haxe.zip.InflateImpl.DIST_EXTRA_BITS_TBL.__get(dist_code))) );
							if (( extra_bits == -1 )) {
								throw global::haxe.lang.HaxeException.wrap("Invalid data");
							}
							
							this.dist = ( ((int) (global::haxe.lang.Runtime.toInt(global::haxe.zip.InflateImpl.DIST_BASE_VAL_TBL.__get(dist_code))) ) + this.getBits(extra_bits) );
							if (( this.dist > this.window.available() )) {
								throw global::haxe.lang.HaxeException.wrap("Invalid data");
							}
							
							this.state = ( (( this.dist == 1 )) ? (global::haxe.zip._InflateImpl.State.DistOne) : (global::haxe.zip._InflateImpl.State.Dist) );
							return true;
						}
						
					}
					
					
					case 3:
					{
						int rlen = ( (( this.len < this.needed )) ? (this.len) : (this.needed) );
						global::haxe.io.Bytes bytes = this.input.read(rlen);
						this.len -= rlen;
						this.addBytes(bytes, 0, rlen);
						if (( this.len == 0 )) {
							this.state = ( (this.isFinal) ? (global::haxe.zip._InflateImpl.State.Crc) : (global::haxe.zip._InflateImpl.State.Block) );
						}
						
						return ( this.needed > 0 );
					}
					
					
					case 4:
					{
						global::haxe.crypto.Adler32 calc = this.window.checksum();
						if (( calc == null )) {
							this.state = global::haxe.zip._InflateImpl.State.Done;
							return true;
						}
						
						global::haxe.crypto.Adler32 crc = global::haxe.crypto.Adler32.read(this.input);
						if ( ! (calc.@equals(crc)) ) {
							throw global::haxe.lang.HaxeException.wrap("Invalid CRC");
						}
						
						this.state = global::haxe.zip._InflateImpl.State.Done;
						return true;
					}
					
					
					case 5:
					{
						while (( ( this.len > 0 ) && ( this.needed > 0 ) )) {
							int rdist = ( (( this.len < this.dist )) ? (this.len) : (this.dist) );
							int rlen1 = ( (( this.needed < rdist )) ? (this.needed) : (rdist) );
							this.addDist(this.dist, rlen1);
							this.len -= rlen1;
						}
						
						if (( this.len == 0 )) {
							this.state = global::haxe.zip._InflateImpl.State.CData;
						}
						
						return ( this.needed > 0 );
					}
					
					
					case 6:
					{
						int rlen2 = ( (( this.len < this.needed )) ? (this.len) : (this.needed) );
						this.addDistOne(rlen2);
						this.len -= rlen2;
						if (( this.len == 0 )) {
							this.state = global::haxe.zip._InflateImpl.State.CData;
						}
						
						return ( this.needed > 0 );
					}
					
					
					case 7:
					{
						return false;
					}
					
					
				}
				
				return default(bool);
			}
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 209783238:
					{
						this.outpos = ((int) (@value) );
						return @value;
					}
					
					
					case 1707675189:
					{
						this.needed = ((int) (@value) );
						return @value;
					}
					
					
					case 1114204006:
					{
						this.dist = ((int) (@value) );
						return @value;
					}
					
					
					case 5393365:
					{
						this.len = ((int) (@value) );
						return @value;
					}
					
					
					case 1092025094:
					{
						this.bits = ((int) (@value) );
						return @value;
					}
					
					
					case 388680308:
					{
						this.nbits = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1384944624:
					{
						this.window = ((global::haxe.zip._InflateImpl.Window) (@value) );
						return @value;
					}
					
					
					case 127579341:
					{
						this.lengths = ((global::haxe.root.Array) (@value) );
						return @value;
					}
					
					
					case 1042138122:
					{
						this.input = ((global::haxe.io.Input) (@value) );
						return @value;
					}
					
					
					case 209783238:
					{
						this.outpos = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 209784577:
					{
						this.output = ((global::haxe.io.Bytes) (@value) );
						return @value;
					}
					
					
					case 1707675189:
					{
						this.needed = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1114204006:
					{
						this.dist = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 5393365:
					{
						this.len = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 692852915:
					{
						this.htools = ((global::haxe.zip.HuffTools) (@value) );
						return @value;
					}
					
					
					case 58524531:
					{
						this.huffdist = ((global::haxe.zip.Huffman) (@value) );
						return @value;
					}
					
					
					case 722956077:
					{
						this.huffman = ((global::haxe.zip.Huffman) (@value) );
						return @value;
					}
					
					
					case 488637228:
					{
						this.isFinal = global::haxe.lang.Runtime.toBool(@value);
						return @value;
					}
					
					
					case 67859985:
					{
						this.state = ((global::haxe.zip._InflateImpl.State) (@value) );
						return @value;
					}
					
					
					case 1092025094:
					{
						this.bits = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 388680308:
					{
						this.nbits = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 633519755:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "inflateLoop", 633519755)) );
					}
					
					
					case 961933062:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "inflateLengths", 961933062)) );
					}
					
					
					case 1787083615:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "applyHuffman", 1787083615)) );
					}
					
					
					case 2124851751:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "addDist", 2124851751)) );
					}
					
					
					case 627260031:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "addDistOne", 627260031)) );
					}
					
					
					case 2103468489:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "addByte", 2103468489)) );
					}
					
					
					case 922037898:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "addBytes", 922037898)) );
					}
					
					
					case 117638261:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "resetBits", 117638261)) );
					}
					
					
					case 1395946515:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "getRevBits", 1395946515)) );
					}
					
					
					case 588902871:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "getBit", 588902871)) );
					}
					
					
					case 328837820:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "getBits", 328837820)) );
					}
					
					
					case 243225909:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "readBytes", 243225909)) );
					}
					
					
					case 666085479:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "buildFixedHuffman", 666085479)) );
					}
					
					
					case 1384944624:
					{
						return this.window;
					}
					
					
					case 127579341:
					{
						return this.lengths;
					}
					
					
					case 1042138122:
					{
						return this.input;
					}
					
					
					case 209783238:
					{
						return this.outpos;
					}
					
					
					case 209784577:
					{
						return this.output;
					}
					
					
					case 1707675189:
					{
						return this.needed;
					}
					
					
					case 1114204006:
					{
						return this.dist;
					}
					
					
					case 5393365:
					{
						return this.len;
					}
					
					
					case 692852915:
					{
						return this.htools;
					}
					
					
					case 58524531:
					{
						return this.huffdist;
					}
					
					
					case 722956077:
					{
						return this.huffman;
					}
					
					
					case 488637228:
					{
						return this.isFinal;
					}
					
					
					case 67859985:
					{
						return this.state;
					}
					
					
					case 1092025094:
					{
						return this.bits;
					}
					
					
					case 388680308:
					{
						return this.nbits;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 209783238:
					{
						return ((double) (this.outpos) );
					}
					
					
					case 1707675189:
					{
						return ((double) (this.needed) );
					}
					
					
					case 1114204006:
					{
						return ((double) (this.dist) );
					}
					
					
					case 5393365:
					{
						return ((double) (this.len) );
					}
					
					
					case 1092025094:
					{
						return ((double) (this.bits) );
					}
					
					
					case 388680308:
					{
						return ((double) (this.nbits) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, object[] dynargs) {
			unchecked {
				switch (hash) {
					case 633519755:
					{
						return this.inflateLoop();
					}
					
					
					case 961933062:
					{
						this.inflateLengths(((global::haxe.root.Array) (((object) (dynargs[0]) )) ), ((int) (global::haxe.lang.Runtime.toInt(((object) (dynargs[1]) ))) ));
						break;
					}
					
					
					case 1787083615:
					{
						return this.applyHuffman(((global::haxe.zip.Huffman) (((object) (dynargs[0]) )) ));
					}
					
					
					case 2124851751:
					{
						this.addDist(((int) (global::haxe.lang.Runtime.toInt(((object) (dynargs[0]) ))) ), ((int) (global::haxe.lang.Runtime.toInt(((object) (dynargs[1]) ))) ));
						break;
					}
					
					
					case 627260031:
					{
						this.addDistOne(((int) (global::haxe.lang.Runtime.toInt(((object) (dynargs[0]) ))) ));
						break;
					}
					
					
					case 2103468489:
					{
						this.addByte(((int) (global::haxe.lang.Runtime.toInt(((object) (dynargs[0]) ))) ));
						break;
					}
					
					
					case 922037898:
					{
						this.addBytes(((global::haxe.io.Bytes) (((object) (dynargs[0]) )) ), ((int) (global::haxe.lang.Runtime.toInt(((object) (dynargs[1]) ))) ), ((int) (global::haxe.lang.Runtime.toInt(((object) (dynargs[2]) ))) ));
						break;
					}
					
					
					case 117638261:
					{
						this.resetBits();
						break;
					}
					
					
					case 1395946515:
					{
						return this.getRevBits(((int) (global::haxe.lang.Runtime.toInt(((object) (dynargs[0]) ))) ));
					}
					
					
					case 588902871:
					{
						return this.getBit();
					}
					
					
					case 328837820:
					{
						return this.getBits(((int) (global::haxe.lang.Runtime.toInt(((object) (dynargs[0]) ))) ));
					}
					
					
					case 243225909:
					{
						return this.readBytes(((global::haxe.io.Bytes) (((object) (dynargs[0]) )) ), ((int) (global::haxe.lang.Runtime.toInt(((object) (dynargs[1]) ))) ), ((int) (global::haxe.lang.Runtime.toInt(((object) (dynargs[2]) ))) ));
					}
					
					
					case 666085479:
					{
						return this.buildFixedHuffman();
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::haxe.root.Array baseArr) {
			baseArr.push("window");
			baseArr.push("lengths");
			baseArr.push("input");
			baseArr.push("outpos");
			baseArr.push("output");
			baseArr.push("needed");
			baseArr.push("dist");
			baseArr.push("len");
			baseArr.push("htools");
			baseArr.push("huffdist");
			baseArr.push("huffman");
			baseArr.push("isFinal");
			baseArr.push("state");
			baseArr.push("bits");
			baseArr.push("nbits");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}


