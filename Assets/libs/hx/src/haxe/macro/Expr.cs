// Generated by Haxe 4.0.2+606b176a3

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public class StringLiteralKind : global::haxe.lang.Enum {
		
		protected StringLiteralKind(int index) : base(index) {
		}
		
		
		public static readonly global::haxe.macro.StringLiteralKind DoubleQuotes = new global::haxe.macro.StringLiteralKind_DoubleQuotes();
		
		public static readonly global::haxe.macro.StringLiteralKind SingleQuotes = new global::haxe.macro.StringLiteralKind_SingleQuotes();
		
		protected static readonly string[] __hx_constructs = new string[]{"DoubleQuotes", "SingleQuotes"};
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class StringLiteralKind_DoubleQuotes : global::haxe.macro.StringLiteralKind {
		
		public StringLiteralKind_DoubleQuotes() : base(0) {
		}
		
		
		public override string getTag() {
			#line 51 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "DoubleQuotes";
		}
		#line default
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class StringLiteralKind_SingleQuotes : global::haxe.macro.StringLiteralKind {
		
		public StringLiteralKind_SingleQuotes() : base(1) {
		}
		
		
		public override string getTag() {
			#line 52 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "SingleQuotes";
		}
		#line default
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public class Constant : global::haxe.lang.Enum {
		
		protected Constant(int index) : base(index) {
		}
		
		
		public static global::haxe.macro.Constant CInt(string v) {
			#line 63 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.macro.Constant_CInt(v);
		}
		#line default
		
		public static global::haxe.macro.Constant CFloat(string f) {
			#line 68 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.macro.Constant_CFloat(f);
		}
		#line default
		
		public static global::haxe.macro.Constant CString(string s, global::haxe.macro.StringLiteralKind kind) {
			#line 73 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.macro.Constant_CString(s, kind);
		}
		#line default
		
		public static global::haxe.macro.Constant CIdent(string s) {
			#line 78 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.macro.Constant_CIdent(s);
		}
		#line default
		
		public static global::haxe.macro.Constant CRegexp(string r, string opt) {
			#line 89 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.macro.Constant_CRegexp(r, opt);
		}
		#line default
		
		protected static readonly string[] __hx_constructs = new string[]{"CInt", "CFloat", "CString", "CIdent", "CRegexp"};
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class Constant_CInt : global::haxe.macro.Constant {
		
		public Constant_CInt(string v) : base(0) {
			#line 63 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.v = v;
		}
		#line default
		
		public override global::haxe.root.Array getParams() {
			#line 63 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.root.Array(new object[]{this.v});
		}
		#line default
		
		public override string getTag() {
			#line 63 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "CInt";
		}
		#line default
		
		public override int GetHashCode() {
			#line 63 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return global::haxe.lang.Enum.paramsGetHashCode(0, new object[]{this.v});
		}
		#line default
		
		public override bool Equals(object other) {
			#line 63 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				#line 63 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return true;
			}
			
			#line 63 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			global::haxe.macro.Constant_CInt en = ( other as global::haxe.macro.Constant_CInt );
			#line 63 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (( en == null )) {
				#line 63 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 63 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.v) ), ((object) (en.v) ))) ) {
				#line 63 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 63 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return true;
		}
		#line default
		
		public override string toString() {
			#line 63 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return global::haxe.lang.Enum.paramsToString("CInt", new object[]{this.v});
		}
		#line default
		
		public readonly string v;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class Constant_CFloat : global::haxe.macro.Constant {
		
		public Constant_CFloat(string f) : base(1) {
			#line 68 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.f = f;
		}
		#line default
		
		public override global::haxe.root.Array getParams() {
			#line 68 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.root.Array(new object[]{this.f});
		}
		#line default
		
		public override string getTag() {
			#line 68 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "CFloat";
		}
		#line default
		
		public override int GetHashCode() {
			unchecked {
				#line 68 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return global::haxe.lang.Enum.paramsGetHashCode(1, new object[]{this.f});
			}
			#line default
		}
		
		
		public override bool Equals(object other) {
			#line 68 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				#line 68 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return true;
			}
			
			#line 68 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			global::haxe.macro.Constant_CFloat en = ( other as global::haxe.macro.Constant_CFloat );
			#line 68 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (( en == null )) {
				#line 68 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 68 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.f) ), ((object) (en.f) ))) ) {
				#line 68 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 68 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return true;
		}
		#line default
		
		public override string toString() {
			#line 68 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return global::haxe.lang.Enum.paramsToString("CFloat", new object[]{this.f});
		}
		#line default
		
		public readonly string f;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class Constant_CString : global::haxe.macro.Constant {
		
		public Constant_CString(string s, global::haxe.macro.StringLiteralKind kind) : base(2) {
			#line 73 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.s = s;
			#line 73 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.kind = kind;
		}
		#line default
		
		public override global::haxe.root.Array getParams() {
			#line 73 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.root.Array(new object[]{this.s, this.kind});
		}
		#line default
		
		public override string getTag() {
			#line 73 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "CString";
		}
		#line default
		
		public override int GetHashCode() {
			unchecked {
				#line 73 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return global::haxe.lang.Enum.paramsGetHashCode(2, new object[]{this.s, this.kind});
			}
			#line default
		}
		
		
		public override bool Equals(object other) {
			#line 73 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				#line 73 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return true;
			}
			
			#line 73 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			global::haxe.macro.Constant_CString en = ( other as global::haxe.macro.Constant_CString );
			#line 73 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (( en == null )) {
				#line 73 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 73 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.s) ), ((object) (en.s) ))) ) {
				#line 73 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 73 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.kind) ), ((object) (en.kind) ))) ) {
				#line 73 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 73 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return true;
		}
		#line default
		
		public override string toString() {
			#line 73 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return global::haxe.lang.Enum.paramsToString("CString", new object[]{this.s, this.kind});
		}
		#line default
		
		public readonly string s;
		
		public readonly global::haxe.macro.StringLiteralKind kind;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class Constant_CIdent : global::haxe.macro.Constant {
		
		public Constant_CIdent(string s) : base(3) {
			#line 78 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.s = s;
		}
		#line default
		
		public override global::haxe.root.Array getParams() {
			#line 78 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.root.Array(new object[]{this.s});
		}
		#line default
		
		public override string getTag() {
			#line 78 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "CIdent";
		}
		#line default
		
		public override int GetHashCode() {
			unchecked {
				#line 78 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return global::haxe.lang.Enum.paramsGetHashCode(3, new object[]{this.s});
			}
			#line default
		}
		
		
		public override bool Equals(object other) {
			#line 78 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				#line 78 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return true;
			}
			
			#line 78 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			global::haxe.macro.Constant_CIdent en = ( other as global::haxe.macro.Constant_CIdent );
			#line 78 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (( en == null )) {
				#line 78 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 78 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.s) ), ((object) (en.s) ))) ) {
				#line 78 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 78 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return true;
		}
		#line default
		
		public override string toString() {
			#line 78 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return global::haxe.lang.Enum.paramsToString("CIdent", new object[]{this.s});
		}
		#line default
		
		public readonly string s;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class Constant_CRegexp : global::haxe.macro.Constant {
		
		public Constant_CRegexp(string r, string opt) : base(4) {
			#line 89 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.r = r;
			#line 89 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.opt = opt;
		}
		#line default
		
		public override global::haxe.root.Array getParams() {
			#line 89 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.root.Array(new object[]{this.r, this.opt});
		}
		#line default
		
		public override string getTag() {
			#line 89 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "CRegexp";
		}
		#line default
		
		public override int GetHashCode() {
			unchecked {
				#line 89 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return global::haxe.lang.Enum.paramsGetHashCode(4, new object[]{this.r, this.opt});
			}
			#line default
		}
		
		
		public override bool Equals(object other) {
			#line 89 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				#line 89 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return true;
			}
			
			#line 89 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			global::haxe.macro.Constant_CRegexp en = ( other as global::haxe.macro.Constant_CRegexp );
			#line 89 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (( en == null )) {
				#line 89 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 89 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.r) ), ((object) (en.r) ))) ) {
				#line 89 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 89 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.opt) ), ((object) (en.opt) ))) ) {
				#line 89 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 89 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return true;
		}
		#line default
		
		public override string toString() {
			#line 89 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return global::haxe.lang.Enum.paramsToString("CRegexp", new object[]{this.r, this.opt});
		}
		#line default
		
		public readonly string r;
		
		public readonly string opt;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public class Binop : global::haxe.lang.Enum {
		
		protected Binop(int index) : base(index) {
		}
		
		
		public static readonly global::haxe.macro.Binop OpAdd = new global::haxe.macro.Binop_OpAdd();
		
		public static readonly global::haxe.macro.Binop OpMult = new global::haxe.macro.Binop_OpMult();
		
		public static readonly global::haxe.macro.Binop OpDiv = new global::haxe.macro.Binop_OpDiv();
		
		public static readonly global::haxe.macro.Binop OpSub = new global::haxe.macro.Binop_OpSub();
		
		public static readonly global::haxe.macro.Binop OpAssign = new global::haxe.macro.Binop_OpAssign();
		
		public static readonly global::haxe.macro.Binop OpEq = new global::haxe.macro.Binop_OpEq();
		
		public static readonly global::haxe.macro.Binop OpNotEq = new global::haxe.macro.Binop_OpNotEq();
		
		public static readonly global::haxe.macro.Binop OpGt = new global::haxe.macro.Binop_OpGt();
		
		public static readonly global::haxe.macro.Binop OpGte = new global::haxe.macro.Binop_OpGte();
		
		public static readonly global::haxe.macro.Binop OpLt = new global::haxe.macro.Binop_OpLt();
		
		public static readonly global::haxe.macro.Binop OpLte = new global::haxe.macro.Binop_OpLte();
		
		public static readonly global::haxe.macro.Binop OpAnd = new global::haxe.macro.Binop_OpAnd();
		
		public static readonly global::haxe.macro.Binop OpOr = new global::haxe.macro.Binop_OpOr();
		
		public static readonly global::haxe.macro.Binop OpXor = new global::haxe.macro.Binop_OpXor();
		
		public static readonly global::haxe.macro.Binop OpBoolAnd = new global::haxe.macro.Binop_OpBoolAnd();
		
		public static readonly global::haxe.macro.Binop OpBoolOr = new global::haxe.macro.Binop_OpBoolOr();
		
		public static readonly global::haxe.macro.Binop OpShl = new global::haxe.macro.Binop_OpShl();
		
		public static readonly global::haxe.macro.Binop OpShr = new global::haxe.macro.Binop_OpShr();
		
		public static readonly global::haxe.macro.Binop OpUShr = new global::haxe.macro.Binop_OpUShr();
		
		public static readonly global::haxe.macro.Binop OpMod = new global::haxe.macro.Binop_OpMod();
		
		public static global::haxe.macro.Binop OpAssignOp(global::haxe.macro.Binop op) {
			#line 210 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.macro.Binop_OpAssignOp(op);
		}
		#line default
		
		public static readonly global::haxe.macro.Binop OpInterval = new global::haxe.macro.Binop_OpInterval();
		
		public static readonly global::haxe.macro.Binop OpArrow = new global::haxe.macro.Binop_OpArrow();
		
		public static readonly global::haxe.macro.Binop OpIn = new global::haxe.macro.Binop_OpIn();
		
		protected static readonly string[] __hx_constructs = new string[]{"OpAdd", "OpMult", "OpDiv", "OpSub", "OpAssign", "OpEq", "OpNotEq", "OpGt", "OpGte", "OpLt", "OpLte", "OpAnd", "OpOr", "OpXor", "OpBoolAnd", "OpBoolOr", "OpShl", "OpShr", "OpUShr", "OpMod", "OpAssignOp", "OpInterval", "OpArrow", "OpIn"};
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class Binop_OpAdd : global::haxe.macro.Binop {
		
		public Binop_OpAdd() : base(0) {
		}
		
		
		public override string getTag() {
			#line 100 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "OpAdd";
		}
		#line default
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class Binop_OpMult : global::haxe.macro.Binop {
		
		public Binop_OpMult() : base(1) {
		}
		
		
		public override string getTag() {
			#line 105 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "OpMult";
		}
		#line default
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class Binop_OpDiv : global::haxe.macro.Binop {
		
		public Binop_OpDiv() : base(2) {
		}
		
		
		public override string getTag() {
			#line 110 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "OpDiv";
		}
		#line default
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class Binop_OpSub : global::haxe.macro.Binop {
		
		public Binop_OpSub() : base(3) {
		}
		
		
		public override string getTag() {
			#line 115 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "OpSub";
		}
		#line default
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class Binop_OpAssign : global::haxe.macro.Binop {
		
		public Binop_OpAssign() : base(4) {
		}
		
		
		public override string getTag() {
			#line 120 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "OpAssign";
		}
		#line default
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class Binop_OpEq : global::haxe.macro.Binop {
		
		public Binop_OpEq() : base(5) {
		}
		
		
		public override string getTag() {
			#line 125 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "OpEq";
		}
		#line default
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class Binop_OpNotEq : global::haxe.macro.Binop {
		
		public Binop_OpNotEq() : base(6) {
		}
		
		
		public override string getTag() {
			#line 130 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "OpNotEq";
		}
		#line default
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class Binop_OpGt : global::haxe.macro.Binop {
		
		public Binop_OpGt() : base(7) {
		}
		
		
		public override string getTag() {
			#line 135 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "OpGt";
		}
		#line default
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class Binop_OpGte : global::haxe.macro.Binop {
		
		public Binop_OpGte() : base(8) {
		}
		
		
		public override string getTag() {
			#line 140 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "OpGte";
		}
		#line default
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class Binop_OpLt : global::haxe.macro.Binop {
		
		public Binop_OpLt() : base(9) {
		}
		
		
		public override string getTag() {
			#line 145 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "OpLt";
		}
		#line default
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class Binop_OpLte : global::haxe.macro.Binop {
		
		public Binop_OpLte() : base(10) {
		}
		
		
		public override string getTag() {
			#line 150 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "OpLte";
		}
		#line default
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class Binop_OpAnd : global::haxe.macro.Binop {
		
		public Binop_OpAnd() : base(11) {
		}
		
		
		public override string getTag() {
			#line 155 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "OpAnd";
		}
		#line default
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class Binop_OpOr : global::haxe.macro.Binop {
		
		public Binop_OpOr() : base(12) {
		}
		
		
		public override string getTag() {
			#line 160 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "OpOr";
		}
		#line default
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class Binop_OpXor : global::haxe.macro.Binop {
		
		public Binop_OpXor() : base(13) {
		}
		
		
		public override string getTag() {
			#line 165 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "OpXor";
		}
		#line default
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class Binop_OpBoolAnd : global::haxe.macro.Binop {
		
		public Binop_OpBoolAnd() : base(14) {
		}
		
		
		public override string getTag() {
			#line 170 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "OpBoolAnd";
		}
		#line default
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class Binop_OpBoolOr : global::haxe.macro.Binop {
		
		public Binop_OpBoolOr() : base(15) {
		}
		
		
		public override string getTag() {
			#line 175 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "OpBoolOr";
		}
		#line default
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class Binop_OpShl : global::haxe.macro.Binop {
		
		public Binop_OpShl() : base(16) {
		}
		
		
		public override string getTag() {
			#line 180 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "OpShl";
		}
		#line default
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class Binop_OpShr : global::haxe.macro.Binop {
		
		public Binop_OpShr() : base(17) {
		}
		
		
		public override string getTag() {
			#line 185 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "OpShr";
		}
		#line default
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class Binop_OpUShr : global::haxe.macro.Binop {
		
		public Binop_OpUShr() : base(18) {
		}
		
		
		public override string getTag() {
			#line 190 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "OpUShr";
		}
		#line default
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class Binop_OpMod : global::haxe.macro.Binop {
		
		public Binop_OpMod() : base(19) {
		}
		
		
		public override string getTag() {
			#line 195 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "OpMod";
		}
		#line default
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class Binop_OpAssignOp : global::haxe.macro.Binop {
		
		public Binop_OpAssignOp(global::haxe.macro.Binop op) : base(20) {
			#line 210 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.op = op;
		}
		#line default
		
		public override global::haxe.root.Array getParams() {
			#line 210 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.root.Array(new object[]{this.op});
		}
		#line default
		
		public override string getTag() {
			#line 210 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "OpAssignOp";
		}
		#line default
		
		public override int GetHashCode() {
			unchecked {
				#line 210 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return global::haxe.lang.Enum.paramsGetHashCode(20, new object[]{this.op});
			}
			#line default
		}
		
		
		public override bool Equals(object other) {
			#line 210 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				#line 210 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return true;
			}
			
			#line 210 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			global::haxe.macro.Binop_OpAssignOp en = ( other as global::haxe.macro.Binop_OpAssignOp );
			#line 210 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (( en == null )) {
				#line 210 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 210 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.op) ), ((object) (en.op) ))) ) {
				#line 210 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 210 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return true;
		}
		#line default
		
		public override string toString() {
			#line 210 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return global::haxe.lang.Enum.paramsToString("OpAssignOp", new object[]{this.op});
		}
		#line default
		
		public readonly global::haxe.macro.Binop op;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class Binop_OpInterval : global::haxe.macro.Binop {
		
		public Binop_OpInterval() : base(21) {
		}
		
		
		public override string getTag() {
			#line 215 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "OpInterval";
		}
		#line default
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class Binop_OpArrow : global::haxe.macro.Binop {
		
		public Binop_OpArrow() : base(22) {
		}
		
		
		public override string getTag() {
			#line 220 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "OpArrow";
		}
		#line default
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class Binop_OpIn : global::haxe.macro.Binop {
		
		public Binop_OpIn() : base(23) {
		}
		
		
		public override string getTag() {
			#line 225 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "OpIn";
		}
		#line default
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public class Unop : global::haxe.lang.Enum {
		
		protected Unop(int index) : base(index) {
		}
		
		
		public static readonly global::haxe.macro.Unop OpIncrement = new global::haxe.macro.Unop_OpIncrement();
		
		public static readonly global::haxe.macro.Unop OpDecrement = new global::haxe.macro.Unop_OpDecrement();
		
		public static readonly global::haxe.macro.Unop OpNot = new global::haxe.macro.Unop_OpNot();
		
		public static readonly global::haxe.macro.Unop OpNeg = new global::haxe.macro.Unop_OpNeg();
		
		public static readonly global::haxe.macro.Unop OpNegBits = new global::haxe.macro.Unop_OpNegBits();
		
		protected static readonly string[] __hx_constructs = new string[]{"OpIncrement", "OpDecrement", "OpNot", "OpNeg", "OpNegBits"};
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class Unop_OpIncrement : global::haxe.macro.Unop {
		
		public Unop_OpIncrement() : base(0) {
		}
		
		
		public override string getTag() {
			#line 236 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "OpIncrement";
		}
		#line default
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class Unop_OpDecrement : global::haxe.macro.Unop {
		
		public Unop_OpDecrement() : base(1) {
		}
		
		
		public override string getTag() {
			#line 241 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "OpDecrement";
		}
		#line default
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class Unop_OpNot : global::haxe.macro.Unop {
		
		public Unop_OpNot() : base(2) {
		}
		
		
		public override string getTag() {
			#line 246 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "OpNot";
		}
		#line default
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class Unop_OpNeg : global::haxe.macro.Unop {
		
		public Unop_OpNeg() : base(3) {
		}
		
		
		public override string getTag() {
			#line 251 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "OpNeg";
		}
		#line default
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class Unop_OpNegBits : global::haxe.macro.Unop {
		
		public Unop_OpNegBits() : base(4) {
		}
		
		
		public override string getTag() {
			#line 256 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "OpNegBits";
		}
		#line default
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public class QuoteStatus : global::haxe.lang.Enum {
		
		protected QuoteStatus(int index) : base(index) {
		}
		
		
		public static readonly global::haxe.macro.QuoteStatus Unquoted = new global::haxe.macro.QuoteStatus_Unquoted();
		
		public static readonly global::haxe.macro.QuoteStatus Quoted = new global::haxe.macro.QuoteStatus_Quoted();
		
		protected static readonly string[] __hx_constructs = new string[]{"Unquoted", "Quoted"};
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class QuoteStatus_Unquoted : global::haxe.macro.QuoteStatus {
		
		public QuoteStatus_Unquoted() : base(0) {
		}
		
		
		public override string getTag() {
			#line 357 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "Unquoted";
		}
		#line default
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class QuoteStatus_Quoted : global::haxe.macro.QuoteStatus {
		
		public QuoteStatus_Quoted() : base(1) {
		}
		
		
		public override string getTag() {
			#line 362 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "Quoted";
		}
		#line default
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public class FunctionKind : global::haxe.lang.Enum {
		
		protected FunctionKind(int index) : base(index) {
		}
		
		
		public static readonly global::haxe.macro.FunctionKind FAnonymous = new global::haxe.macro.FunctionKind_FAnonymous();
		
		public static global::haxe.macro.FunctionKind FNamed(string name, object inlined) {
			#line 396 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.macro.FunctionKind_FNamed(name, inlined);
		}
		#line default
		
		public static readonly global::haxe.macro.FunctionKind FArrow = new global::haxe.macro.FunctionKind_FArrow();
		
		protected static readonly string[] __hx_constructs = new string[]{"FAnonymous", "FNamed", "FArrow"};
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class FunctionKind_FAnonymous : global::haxe.macro.FunctionKind {
		
		public FunctionKind_FAnonymous() : base(0) {
		}
		
		
		public override string getTag() {
			#line 392 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "FAnonymous";
		}
		#line default
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class FunctionKind_FNamed : global::haxe.macro.FunctionKind {
		
		public FunctionKind_FNamed(string name, object inlined) : base(1) {
			#line 396 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.name = name;
			#line 396 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.inlined = inlined;
		}
		#line default
		
		public override global::haxe.root.Array getParams() {
			#line 396 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.root.Array(new object[]{this.name, this.inlined});
		}
		#line default
		
		public override string getTag() {
			#line 396 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "FNamed";
		}
		#line default
		
		public override int GetHashCode() {
			unchecked {
				#line 396 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return global::haxe.lang.Enum.paramsGetHashCode(1, new object[]{this.name, this.inlined});
			}
			#line default
		}
		
		
		public override bool Equals(object other) {
			#line 396 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				#line 396 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return true;
			}
			
			#line 396 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			global::haxe.macro.FunctionKind_FNamed en = ( other as global::haxe.macro.FunctionKind_FNamed );
			#line 396 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (( en == null )) {
				#line 396 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 396 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.name) ), ((object) (en.name) ))) ) {
				#line 396 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 396 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.inlined) ), ((object) (en.inlined) ))) ) {
				#line 396 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 396 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return true;
		}
		#line default
		
		public override string toString() {
			#line 396 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return global::haxe.lang.Enum.paramsToString("FNamed", new object[]{this.name, this.inlined});
		}
		#line default
		
		public readonly string name;
		
		public readonly object inlined;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class FunctionKind_FArrow : global::haxe.macro.FunctionKind {
		
		public FunctionKind_FArrow() : base(2) {
		}
		
		
		public override string getTag() {
			#line 400 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "FArrow";
		}
		#line default
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public class ExprDef : global::haxe.lang.Enum {
		
		protected ExprDef(int index) : base(index) {
		}
		
		
		public static global::haxe.macro.ExprDef EConst(global::haxe.macro.Constant c) {
			#line 410 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.macro.ExprDef_EConst(c);
		}
		#line default
		
		public static global::haxe.macro.ExprDef EArray(object e1, object e2) {
			#line 415 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.macro.ExprDef_EArray(e1, e2);
		}
		#line default
		
		public static global::haxe.macro.ExprDef EBinop(global::haxe.macro.Binop op, object e1, object e2) {
			#line 420 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.macro.ExprDef_EBinop(op, e1, e2);
		}
		#line default
		
		public static global::haxe.macro.ExprDef EField(object e, string field) {
			#line 425 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.macro.ExprDef_EField(e, field);
		}
		#line default
		
		public static global::haxe.macro.ExprDef EParenthesis(object e) {
			#line 430 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.macro.ExprDef_EParenthesis(e);
		}
		#line default
		
		public static global::haxe.macro.ExprDef EObjectDecl(global::haxe.root.Array fields) {
			#line 435 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.macro.ExprDef_EObjectDecl(fields);
		}
		#line default
		
		public static global::haxe.macro.ExprDef EArrayDecl(global::haxe.root.Array values) {
			#line 440 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.macro.ExprDef_EArrayDecl(values);
		}
		#line default
		
		public static global::haxe.macro.ExprDef ECall(object e, global::haxe.root.Array @params) {
			#line 445 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.macro.ExprDef_ECall(e, @params);
		}
		#line default
		
		public static global::haxe.macro.ExprDef ENew(object t, global::haxe.root.Array @params) {
			#line 450 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.macro.ExprDef_ENew(t, @params);
		}
		#line default
		
		public static global::haxe.macro.ExprDef EUnop(global::haxe.macro.Unop op, bool postFix, object e) {
			#line 463 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.macro.ExprDef_EUnop(op, postFix, e);
		}
		#line default
		
		public static global::haxe.macro.ExprDef EVars(global::haxe.root.Array vars) {
			#line 468 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.macro.ExprDef_EVars(vars);
		}
		#line default
		
		public static global::haxe.macro.ExprDef EFunction(global::haxe.macro.FunctionKind kind, object f) {
			#line 473 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.macro.ExprDef_EFunction(kind, f);
		}
		#line default
		
		public static global::haxe.macro.ExprDef EBlock(global::haxe.root.Array exprs) {
			#line 478 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.macro.ExprDef_EBlock(exprs);
		}
		#line default
		
		public static global::haxe.macro.ExprDef EFor(object it, object expr) {
			#line 483 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.macro.ExprDef_EFor(it, expr);
		}
		#line default
		
		public static global::haxe.macro.ExprDef EIf(object econd, object eif, object eelse) {
			#line 488 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.macro.ExprDef_EIf(econd, eif, eelse);
		}
		#line default
		
		public static global::haxe.macro.ExprDef EWhile(object econd, object e, bool normalWhile) {
			#line 495 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.macro.ExprDef_EWhile(econd, e, normalWhile);
		}
		#line default
		
		public static global::haxe.macro.ExprDef ESwitch(object e, global::haxe.root.Array cases, object edef) {
			#line 501 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.macro.ExprDef_ESwitch(e, cases, edef);
		}
		#line default
		
		public static global::haxe.macro.ExprDef ETry(object e, global::haxe.root.Array catches) {
			#line 506 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.macro.ExprDef_ETry(e, catches);
		}
		#line default
		
		public static global::haxe.macro.ExprDef EReturn(object e) {
			#line 511 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.macro.ExprDef_EReturn(e);
		}
		#line default
		
		public static readonly global::haxe.macro.ExprDef EBreak = new global::haxe.macro.ExprDef_EBreak();
		
		public static readonly global::haxe.macro.ExprDef EContinue = new global::haxe.macro.ExprDef_EContinue();
		
		public static global::haxe.macro.ExprDef EUntyped(object e) {
			#line 526 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.macro.ExprDef_EUntyped(e);
		}
		#line default
		
		public static global::haxe.macro.ExprDef EThrow(object e) {
			#line 531 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.macro.ExprDef_EThrow(e);
		}
		#line default
		
		public static global::haxe.macro.ExprDef ECast(object e, global::haxe.macro.ComplexType t) {
			#line 536 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.macro.ExprDef_ECast(e, t);
		}
		#line default
		
		public static global::haxe.macro.ExprDef EDisplay(object e, global::haxe.macro.DisplayKind displayKind) {
			#line 541 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.macro.ExprDef_EDisplay(e, displayKind);
		}
		#line default
		
		public static global::haxe.macro.ExprDef EDisplayNew(object t) {
			#line 546 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.macro.ExprDef_EDisplayNew(t);
		}
		#line default
		
		public static global::haxe.macro.ExprDef ETernary(object econd, object eif, object eelse) {
			#line 551 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.macro.ExprDef_ETernary(econd, eif, eelse);
		}
		#line default
		
		public static global::haxe.macro.ExprDef ECheckType(object e, global::haxe.macro.ComplexType t) {
			#line 556 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.macro.ExprDef_ECheckType(e, t);
		}
		#line default
		
		public static global::haxe.macro.ExprDef EMeta(object s, object e) {
			#line 561 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.macro.ExprDef_EMeta(s, e);
		}
		#line default
		
		protected static readonly string[] __hx_constructs = new string[]{"EConst", "EArray", "EBinop", "EField", "EParenthesis", "EObjectDecl", "EArrayDecl", "ECall", "ENew", "EUnop", "EVars", "EFunction", "EBlock", "EFor", "EIf", "EWhile", "ESwitch", "ETry", "EReturn", "EBreak", "EContinue", "EUntyped", "EThrow", "ECast", "EDisplay", "EDisplayNew", "ETernary", "ECheckType", "EMeta"};
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class ExprDef_EConst : global::haxe.macro.ExprDef {
		
		public ExprDef_EConst(global::haxe.macro.Constant c) : base(0) {
			#line 410 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.c = c;
		}
		#line default
		
		public override global::haxe.root.Array getParams() {
			#line 410 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.root.Array(new object[]{this.c});
		}
		#line default
		
		public override string getTag() {
			#line 410 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "EConst";
		}
		#line default
		
		public override int GetHashCode() {
			#line 410 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return global::haxe.lang.Enum.paramsGetHashCode(0, new object[]{this.c});
		}
		#line default
		
		public override bool Equals(object other) {
			#line 410 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				#line 410 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return true;
			}
			
			#line 410 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			global::haxe.macro.ExprDef_EConst en = ( other as global::haxe.macro.ExprDef_EConst );
			#line 410 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (( en == null )) {
				#line 410 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 410 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.c) ), ((object) (en.c) ))) ) {
				#line 410 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 410 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return true;
		}
		#line default
		
		public override string toString() {
			#line 410 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return global::haxe.lang.Enum.paramsToString("EConst", new object[]{this.c});
		}
		#line default
		
		public readonly global::haxe.macro.Constant c;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class ExprDef_EArray : global::haxe.macro.ExprDef {
		
		public ExprDef_EArray(object e1, object e2) : base(1) {
			#line 415 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.e1 = e1;
			#line 415 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.e2 = e2;
		}
		#line default
		
		public override global::haxe.root.Array getParams() {
			#line 415 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.root.Array(new object[]{this.e1, this.e2});
		}
		#line default
		
		public override string getTag() {
			#line 415 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "EArray";
		}
		#line default
		
		public override int GetHashCode() {
			unchecked {
				#line 415 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return global::haxe.lang.Enum.paramsGetHashCode(1, new object[]{this.e1, this.e2});
			}
			#line default
		}
		
		
		public override bool Equals(object other) {
			#line 415 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				#line 415 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return true;
			}
			
			#line 415 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			global::haxe.macro.ExprDef_EArray en = ( other as global::haxe.macro.ExprDef_EArray );
			#line 415 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (( en == null )) {
				#line 415 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 415 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.e1) ), ((object) (en.e1) ))) ) {
				#line 415 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 415 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.e2) ), ((object) (en.e2) ))) ) {
				#line 415 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 415 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return true;
		}
		#line default
		
		public override string toString() {
			#line 415 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return global::haxe.lang.Enum.paramsToString("EArray", new object[]{this.e1, this.e2});
		}
		#line default
		
		public readonly object e1;
		
		public readonly object e2;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class ExprDef_EBinop : global::haxe.macro.ExprDef {
		
		public ExprDef_EBinop(global::haxe.macro.Binop op, object e1, object e2) : base(2) {
			#line 420 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.op = op;
			#line 420 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.e1 = e1;
			#line 420 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.e2 = e2;
		}
		#line default
		
		public override global::haxe.root.Array getParams() {
			#line 420 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.root.Array(new object[]{this.op, this.e1, this.e2});
		}
		#line default
		
		public override string getTag() {
			#line 420 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "EBinop";
		}
		#line default
		
		public override int GetHashCode() {
			unchecked {
				#line 420 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return global::haxe.lang.Enum.paramsGetHashCode(2, new object[]{this.op, this.e1, this.e2});
			}
			#line default
		}
		
		
		public override bool Equals(object other) {
			#line 420 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				#line 420 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return true;
			}
			
			#line 420 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			global::haxe.macro.ExprDef_EBinop en = ( other as global::haxe.macro.ExprDef_EBinop );
			#line 420 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (( en == null )) {
				#line 420 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 420 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.op) ), ((object) (en.op) ))) ) {
				#line 420 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 420 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.e1) ), ((object) (en.e1) ))) ) {
				#line 420 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 420 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.e2) ), ((object) (en.e2) ))) ) {
				#line 420 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 420 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return true;
		}
		#line default
		
		public override string toString() {
			#line 420 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return global::haxe.lang.Enum.paramsToString("EBinop", new object[]{this.op, this.e1, this.e2});
		}
		#line default
		
		public readonly global::haxe.macro.Binop op;
		
		public readonly object e1;
		
		public readonly object e2;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class ExprDef_EField : global::haxe.macro.ExprDef {
		
		public ExprDef_EField(object e, string field) : base(3) {
			#line 425 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.e = e;
			#line 425 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.field = field;
		}
		#line default
		
		public override global::haxe.root.Array getParams() {
			#line 425 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.root.Array(new object[]{this.e, this.field});
		}
		#line default
		
		public override string getTag() {
			#line 425 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "EField";
		}
		#line default
		
		public override int GetHashCode() {
			unchecked {
				#line 425 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return global::haxe.lang.Enum.paramsGetHashCode(3, new object[]{this.e, this.field});
			}
			#line default
		}
		
		
		public override bool Equals(object other) {
			#line 425 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				#line 425 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return true;
			}
			
			#line 425 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			global::haxe.macro.ExprDef_EField en = ( other as global::haxe.macro.ExprDef_EField );
			#line 425 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (( en == null )) {
				#line 425 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 425 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.e) ), ((object) (en.e) ))) ) {
				#line 425 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 425 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.field) ), ((object) (en.field) ))) ) {
				#line 425 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 425 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return true;
		}
		#line default
		
		public override string toString() {
			#line 425 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return global::haxe.lang.Enum.paramsToString("EField", new object[]{this.e, this.field});
		}
		#line default
		
		public readonly object e;
		
		public readonly string field;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class ExprDef_EParenthesis : global::haxe.macro.ExprDef {
		
		public ExprDef_EParenthesis(object e) : base(4) {
			#line 430 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.e = e;
		}
		#line default
		
		public override global::haxe.root.Array getParams() {
			#line 430 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.root.Array(new object[]{this.e});
		}
		#line default
		
		public override string getTag() {
			#line 430 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "EParenthesis";
		}
		#line default
		
		public override int GetHashCode() {
			unchecked {
				#line 430 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return global::haxe.lang.Enum.paramsGetHashCode(4, new object[]{this.e});
			}
			#line default
		}
		
		
		public override bool Equals(object other) {
			#line 430 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				#line 430 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return true;
			}
			
			#line 430 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			global::haxe.macro.ExprDef_EParenthesis en = ( other as global::haxe.macro.ExprDef_EParenthesis );
			#line 430 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (( en == null )) {
				#line 430 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 430 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.e) ), ((object) (en.e) ))) ) {
				#line 430 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 430 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return true;
		}
		#line default
		
		public override string toString() {
			#line 430 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return global::haxe.lang.Enum.paramsToString("EParenthesis", new object[]{this.e});
		}
		#line default
		
		public readonly object e;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class ExprDef_EObjectDecl : global::haxe.macro.ExprDef {
		
		public ExprDef_EObjectDecl(global::haxe.root.Array fields) : base(5) {
			#line 435 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.fields = fields;
		}
		#line default
		
		public override global::haxe.root.Array getParams() {
			#line 435 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.root.Array(new object[]{this.fields});
		}
		#line default
		
		public override string getTag() {
			#line 435 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "EObjectDecl";
		}
		#line default
		
		public override int GetHashCode() {
			unchecked {
				#line 435 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return global::haxe.lang.Enum.paramsGetHashCode(5, new object[]{this.fields});
			}
			#line default
		}
		
		
		public override bool Equals(object other) {
			#line 435 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				#line 435 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return true;
			}
			
			#line 435 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			global::haxe.macro.ExprDef_EObjectDecl en = ( other as global::haxe.macro.ExprDef_EObjectDecl );
			#line 435 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (( en == null )) {
				#line 435 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 435 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.fields) ), ((object) (en.fields) ))) ) {
				#line 435 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 435 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return true;
		}
		#line default
		
		public override string toString() {
			#line 435 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return global::haxe.lang.Enum.paramsToString("EObjectDecl", new object[]{this.fields});
		}
		#line default
		
		public readonly global::haxe.root.Array fields;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class ExprDef_EArrayDecl : global::haxe.macro.ExprDef {
		
		public ExprDef_EArrayDecl(global::haxe.root.Array values) : base(6) {
			#line 440 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.values = values;
		}
		#line default
		
		public override global::haxe.root.Array getParams() {
			#line 440 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.root.Array(new object[]{this.values});
		}
		#line default
		
		public override string getTag() {
			#line 440 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "EArrayDecl";
		}
		#line default
		
		public override int GetHashCode() {
			unchecked {
				#line 440 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return global::haxe.lang.Enum.paramsGetHashCode(6, new object[]{this.values});
			}
			#line default
		}
		
		
		public override bool Equals(object other) {
			#line 440 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				#line 440 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return true;
			}
			
			#line 440 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			global::haxe.macro.ExprDef_EArrayDecl en = ( other as global::haxe.macro.ExprDef_EArrayDecl );
			#line 440 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (( en == null )) {
				#line 440 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 440 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.values) ), ((object) (en.values) ))) ) {
				#line 440 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 440 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return true;
		}
		#line default
		
		public override string toString() {
			#line 440 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return global::haxe.lang.Enum.paramsToString("EArrayDecl", new object[]{this.values});
		}
		#line default
		
		public readonly global::haxe.root.Array values;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class ExprDef_ECall : global::haxe.macro.ExprDef {
		
		public ExprDef_ECall(object e, global::haxe.root.Array @params) : base(7) {
			#line 445 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.e = e;
			#line 445 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.@params = @params;
		}
		#line default
		
		public override global::haxe.root.Array getParams() {
			#line 445 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.root.Array(new object[]{this.e, this.@params});
		}
		#line default
		
		public override string getTag() {
			#line 445 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "ECall";
		}
		#line default
		
		public override int GetHashCode() {
			unchecked {
				#line 445 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return global::haxe.lang.Enum.paramsGetHashCode(7, new object[]{this.e, this.@params});
			}
			#line default
		}
		
		
		public override bool Equals(object other) {
			#line 445 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				#line 445 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return true;
			}
			
			#line 445 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			global::haxe.macro.ExprDef_ECall en = ( other as global::haxe.macro.ExprDef_ECall );
			#line 445 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (( en == null )) {
				#line 445 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 445 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.e) ), ((object) (en.e) ))) ) {
				#line 445 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 445 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.@params) ), ((object) (en.@params) ))) ) {
				#line 445 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 445 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return true;
		}
		#line default
		
		public override string toString() {
			#line 445 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return global::haxe.lang.Enum.paramsToString("ECall", new object[]{this.e, this.@params});
		}
		#line default
		
		public readonly object e;
		
		public readonly global::haxe.root.Array @params;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class ExprDef_ENew : global::haxe.macro.ExprDef {
		
		public ExprDef_ENew(object t, global::haxe.root.Array @params) : base(8) {
			#line 450 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.t = t;
			#line 450 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.@params = @params;
		}
		#line default
		
		public override global::haxe.root.Array getParams() {
			#line 450 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.root.Array(new object[]{this.t, this.@params});
		}
		#line default
		
		public override string getTag() {
			#line 450 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "ENew";
		}
		#line default
		
		public override int GetHashCode() {
			unchecked {
				#line 450 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return global::haxe.lang.Enum.paramsGetHashCode(8, new object[]{this.t, this.@params});
			}
			#line default
		}
		
		
		public override bool Equals(object other) {
			#line 450 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				#line 450 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return true;
			}
			
			#line 450 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			global::haxe.macro.ExprDef_ENew en = ( other as global::haxe.macro.ExprDef_ENew );
			#line 450 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (( en == null )) {
				#line 450 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 450 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.t) ), ((object) (en.t) ))) ) {
				#line 450 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 450 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.@params) ), ((object) (en.@params) ))) ) {
				#line 450 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 450 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return true;
		}
		#line default
		
		public override string toString() {
			#line 450 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return global::haxe.lang.Enum.paramsToString("ENew", new object[]{this.t, this.@params});
		}
		#line default
		
		public readonly object t;
		
		public readonly global::haxe.root.Array @params;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class ExprDef_EUnop : global::haxe.macro.ExprDef {
		
		public ExprDef_EUnop(global::haxe.macro.Unop op, bool postFix, object e) : base(9) {
			#line 463 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.op = op;
			#line 463 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.postFix = postFix;
			#line 463 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.e = e;
		}
		#line default
		
		public override global::haxe.root.Array getParams() {
			#line 463 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.root.Array(new object[]{this.op, this.postFix, this.e});
		}
		#line default
		
		public override string getTag() {
			#line 463 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "EUnop";
		}
		#line default
		
		public override int GetHashCode() {
			unchecked {
				#line 463 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return global::haxe.lang.Enum.paramsGetHashCode(9, new object[]{this.op, this.postFix, this.e});
			}
			#line default
		}
		
		
		public override bool Equals(object other) {
			#line 463 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				#line 463 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return true;
			}
			
			#line 463 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			global::haxe.macro.ExprDef_EUnop en = ( other as global::haxe.macro.ExprDef_EUnop );
			#line 463 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (( en == null )) {
				#line 463 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 463 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.op) ), ((object) (en.op) ))) ) {
				#line 463 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 463 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.postFix) ), ((object) (en.postFix) ))) ) {
				#line 463 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 463 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.e) ), ((object) (en.e) ))) ) {
				#line 463 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 463 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return true;
		}
		#line default
		
		public override string toString() {
			#line 463 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return global::haxe.lang.Enum.paramsToString("EUnop", new object[]{this.op, this.postFix, this.e});
		}
		#line default
		
		public readonly global::haxe.macro.Unop op;
		
		public readonly bool postFix;
		
		public readonly object e;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class ExprDef_EVars : global::haxe.macro.ExprDef {
		
		public ExprDef_EVars(global::haxe.root.Array vars) : base(10) {
			#line 468 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.vars = vars;
		}
		#line default
		
		public override global::haxe.root.Array getParams() {
			#line 468 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.root.Array(new object[]{this.vars});
		}
		#line default
		
		public override string getTag() {
			#line 468 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "EVars";
		}
		#line default
		
		public override int GetHashCode() {
			unchecked {
				#line 468 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return global::haxe.lang.Enum.paramsGetHashCode(10, new object[]{this.vars});
			}
			#line default
		}
		
		
		public override bool Equals(object other) {
			#line 468 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				#line 468 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return true;
			}
			
			#line 468 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			global::haxe.macro.ExprDef_EVars en = ( other as global::haxe.macro.ExprDef_EVars );
			#line 468 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (( en == null )) {
				#line 468 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 468 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.vars) ), ((object) (en.vars) ))) ) {
				#line 468 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 468 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return true;
		}
		#line default
		
		public override string toString() {
			#line 468 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return global::haxe.lang.Enum.paramsToString("EVars", new object[]{this.vars});
		}
		#line default
		
		public readonly global::haxe.root.Array vars;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class ExprDef_EFunction : global::haxe.macro.ExprDef {
		
		public ExprDef_EFunction(global::haxe.macro.FunctionKind kind, object f) : base(11) {
			#line 473 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.kind = kind;
			#line 473 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.f = f;
		}
		#line default
		
		public override global::haxe.root.Array getParams() {
			#line 473 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.root.Array(new object[]{this.kind, this.f});
		}
		#line default
		
		public override string getTag() {
			#line 473 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "EFunction";
		}
		#line default
		
		public override int GetHashCode() {
			unchecked {
				#line 473 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return global::haxe.lang.Enum.paramsGetHashCode(11, new object[]{this.kind, this.f});
			}
			#line default
		}
		
		
		public override bool Equals(object other) {
			#line 473 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				#line 473 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return true;
			}
			
			#line 473 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			global::haxe.macro.ExprDef_EFunction en = ( other as global::haxe.macro.ExprDef_EFunction );
			#line 473 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (( en == null )) {
				#line 473 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 473 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.kind) ), ((object) (en.kind) ))) ) {
				#line 473 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 473 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.f) ), ((object) (en.f) ))) ) {
				#line 473 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 473 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return true;
		}
		#line default
		
		public override string toString() {
			#line 473 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return global::haxe.lang.Enum.paramsToString("EFunction", new object[]{this.kind, this.f});
		}
		#line default
		
		public readonly global::haxe.macro.FunctionKind kind;
		
		public readonly object f;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class ExprDef_EBlock : global::haxe.macro.ExprDef {
		
		public ExprDef_EBlock(global::haxe.root.Array exprs) : base(12) {
			#line 478 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.exprs = exprs;
		}
		#line default
		
		public override global::haxe.root.Array getParams() {
			#line 478 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.root.Array(new object[]{this.exprs});
		}
		#line default
		
		public override string getTag() {
			#line 478 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "EBlock";
		}
		#line default
		
		public override int GetHashCode() {
			unchecked {
				#line 478 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return global::haxe.lang.Enum.paramsGetHashCode(12, new object[]{this.exprs});
			}
			#line default
		}
		
		
		public override bool Equals(object other) {
			#line 478 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				#line 478 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return true;
			}
			
			#line 478 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			global::haxe.macro.ExprDef_EBlock en = ( other as global::haxe.macro.ExprDef_EBlock );
			#line 478 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (( en == null )) {
				#line 478 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 478 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.exprs) ), ((object) (en.exprs) ))) ) {
				#line 478 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 478 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return true;
		}
		#line default
		
		public override string toString() {
			#line 478 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return global::haxe.lang.Enum.paramsToString("EBlock", new object[]{this.exprs});
		}
		#line default
		
		public readonly global::haxe.root.Array exprs;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class ExprDef_EFor : global::haxe.macro.ExprDef {
		
		public ExprDef_EFor(object it, object expr) : base(13) {
			#line 483 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.it = it;
			#line 483 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.expr = expr;
		}
		#line default
		
		public override global::haxe.root.Array getParams() {
			#line 483 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.root.Array(new object[]{this.it, this.expr});
		}
		#line default
		
		public override string getTag() {
			#line 483 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "EFor";
		}
		#line default
		
		public override int GetHashCode() {
			unchecked {
				#line 483 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return global::haxe.lang.Enum.paramsGetHashCode(13, new object[]{this.it, this.expr});
			}
			#line default
		}
		
		
		public override bool Equals(object other) {
			#line 483 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				#line 483 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return true;
			}
			
			#line 483 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			global::haxe.macro.ExprDef_EFor en = ( other as global::haxe.macro.ExprDef_EFor );
			#line 483 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (( en == null )) {
				#line 483 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 483 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.it) ), ((object) (en.it) ))) ) {
				#line 483 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 483 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.expr) ), ((object) (en.expr) ))) ) {
				#line 483 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 483 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return true;
		}
		#line default
		
		public override string toString() {
			#line 483 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return global::haxe.lang.Enum.paramsToString("EFor", new object[]{this.it, this.expr});
		}
		#line default
		
		public readonly object it;
		
		public readonly object expr;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class ExprDef_EIf : global::haxe.macro.ExprDef {
		
		public ExprDef_EIf(object econd, object eif, object eelse) : base(14) {
			#line 488 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.econd = econd;
			#line 488 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.eif = eif;
			#line 488 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.eelse = eelse;
		}
		#line default
		
		public override global::haxe.root.Array getParams() {
			#line 488 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.root.Array(new object[]{this.econd, this.eif, this.eelse});
		}
		#line default
		
		public override string getTag() {
			#line 488 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "EIf";
		}
		#line default
		
		public override int GetHashCode() {
			unchecked {
				#line 488 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return global::haxe.lang.Enum.paramsGetHashCode(14, new object[]{this.econd, this.eif, this.eelse});
			}
			#line default
		}
		
		
		public override bool Equals(object other) {
			#line 488 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				#line 488 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return true;
			}
			
			#line 488 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			global::haxe.macro.ExprDef_EIf en = ( other as global::haxe.macro.ExprDef_EIf );
			#line 488 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (( en == null )) {
				#line 488 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 488 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.econd) ), ((object) (en.econd) ))) ) {
				#line 488 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 488 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.eif) ), ((object) (en.eif) ))) ) {
				#line 488 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 488 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.eelse) ), ((object) (en.eelse) ))) ) {
				#line 488 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 488 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return true;
		}
		#line default
		
		public override string toString() {
			#line 488 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return global::haxe.lang.Enum.paramsToString("EIf", new object[]{this.econd, this.eif, this.eelse});
		}
		#line default
		
		public readonly object econd;
		
		public readonly object eif;
		
		public readonly object eelse;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class ExprDef_EWhile : global::haxe.macro.ExprDef {
		
		public ExprDef_EWhile(object econd, object e, bool normalWhile) : base(15) {
			#line 495 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.econd = econd;
			#line 495 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.e = e;
			#line 495 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.normalWhile = normalWhile;
		}
		#line default
		
		public override global::haxe.root.Array getParams() {
			#line 495 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.root.Array(new object[]{this.econd, this.e, this.normalWhile});
		}
		#line default
		
		public override string getTag() {
			#line 495 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "EWhile";
		}
		#line default
		
		public override int GetHashCode() {
			unchecked {
				#line 495 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return global::haxe.lang.Enum.paramsGetHashCode(15, new object[]{this.econd, this.e, this.normalWhile});
			}
			#line default
		}
		
		
		public override bool Equals(object other) {
			#line 495 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				#line 495 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return true;
			}
			
			#line 495 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			global::haxe.macro.ExprDef_EWhile en = ( other as global::haxe.macro.ExprDef_EWhile );
			#line 495 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (( en == null )) {
				#line 495 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 495 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.econd) ), ((object) (en.econd) ))) ) {
				#line 495 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 495 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.e) ), ((object) (en.e) ))) ) {
				#line 495 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 495 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.normalWhile) ), ((object) (en.normalWhile) ))) ) {
				#line 495 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 495 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return true;
		}
		#line default
		
		public override string toString() {
			#line 495 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return global::haxe.lang.Enum.paramsToString("EWhile", new object[]{this.econd, this.e, this.normalWhile});
		}
		#line default
		
		public readonly object econd;
		
		public readonly object e;
		
		public readonly bool normalWhile;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class ExprDef_ESwitch : global::haxe.macro.ExprDef {
		
		public ExprDef_ESwitch(object e, global::haxe.root.Array cases, object edef) : base(16) {
			#line 501 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.e = e;
			#line 501 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.cases = cases;
			#line 501 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.edef = edef;
		}
		#line default
		
		public override global::haxe.root.Array getParams() {
			#line 501 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.root.Array(new object[]{this.e, this.cases, this.edef});
		}
		#line default
		
		public override string getTag() {
			#line 501 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "ESwitch";
		}
		#line default
		
		public override int GetHashCode() {
			unchecked {
				#line 501 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return global::haxe.lang.Enum.paramsGetHashCode(16, new object[]{this.e, this.cases, this.edef});
			}
			#line default
		}
		
		
		public override bool Equals(object other) {
			#line 501 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				#line 501 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return true;
			}
			
			#line 501 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			global::haxe.macro.ExprDef_ESwitch en = ( other as global::haxe.macro.ExprDef_ESwitch );
			#line 501 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (( en == null )) {
				#line 501 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 501 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.e) ), ((object) (en.e) ))) ) {
				#line 501 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 501 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.cases) ), ((object) (en.cases) ))) ) {
				#line 501 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 501 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.edef) ), ((object) (en.edef) ))) ) {
				#line 501 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 501 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return true;
		}
		#line default
		
		public override string toString() {
			#line 501 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return global::haxe.lang.Enum.paramsToString("ESwitch", new object[]{this.e, this.cases, this.edef});
		}
		#line default
		
		public readonly object e;
		
		public readonly global::haxe.root.Array cases;
		
		public readonly object edef;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class ExprDef_ETry : global::haxe.macro.ExprDef {
		
		public ExprDef_ETry(object e, global::haxe.root.Array catches) : base(17) {
			#line 506 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.e = e;
			#line 506 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.catches = catches;
		}
		#line default
		
		public override global::haxe.root.Array getParams() {
			#line 506 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.root.Array(new object[]{this.e, this.catches});
		}
		#line default
		
		public override string getTag() {
			#line 506 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "ETry";
		}
		#line default
		
		public override int GetHashCode() {
			unchecked {
				#line 506 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return global::haxe.lang.Enum.paramsGetHashCode(17, new object[]{this.e, this.catches});
			}
			#line default
		}
		
		
		public override bool Equals(object other) {
			#line 506 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				#line 506 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return true;
			}
			
			#line 506 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			global::haxe.macro.ExprDef_ETry en = ( other as global::haxe.macro.ExprDef_ETry );
			#line 506 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (( en == null )) {
				#line 506 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 506 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.e) ), ((object) (en.e) ))) ) {
				#line 506 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 506 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.catches) ), ((object) (en.catches) ))) ) {
				#line 506 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 506 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return true;
		}
		#line default
		
		public override string toString() {
			#line 506 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return global::haxe.lang.Enum.paramsToString("ETry", new object[]{this.e, this.catches});
		}
		#line default
		
		public readonly object e;
		
		public readonly global::haxe.root.Array catches;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class ExprDef_EReturn : global::haxe.macro.ExprDef {
		
		public ExprDef_EReturn(object e) : base(18) {
			#line 511 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.e = e;
		}
		#line default
		
		public override global::haxe.root.Array getParams() {
			#line 511 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.root.Array(new object[]{this.e});
		}
		#line default
		
		public override string getTag() {
			#line 511 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "EReturn";
		}
		#line default
		
		public override int GetHashCode() {
			unchecked {
				#line 511 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return global::haxe.lang.Enum.paramsGetHashCode(18, new object[]{this.e});
			}
			#line default
		}
		
		
		public override bool Equals(object other) {
			#line 511 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				#line 511 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return true;
			}
			
			#line 511 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			global::haxe.macro.ExprDef_EReturn en = ( other as global::haxe.macro.ExprDef_EReturn );
			#line 511 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (( en == null )) {
				#line 511 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 511 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.e) ), ((object) (en.e) ))) ) {
				#line 511 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 511 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return true;
		}
		#line default
		
		public override string toString() {
			#line 511 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return global::haxe.lang.Enum.paramsToString("EReturn", new object[]{this.e});
		}
		#line default
		
		public readonly object e;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class ExprDef_EBreak : global::haxe.macro.ExprDef {
		
		public ExprDef_EBreak() : base(19) {
		}
		
		
		public override string getTag() {
			#line 516 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "EBreak";
		}
		#line default
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class ExprDef_EContinue : global::haxe.macro.ExprDef {
		
		public ExprDef_EContinue() : base(20) {
		}
		
		
		public override string getTag() {
			#line 521 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "EContinue";
		}
		#line default
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class ExprDef_EUntyped : global::haxe.macro.ExprDef {
		
		public ExprDef_EUntyped(object e) : base(21) {
			#line 526 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.e = e;
		}
		#line default
		
		public override global::haxe.root.Array getParams() {
			#line 526 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.root.Array(new object[]{this.e});
		}
		#line default
		
		public override string getTag() {
			#line 526 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "EUntyped";
		}
		#line default
		
		public override int GetHashCode() {
			unchecked {
				#line 526 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return global::haxe.lang.Enum.paramsGetHashCode(21, new object[]{this.e});
			}
			#line default
		}
		
		
		public override bool Equals(object other) {
			#line 526 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				#line 526 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return true;
			}
			
			#line 526 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			global::haxe.macro.ExprDef_EUntyped en = ( other as global::haxe.macro.ExprDef_EUntyped );
			#line 526 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (( en == null )) {
				#line 526 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 526 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.e) ), ((object) (en.e) ))) ) {
				#line 526 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 526 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return true;
		}
		#line default
		
		public override string toString() {
			#line 526 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return global::haxe.lang.Enum.paramsToString("EUntyped", new object[]{this.e});
		}
		#line default
		
		public readonly object e;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class ExprDef_EThrow : global::haxe.macro.ExprDef {
		
		public ExprDef_EThrow(object e) : base(22) {
			#line 531 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.e = e;
		}
		#line default
		
		public override global::haxe.root.Array getParams() {
			#line 531 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.root.Array(new object[]{this.e});
		}
		#line default
		
		public override string getTag() {
			#line 531 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "EThrow";
		}
		#line default
		
		public override int GetHashCode() {
			unchecked {
				#line 531 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return global::haxe.lang.Enum.paramsGetHashCode(22, new object[]{this.e});
			}
			#line default
		}
		
		
		public override bool Equals(object other) {
			#line 531 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				#line 531 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return true;
			}
			
			#line 531 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			global::haxe.macro.ExprDef_EThrow en = ( other as global::haxe.macro.ExprDef_EThrow );
			#line 531 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (( en == null )) {
				#line 531 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 531 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.e) ), ((object) (en.e) ))) ) {
				#line 531 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 531 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return true;
		}
		#line default
		
		public override string toString() {
			#line 531 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return global::haxe.lang.Enum.paramsToString("EThrow", new object[]{this.e});
		}
		#line default
		
		public readonly object e;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class ExprDef_ECast : global::haxe.macro.ExprDef {
		
		public ExprDef_ECast(object e, global::haxe.macro.ComplexType t) : base(23) {
			#line 536 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.e = e;
			#line 536 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.t = t;
		}
		#line default
		
		public override global::haxe.root.Array getParams() {
			#line 536 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.root.Array(new object[]{this.e, this.t});
		}
		#line default
		
		public override string getTag() {
			#line 536 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "ECast";
		}
		#line default
		
		public override int GetHashCode() {
			unchecked {
				#line 536 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return global::haxe.lang.Enum.paramsGetHashCode(23, new object[]{this.e, this.t});
			}
			#line default
		}
		
		
		public override bool Equals(object other) {
			#line 536 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				#line 536 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return true;
			}
			
			#line 536 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			global::haxe.macro.ExprDef_ECast en = ( other as global::haxe.macro.ExprDef_ECast );
			#line 536 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (( en == null )) {
				#line 536 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 536 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.e) ), ((object) (en.e) ))) ) {
				#line 536 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 536 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.t) ), ((object) (en.t) ))) ) {
				#line 536 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 536 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return true;
		}
		#line default
		
		public override string toString() {
			#line 536 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return global::haxe.lang.Enum.paramsToString("ECast", new object[]{this.e, this.t});
		}
		#line default
		
		public readonly object e;
		
		public readonly global::haxe.macro.ComplexType t;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class ExprDef_EDisplay : global::haxe.macro.ExprDef {
		
		public ExprDef_EDisplay(object e, global::haxe.macro.DisplayKind displayKind) : base(24) {
			#line 541 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.e = e;
			#line 541 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.displayKind = displayKind;
		}
		#line default
		
		public override global::haxe.root.Array getParams() {
			#line 541 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.root.Array(new object[]{this.e, this.displayKind});
		}
		#line default
		
		public override string getTag() {
			#line 541 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "EDisplay";
		}
		#line default
		
		public override int GetHashCode() {
			unchecked {
				#line 541 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return global::haxe.lang.Enum.paramsGetHashCode(24, new object[]{this.e, this.displayKind});
			}
			#line default
		}
		
		
		public override bool Equals(object other) {
			#line 541 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				#line 541 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return true;
			}
			
			#line 541 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			global::haxe.macro.ExprDef_EDisplay en = ( other as global::haxe.macro.ExprDef_EDisplay );
			#line 541 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (( en == null )) {
				#line 541 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 541 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.e) ), ((object) (en.e) ))) ) {
				#line 541 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 541 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.displayKind) ), ((object) (en.displayKind) ))) ) {
				#line 541 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 541 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return true;
		}
		#line default
		
		public override string toString() {
			#line 541 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return global::haxe.lang.Enum.paramsToString("EDisplay", new object[]{this.e, this.displayKind});
		}
		#line default
		
		public readonly object e;
		
		public readonly global::haxe.macro.DisplayKind displayKind;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class ExprDef_EDisplayNew : global::haxe.macro.ExprDef {
		
		public ExprDef_EDisplayNew(object t) : base(25) {
			#line 546 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.t = t;
		}
		#line default
		
		public override global::haxe.root.Array getParams() {
			#line 546 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.root.Array(new object[]{this.t});
		}
		#line default
		
		public override string getTag() {
			#line 546 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "EDisplayNew";
		}
		#line default
		
		public override int GetHashCode() {
			unchecked {
				#line 546 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return global::haxe.lang.Enum.paramsGetHashCode(25, new object[]{this.t});
			}
			#line default
		}
		
		
		public override bool Equals(object other) {
			#line 546 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				#line 546 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return true;
			}
			
			#line 546 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			global::haxe.macro.ExprDef_EDisplayNew en = ( other as global::haxe.macro.ExprDef_EDisplayNew );
			#line 546 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (( en == null )) {
				#line 546 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 546 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.t) ), ((object) (en.t) ))) ) {
				#line 546 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 546 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return true;
		}
		#line default
		
		public override string toString() {
			#line 546 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return global::haxe.lang.Enum.paramsToString("EDisplayNew", new object[]{this.t});
		}
		#line default
		
		public readonly object t;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class ExprDef_ETernary : global::haxe.macro.ExprDef {
		
		public ExprDef_ETernary(object econd, object eif, object eelse) : base(26) {
			#line 551 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.econd = econd;
			#line 551 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.eif = eif;
			#line 551 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.eelse = eelse;
		}
		#line default
		
		public override global::haxe.root.Array getParams() {
			#line 551 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.root.Array(new object[]{this.econd, this.eif, this.eelse});
		}
		#line default
		
		public override string getTag() {
			#line 551 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "ETernary";
		}
		#line default
		
		public override int GetHashCode() {
			unchecked {
				#line 551 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return global::haxe.lang.Enum.paramsGetHashCode(26, new object[]{this.econd, this.eif, this.eelse});
			}
			#line default
		}
		
		
		public override bool Equals(object other) {
			#line 551 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				#line 551 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return true;
			}
			
			#line 551 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			global::haxe.macro.ExprDef_ETernary en = ( other as global::haxe.macro.ExprDef_ETernary );
			#line 551 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (( en == null )) {
				#line 551 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 551 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.econd) ), ((object) (en.econd) ))) ) {
				#line 551 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 551 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.eif) ), ((object) (en.eif) ))) ) {
				#line 551 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 551 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.eelse) ), ((object) (en.eelse) ))) ) {
				#line 551 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 551 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return true;
		}
		#line default
		
		public override string toString() {
			#line 551 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return global::haxe.lang.Enum.paramsToString("ETernary", new object[]{this.econd, this.eif, this.eelse});
		}
		#line default
		
		public readonly object econd;
		
		public readonly object eif;
		
		public readonly object eelse;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class ExprDef_ECheckType : global::haxe.macro.ExprDef {
		
		public ExprDef_ECheckType(object e, global::haxe.macro.ComplexType t) : base(27) {
			#line 556 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.e = e;
			#line 556 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.t = t;
		}
		#line default
		
		public override global::haxe.root.Array getParams() {
			#line 556 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.root.Array(new object[]{this.e, this.t});
		}
		#line default
		
		public override string getTag() {
			#line 556 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "ECheckType";
		}
		#line default
		
		public override int GetHashCode() {
			unchecked {
				#line 556 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return global::haxe.lang.Enum.paramsGetHashCode(27, new object[]{this.e, this.t});
			}
			#line default
		}
		
		
		public override bool Equals(object other) {
			#line 556 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				#line 556 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return true;
			}
			
			#line 556 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			global::haxe.macro.ExprDef_ECheckType en = ( other as global::haxe.macro.ExprDef_ECheckType );
			#line 556 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (( en == null )) {
				#line 556 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 556 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.e) ), ((object) (en.e) ))) ) {
				#line 556 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 556 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.t) ), ((object) (en.t) ))) ) {
				#line 556 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 556 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return true;
		}
		#line default
		
		public override string toString() {
			#line 556 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return global::haxe.lang.Enum.paramsToString("ECheckType", new object[]{this.e, this.t});
		}
		#line default
		
		public readonly object e;
		
		public readonly global::haxe.macro.ComplexType t;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class ExprDef_EMeta : global::haxe.macro.ExprDef {
		
		public ExprDef_EMeta(object s, object e) : base(28) {
			#line 561 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.s = s;
			#line 561 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.e = e;
		}
		#line default
		
		public override global::haxe.root.Array getParams() {
			#line 561 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.root.Array(new object[]{this.s, this.e});
		}
		#line default
		
		public override string getTag() {
			#line 561 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "EMeta";
		}
		#line default
		
		public override int GetHashCode() {
			unchecked {
				#line 561 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return global::haxe.lang.Enum.paramsGetHashCode(28, new object[]{this.s, this.e});
			}
			#line default
		}
		
		
		public override bool Equals(object other) {
			#line 561 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				#line 561 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return true;
			}
			
			#line 561 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			global::haxe.macro.ExprDef_EMeta en = ( other as global::haxe.macro.ExprDef_EMeta );
			#line 561 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (( en == null )) {
				#line 561 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 561 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.s) ), ((object) (en.s) ))) ) {
				#line 561 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 561 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.e) ), ((object) (en.e) ))) ) {
				#line 561 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 561 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return true;
		}
		#line default
		
		public override string toString() {
			#line 561 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return global::haxe.lang.Enum.paramsToString("EMeta", new object[]{this.s, this.e});
		}
		#line default
		
		public readonly object s;
		
		public readonly object e;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public class DisplayKind : global::haxe.lang.Enum {
		
		protected DisplayKind(int index) : base(index) {
		}
		
		
		public static readonly global::haxe.macro.DisplayKind DKCall = new global::haxe.macro.DisplayKind_DKCall();
		
		public static readonly global::haxe.macro.DisplayKind DKDot = new global::haxe.macro.DisplayKind_DKDot();
		
		public static readonly global::haxe.macro.DisplayKind DKStructure = new global::haxe.macro.DisplayKind_DKStructure();
		
		public static readonly global::haxe.macro.DisplayKind DKMarked = new global::haxe.macro.DisplayKind_DKMarked();
		
		public static global::haxe.macro.DisplayKind DKPattern(bool outermost) {
			#line 569 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.macro.DisplayKind_DKPattern(outermost);
		}
		#line default
		
		protected static readonly string[] __hx_constructs = new string[]{"DKCall", "DKDot", "DKStructure", "DKMarked", "DKPattern"};
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class DisplayKind_DKCall : global::haxe.macro.DisplayKind {
		
		public DisplayKind_DKCall() : base(0) {
		}
		
		
		public override string getTag() {
			#line 565 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "DKCall";
		}
		#line default
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class DisplayKind_DKDot : global::haxe.macro.DisplayKind {
		
		public DisplayKind_DKDot() : base(1) {
		}
		
		
		public override string getTag() {
			#line 566 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "DKDot";
		}
		#line default
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class DisplayKind_DKStructure : global::haxe.macro.DisplayKind {
		
		public DisplayKind_DKStructure() : base(2) {
		}
		
		
		public override string getTag() {
			#line 567 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "DKStructure";
		}
		#line default
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class DisplayKind_DKMarked : global::haxe.macro.DisplayKind {
		
		public DisplayKind_DKMarked() : base(3) {
		}
		
		
		public override string getTag() {
			#line 568 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "DKMarked";
		}
		#line default
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class DisplayKind_DKPattern : global::haxe.macro.DisplayKind {
		
		public DisplayKind_DKPattern(bool outermost) : base(4) {
			#line 569 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.outermost = outermost;
		}
		#line default
		
		public override global::haxe.root.Array getParams() {
			#line 569 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.root.Array(new object[]{this.outermost});
		}
		#line default
		
		public override string getTag() {
			#line 569 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "DKPattern";
		}
		#line default
		
		public override int GetHashCode() {
			unchecked {
				#line 569 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return global::haxe.lang.Enum.paramsGetHashCode(4, new object[]{this.outermost});
			}
			#line default
		}
		
		
		public override bool Equals(object other) {
			#line 569 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				#line 569 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return true;
			}
			
			#line 569 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			global::haxe.macro.DisplayKind_DKPattern en = ( other as global::haxe.macro.DisplayKind_DKPattern );
			#line 569 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (( en == null )) {
				#line 569 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 569 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.outermost) ), ((object) (en.outermost) ))) ) {
				#line 569 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 569 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return true;
		}
		#line default
		
		public override string toString() {
			#line 569 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return global::haxe.lang.Enum.paramsToString("DKPattern", new object[]{this.outermost});
		}
		#line default
		
		public readonly bool outermost;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public class ComplexType : global::haxe.lang.Enum {
		
		protected ComplexType(int index) : base(index) {
		}
		
		
		public static global::haxe.macro.ComplexType TPath(object p) {
			#line 579 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.macro.ComplexType_TPath(p);
		}
		#line default
		
		public static global::haxe.macro.ComplexType TFunction(global::haxe.root.Array args, global::haxe.macro.ComplexType ret) {
			#line 585 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.macro.ComplexType_TFunction(args, ret);
		}
		#line default
		
		public static global::haxe.macro.ComplexType TAnonymous(global::haxe.root.Array fields) {
			#line 591 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.macro.ComplexType_TAnonymous(fields);
		}
		#line default
		
		public static global::haxe.macro.ComplexType TParent(global::haxe.macro.ComplexType t) {
			#line 597 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.macro.ComplexType_TParent(t);
		}
		#line default
		
		public static global::haxe.macro.ComplexType TExtend(global::haxe.root.Array p, global::haxe.root.Array fields) {
			#line 604 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.macro.ComplexType_TExtend(p, fields);
		}
		#line default
		
		public static global::haxe.macro.ComplexType TOptional(global::haxe.macro.ComplexType t) {
			#line 609 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.macro.ComplexType_TOptional(t);
		}
		#line default
		
		public static global::haxe.macro.ComplexType TNamed(string n, global::haxe.macro.ComplexType t) {
			#line 614 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.macro.ComplexType_TNamed(n, t);
		}
		#line default
		
		public static global::haxe.macro.ComplexType TIntersection(global::haxe.root.Array tl) {
			#line 619 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.macro.ComplexType_TIntersection(tl);
		}
		#line default
		
		protected static readonly string[] __hx_constructs = new string[]{"TPath", "TFunction", "TAnonymous", "TParent", "TExtend", "TOptional", "TNamed", "TIntersection"};
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class ComplexType_TPath : global::haxe.macro.ComplexType {
		
		public ComplexType_TPath(object p) : base(0) {
			#line 579 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.p = p;
		}
		#line default
		
		public override global::haxe.root.Array getParams() {
			#line 579 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.root.Array(new object[]{this.p});
		}
		#line default
		
		public override string getTag() {
			#line 579 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "TPath";
		}
		#line default
		
		public override int GetHashCode() {
			#line 579 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return global::haxe.lang.Enum.paramsGetHashCode(0, new object[]{this.p});
		}
		#line default
		
		public override bool Equals(object other) {
			#line 579 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				#line 579 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return true;
			}
			
			#line 579 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			global::haxe.macro.ComplexType_TPath en = ( other as global::haxe.macro.ComplexType_TPath );
			#line 579 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (( en == null )) {
				#line 579 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 579 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.p) ), ((object) (en.p) ))) ) {
				#line 579 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 579 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return true;
		}
		#line default
		
		public override string toString() {
			#line 579 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return global::haxe.lang.Enum.paramsToString("TPath", new object[]{this.p});
		}
		#line default
		
		public readonly object p;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class ComplexType_TFunction : global::haxe.macro.ComplexType {
		
		public ComplexType_TFunction(global::haxe.root.Array args, global::haxe.macro.ComplexType ret) : base(1) {
			#line 585 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.args = args;
			#line 585 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.ret = ret;
		}
		#line default
		
		public override global::haxe.root.Array getParams() {
			#line 585 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.root.Array(new object[]{this.args, this.ret});
		}
		#line default
		
		public override string getTag() {
			#line 585 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "TFunction";
		}
		#line default
		
		public override int GetHashCode() {
			unchecked {
				#line 585 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return global::haxe.lang.Enum.paramsGetHashCode(1, new object[]{this.args, this.ret});
			}
			#line default
		}
		
		
		public override bool Equals(object other) {
			#line 585 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				#line 585 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return true;
			}
			
			#line 585 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			global::haxe.macro.ComplexType_TFunction en = ( other as global::haxe.macro.ComplexType_TFunction );
			#line 585 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (( en == null )) {
				#line 585 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 585 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.args) ), ((object) (en.args) ))) ) {
				#line 585 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 585 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.ret) ), ((object) (en.ret) ))) ) {
				#line 585 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 585 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return true;
		}
		#line default
		
		public override string toString() {
			#line 585 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return global::haxe.lang.Enum.paramsToString("TFunction", new object[]{this.args, this.ret});
		}
		#line default
		
		public readonly global::haxe.root.Array args;
		
		public readonly global::haxe.macro.ComplexType ret;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class ComplexType_TAnonymous : global::haxe.macro.ComplexType {
		
		public ComplexType_TAnonymous(global::haxe.root.Array fields) : base(2) {
			#line 591 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.fields = fields;
		}
		#line default
		
		public override global::haxe.root.Array getParams() {
			#line 591 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.root.Array(new object[]{this.fields});
		}
		#line default
		
		public override string getTag() {
			#line 591 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "TAnonymous";
		}
		#line default
		
		public override int GetHashCode() {
			unchecked {
				#line 591 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return global::haxe.lang.Enum.paramsGetHashCode(2, new object[]{this.fields});
			}
			#line default
		}
		
		
		public override bool Equals(object other) {
			#line 591 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				#line 591 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return true;
			}
			
			#line 591 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			global::haxe.macro.ComplexType_TAnonymous en = ( other as global::haxe.macro.ComplexType_TAnonymous );
			#line 591 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (( en == null )) {
				#line 591 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 591 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.fields) ), ((object) (en.fields) ))) ) {
				#line 591 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 591 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return true;
		}
		#line default
		
		public override string toString() {
			#line 591 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return global::haxe.lang.Enum.paramsToString("TAnonymous", new object[]{this.fields});
		}
		#line default
		
		public readonly global::haxe.root.Array fields;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class ComplexType_TParent : global::haxe.macro.ComplexType {
		
		public ComplexType_TParent(global::haxe.macro.ComplexType t) : base(3) {
			#line 597 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.t = t;
		}
		#line default
		
		public override global::haxe.root.Array getParams() {
			#line 597 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.root.Array(new object[]{this.t});
		}
		#line default
		
		public override string getTag() {
			#line 597 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "TParent";
		}
		#line default
		
		public override int GetHashCode() {
			unchecked {
				#line 597 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return global::haxe.lang.Enum.paramsGetHashCode(3, new object[]{this.t});
			}
			#line default
		}
		
		
		public override bool Equals(object other) {
			#line 597 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				#line 597 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return true;
			}
			
			#line 597 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			global::haxe.macro.ComplexType_TParent en = ( other as global::haxe.macro.ComplexType_TParent );
			#line 597 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (( en == null )) {
				#line 597 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 597 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.t) ), ((object) (en.t) ))) ) {
				#line 597 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 597 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return true;
		}
		#line default
		
		public override string toString() {
			#line 597 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return global::haxe.lang.Enum.paramsToString("TParent", new object[]{this.t});
		}
		#line default
		
		public readonly global::haxe.macro.ComplexType t;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class ComplexType_TExtend : global::haxe.macro.ComplexType {
		
		public ComplexType_TExtend(global::haxe.root.Array p, global::haxe.root.Array fields) : base(4) {
			#line 604 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.p = p;
			#line 604 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.fields = fields;
		}
		#line default
		
		public override global::haxe.root.Array getParams() {
			#line 604 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.root.Array(new object[]{this.p, this.fields});
		}
		#line default
		
		public override string getTag() {
			#line 604 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "TExtend";
		}
		#line default
		
		public override int GetHashCode() {
			unchecked {
				#line 604 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return global::haxe.lang.Enum.paramsGetHashCode(4, new object[]{this.p, this.fields});
			}
			#line default
		}
		
		
		public override bool Equals(object other) {
			#line 604 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				#line 604 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return true;
			}
			
			#line 604 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			global::haxe.macro.ComplexType_TExtend en = ( other as global::haxe.macro.ComplexType_TExtend );
			#line 604 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (( en == null )) {
				#line 604 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 604 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.p) ), ((object) (en.p) ))) ) {
				#line 604 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 604 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.fields) ), ((object) (en.fields) ))) ) {
				#line 604 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 604 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return true;
		}
		#line default
		
		public override string toString() {
			#line 604 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return global::haxe.lang.Enum.paramsToString("TExtend", new object[]{this.p, this.fields});
		}
		#line default
		
		public readonly global::haxe.root.Array p;
		
		public readonly global::haxe.root.Array fields;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class ComplexType_TOptional : global::haxe.macro.ComplexType {
		
		public ComplexType_TOptional(global::haxe.macro.ComplexType t) : base(5) {
			#line 609 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.t = t;
		}
		#line default
		
		public override global::haxe.root.Array getParams() {
			#line 609 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.root.Array(new object[]{this.t});
		}
		#line default
		
		public override string getTag() {
			#line 609 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "TOptional";
		}
		#line default
		
		public override int GetHashCode() {
			unchecked {
				#line 609 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return global::haxe.lang.Enum.paramsGetHashCode(5, new object[]{this.t});
			}
			#line default
		}
		
		
		public override bool Equals(object other) {
			#line 609 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				#line 609 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return true;
			}
			
			#line 609 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			global::haxe.macro.ComplexType_TOptional en = ( other as global::haxe.macro.ComplexType_TOptional );
			#line 609 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (( en == null )) {
				#line 609 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 609 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.t) ), ((object) (en.t) ))) ) {
				#line 609 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 609 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return true;
		}
		#line default
		
		public override string toString() {
			#line 609 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return global::haxe.lang.Enum.paramsToString("TOptional", new object[]{this.t});
		}
		#line default
		
		public readonly global::haxe.macro.ComplexType t;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class ComplexType_TNamed : global::haxe.macro.ComplexType {
		
		public ComplexType_TNamed(string n, global::haxe.macro.ComplexType t) : base(6) {
			#line 614 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.n = n;
			#line 614 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.t = t;
		}
		#line default
		
		public override global::haxe.root.Array getParams() {
			#line 614 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.root.Array(new object[]{this.n, this.t});
		}
		#line default
		
		public override string getTag() {
			#line 614 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "TNamed";
		}
		#line default
		
		public override int GetHashCode() {
			unchecked {
				#line 614 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return global::haxe.lang.Enum.paramsGetHashCode(6, new object[]{this.n, this.t});
			}
			#line default
		}
		
		
		public override bool Equals(object other) {
			#line 614 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				#line 614 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return true;
			}
			
			#line 614 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			global::haxe.macro.ComplexType_TNamed en = ( other as global::haxe.macro.ComplexType_TNamed );
			#line 614 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (( en == null )) {
				#line 614 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 614 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.n) ), ((object) (en.n) ))) ) {
				#line 614 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 614 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.t) ), ((object) (en.t) ))) ) {
				#line 614 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 614 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return true;
		}
		#line default
		
		public override string toString() {
			#line 614 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return global::haxe.lang.Enum.paramsToString("TNamed", new object[]{this.n, this.t});
		}
		#line default
		
		public readonly string n;
		
		public readonly global::haxe.macro.ComplexType t;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class ComplexType_TIntersection : global::haxe.macro.ComplexType {
		
		public ComplexType_TIntersection(global::haxe.root.Array tl) : base(7) {
			#line 619 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.tl = tl;
		}
		#line default
		
		public override global::haxe.root.Array getParams() {
			#line 619 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.root.Array(new object[]{this.tl});
		}
		#line default
		
		public override string getTag() {
			#line 619 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "TIntersection";
		}
		#line default
		
		public override int GetHashCode() {
			unchecked {
				#line 619 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return global::haxe.lang.Enum.paramsGetHashCode(7, new object[]{this.tl});
			}
			#line default
		}
		
		
		public override bool Equals(object other) {
			#line 619 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				#line 619 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return true;
			}
			
			#line 619 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			global::haxe.macro.ComplexType_TIntersection en = ( other as global::haxe.macro.ComplexType_TIntersection );
			#line 619 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (( en == null )) {
				#line 619 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 619 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.tl) ), ((object) (en.tl) ))) ) {
				#line 619 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 619 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return true;
		}
		#line default
		
		public override string toString() {
			#line 619 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return global::haxe.lang.Enum.paramsToString("TIntersection", new object[]{this.tl});
		}
		#line default
		
		public readonly global::haxe.root.Array tl;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public class TypeParam : global::haxe.lang.Enum {
		
		protected TypeParam(int index) : base(index) {
		}
		
		
		public static global::haxe.macro.TypeParam TPType(global::haxe.macro.ComplexType t) {
			#line 659 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.macro.TypeParam_TPType(t);
		}
		#line default
		
		public static global::haxe.macro.TypeParam TPExpr(object e) {
			#line 664 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.macro.TypeParam_TPExpr(e);
		}
		#line default
		
		protected static readonly string[] __hx_constructs = new string[]{"TPType", "TPExpr"};
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class TypeParam_TPType : global::haxe.macro.TypeParam {
		
		public TypeParam_TPType(global::haxe.macro.ComplexType t) : base(0) {
			#line 659 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.t = t;
		}
		#line default
		
		public override global::haxe.root.Array getParams() {
			#line 659 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.root.Array(new object[]{this.t});
		}
		#line default
		
		public override string getTag() {
			#line 659 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "TPType";
		}
		#line default
		
		public override int GetHashCode() {
			#line 659 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return global::haxe.lang.Enum.paramsGetHashCode(0, new object[]{this.t});
		}
		#line default
		
		public override bool Equals(object other) {
			#line 659 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				#line 659 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return true;
			}
			
			#line 659 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			global::haxe.macro.TypeParam_TPType en = ( other as global::haxe.macro.TypeParam_TPType );
			#line 659 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (( en == null )) {
				#line 659 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 659 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.t) ), ((object) (en.t) ))) ) {
				#line 659 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 659 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return true;
		}
		#line default
		
		public override string toString() {
			#line 659 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return global::haxe.lang.Enum.paramsToString("TPType", new object[]{this.t});
		}
		#line default
		
		public readonly global::haxe.macro.ComplexType t;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class TypeParam_TPExpr : global::haxe.macro.TypeParam {
		
		public TypeParam_TPExpr(object e) : base(1) {
			#line 664 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.e = e;
		}
		#line default
		
		public override global::haxe.root.Array getParams() {
			#line 664 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.root.Array(new object[]{this.e});
		}
		#line default
		
		public override string getTag() {
			#line 664 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "TPExpr";
		}
		#line default
		
		public override int GetHashCode() {
			unchecked {
				#line 664 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return global::haxe.lang.Enum.paramsGetHashCode(1, new object[]{this.e});
			}
			#line default
		}
		
		
		public override bool Equals(object other) {
			#line 664 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				#line 664 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return true;
			}
			
			#line 664 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			global::haxe.macro.TypeParam_TPExpr en = ( other as global::haxe.macro.TypeParam_TPExpr );
			#line 664 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (( en == null )) {
				#line 664 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 664 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.e) ), ((object) (en.e) ))) ) {
				#line 664 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 664 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return true;
		}
		#line default
		
		public override string toString() {
			#line 664 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return global::haxe.lang.Enum.paramsToString("TPExpr", new object[]{this.e});
		}
		#line default
		
		public readonly object e;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public class Access : global::haxe.lang.Enum {
		
		protected Access(int index) : base(index) {
		}
		
		
		public static readonly global::haxe.macro.Access APublic = new global::haxe.macro.Access_APublic();
		
		public static readonly global::haxe.macro.Access APrivate = new global::haxe.macro.Access_APrivate();
		
		public static readonly global::haxe.macro.Access AStatic = new global::haxe.macro.Access_AStatic();
		
		public static readonly global::haxe.macro.Access AOverride = new global::haxe.macro.Access_AOverride();
		
		public static readonly global::haxe.macro.Access ADynamic = new global::haxe.macro.Access_ADynamic();
		
		public static readonly global::haxe.macro.Access AInline = new global::haxe.macro.Access_AInline();
		
		public static readonly global::haxe.macro.Access AMacro = new global::haxe.macro.Access_AMacro();
		
		public static readonly global::haxe.macro.Access AFinal = new global::haxe.macro.Access_AFinal();
		
		public static readonly global::haxe.macro.Access AExtern = new global::haxe.macro.Access_AExtern();
		
		protected static readonly string[] __hx_constructs = new string[]{"APublic", "APrivate", "AStatic", "AOverride", "ADynamic", "AInline", "AMacro", "AFinal", "AExtern"};
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class Access_APublic : global::haxe.macro.Access {
		
		public Access_APublic() : base(0) {
		}
		
		
		public override string getTag() {
			#line 818 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "APublic";
		}
		#line default
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class Access_APrivate : global::haxe.macro.Access {
		
		public Access_APrivate() : base(1) {
		}
		
		
		public override string getTag() {
			#line 825 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "APrivate";
		}
		#line default
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class Access_AStatic : global::haxe.macro.Access {
		
		public Access_AStatic() : base(2) {
		}
		
		
		public override string getTag() {
			#line 830 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "AStatic";
		}
		#line default
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class Access_AOverride : global::haxe.macro.Access {
		
		public Access_AOverride() : base(3) {
		}
		
		
		public override string getTag() {
			#line 836 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "AOverride";
		}
		#line default
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class Access_ADynamic : global::haxe.macro.Access {
		
		public Access_ADynamic() : base(4) {
		}
		
		
		public override string getTag() {
			#line 842 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "ADynamic";
		}
		#line default
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class Access_AInline : global::haxe.macro.Access {
		
		public Access_AInline() : base(5) {
		}
		
		
		public override string getTag() {
			#line 849 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "AInline";
		}
		#line default
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class Access_AMacro : global::haxe.macro.Access {
		
		public Access_AMacro() : base(6) {
		}
		
		
		public override string getTag() {
			#line 855 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "AMacro";
		}
		#line default
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class Access_AFinal : global::haxe.macro.Access {
		
		public Access_AFinal() : base(7) {
		}
		
		
		public override string getTag() {
			#line 861 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "AFinal";
		}
		#line default
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class Access_AExtern : global::haxe.macro.Access {
		
		public Access_AExtern() : base(8) {
		}
		
		
		public override string getTag() {
			#line 866 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "AExtern";
		}
		#line default
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public class FieldType : global::haxe.lang.Enum {
		
		protected FieldType(int index) : base(index) {
		}
		
		
		public static global::haxe.macro.FieldType FVar(global::haxe.macro.ComplexType t, object e) {
			#line 876 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.macro.FieldType_FVar(t, e);
		}
		#line default
		
		public static global::haxe.macro.FieldType FFun(object f) {
			#line 881 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.macro.FieldType_FFun(f);
		}
		#line default
		
		public static global::haxe.macro.FieldType FProp(string @get, string @set, global::haxe.macro.ComplexType t, object e) {
			#line 886 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.macro.FieldType_FProp(@get, @set, t, e);
		}
		#line default
		
		protected static readonly string[] __hx_constructs = new string[]{"FVar", "FFun", "FProp"};
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class FieldType_FVar : global::haxe.macro.FieldType {
		
		public FieldType_FVar(global::haxe.macro.ComplexType t, object e) : base(0) {
			#line 876 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.t = t;
			#line 876 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.e = e;
		}
		#line default
		
		public override global::haxe.root.Array getParams() {
			#line 876 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.root.Array(new object[]{this.t, this.e});
		}
		#line default
		
		public override string getTag() {
			#line 876 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "FVar";
		}
		#line default
		
		public override int GetHashCode() {
			#line 876 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return global::haxe.lang.Enum.paramsGetHashCode(0, new object[]{this.t, this.e});
		}
		#line default
		
		public override bool Equals(object other) {
			#line 876 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				#line 876 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return true;
			}
			
			#line 876 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			global::haxe.macro.FieldType_FVar en = ( other as global::haxe.macro.FieldType_FVar );
			#line 876 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (( en == null )) {
				#line 876 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 876 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.t) ), ((object) (en.t) ))) ) {
				#line 876 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 876 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.e) ), ((object) (en.e) ))) ) {
				#line 876 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 876 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return true;
		}
		#line default
		
		public override string toString() {
			#line 876 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return global::haxe.lang.Enum.paramsToString("FVar", new object[]{this.t, this.e});
		}
		#line default
		
		public readonly global::haxe.macro.ComplexType t;
		
		public readonly object e;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class FieldType_FFun : global::haxe.macro.FieldType {
		
		public FieldType_FFun(object f) : base(1) {
			#line 881 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.f = f;
		}
		#line default
		
		public override global::haxe.root.Array getParams() {
			#line 881 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.root.Array(new object[]{this.f});
		}
		#line default
		
		public override string getTag() {
			#line 881 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "FFun";
		}
		#line default
		
		public override int GetHashCode() {
			unchecked {
				#line 881 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return global::haxe.lang.Enum.paramsGetHashCode(1, new object[]{this.f});
			}
			#line default
		}
		
		
		public override bool Equals(object other) {
			#line 881 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				#line 881 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return true;
			}
			
			#line 881 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			global::haxe.macro.FieldType_FFun en = ( other as global::haxe.macro.FieldType_FFun );
			#line 881 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (( en == null )) {
				#line 881 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 881 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.f) ), ((object) (en.f) ))) ) {
				#line 881 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 881 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return true;
		}
		#line default
		
		public override string toString() {
			#line 881 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return global::haxe.lang.Enum.paramsToString("FFun", new object[]{this.f});
		}
		#line default
		
		public readonly object f;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class FieldType_FProp : global::haxe.macro.FieldType {
		
		public FieldType_FProp(string @get, string @set, global::haxe.macro.ComplexType t, object e) : base(2) {
			#line 886 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.@get = @get;
			#line 886 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.@set = @set;
			#line 886 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.t = t;
			#line 886 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.e = e;
		}
		#line default
		
		public override global::haxe.root.Array getParams() {
			#line 886 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.root.Array(new object[]{this.@get, this.@set, this.t, this.e});
		}
		#line default
		
		public override string getTag() {
			#line 886 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "FProp";
		}
		#line default
		
		public override int GetHashCode() {
			unchecked {
				#line 886 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return global::haxe.lang.Enum.paramsGetHashCode(2, new object[]{this.@get, this.@set, this.t, this.e});
			}
			#line default
		}
		
		
		public override bool Equals(object other) {
			#line 886 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				#line 886 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return true;
			}
			
			#line 886 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			global::haxe.macro.FieldType_FProp en = ( other as global::haxe.macro.FieldType_FProp );
			#line 886 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (( en == null )) {
				#line 886 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 886 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.@get) ), ((object) (en.@get) ))) ) {
				#line 886 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 886 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.@set) ), ((object) (en.@set) ))) ) {
				#line 886 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 886 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.t) ), ((object) (en.t) ))) ) {
				#line 886 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 886 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.e) ), ((object) (en.e) ))) ) {
				#line 886 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 886 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return true;
		}
		#line default
		
		public override string toString() {
			#line 886 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return global::haxe.lang.Enum.paramsToString("FProp", new object[]{this.@get, this.@set, this.t, this.e});
		}
		#line default
		
		public readonly string @get;
		
		public readonly string @set;
		
		public readonly global::haxe.macro.ComplexType t;
		
		public readonly object e;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public class TypeDefKind : global::haxe.lang.Enum {
		
		protected TypeDefKind(int index) : base(index) {
		}
		
		
		public static readonly global::haxe.macro.TypeDefKind TDEnum = new global::haxe.macro.TypeDefKind_TDEnum();
		
		public static readonly global::haxe.macro.TypeDefKind TDStructure = new global::haxe.macro.TypeDefKind_TDStructure();
		
		public static global::haxe.macro.TypeDefKind TDClass(object superClass, global::haxe.root.Array interfaces, object isInterface, object isFinal) {
			#line 957 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.macro.TypeDefKind_TDClass(superClass, interfaces, isInterface, isFinal);
		}
		#line default
		
		public static global::haxe.macro.TypeDefKind TDAlias(global::haxe.macro.ComplexType t) {
			#line 962 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.macro.TypeDefKind_TDAlias(t);
		}
		#line default
		
		public static global::haxe.macro.TypeDefKind TDAbstract(global::haxe.macro.ComplexType tthis, global::haxe.root.Array @from, global::haxe.root.Array to) {
			#line 967 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.macro.TypeDefKind_TDAbstract(tthis, @from, to);
		}
		#line default
		
		protected static readonly string[] __hx_constructs = new string[]{"TDEnum", "TDStructure", "TDClass", "TDAlias", "TDAbstract"};
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class TypeDefKind_TDEnum : global::haxe.macro.TypeDefKind {
		
		public TypeDefKind_TDEnum() : base(0) {
		}
		
		
		public override string getTag() {
			#line 947 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "TDEnum";
		}
		#line default
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class TypeDefKind_TDStructure : global::haxe.macro.TypeDefKind {
		
		public TypeDefKind_TDStructure() : base(1) {
		}
		
		
		public override string getTag() {
			#line 952 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "TDStructure";
		}
		#line default
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class TypeDefKind_TDClass : global::haxe.macro.TypeDefKind {
		
		public TypeDefKind_TDClass(object superClass, global::haxe.root.Array interfaces, object isInterface, object isFinal) : base(2) {
			#line 957 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.superClass = superClass;
			#line 957 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.interfaces = interfaces;
			#line 957 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.isInterface = isInterface;
			#line 957 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.isFinal = isFinal;
		}
		#line default
		
		public override global::haxe.root.Array getParams() {
			#line 957 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.root.Array(new object[]{this.superClass, this.interfaces, this.isInterface, this.isFinal});
		}
		#line default
		
		public override string getTag() {
			#line 957 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "TDClass";
		}
		#line default
		
		public override int GetHashCode() {
			unchecked {
				#line 957 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return global::haxe.lang.Enum.paramsGetHashCode(2, new object[]{this.superClass, this.interfaces, this.isInterface, this.isFinal});
			}
			#line default
		}
		
		
		public override bool Equals(object other) {
			#line 957 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				#line 957 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return true;
			}
			
			#line 957 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			global::haxe.macro.TypeDefKind_TDClass en = ( other as global::haxe.macro.TypeDefKind_TDClass );
			#line 957 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (( en == null )) {
				#line 957 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 957 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.superClass) ), ((object) (en.superClass) ))) ) {
				#line 957 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 957 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.interfaces) ), ((object) (en.interfaces) ))) ) {
				#line 957 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 957 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.isInterface) ), ((object) (en.isInterface) ))) ) {
				#line 957 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 957 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.isFinal) ), ((object) (en.isFinal) ))) ) {
				#line 957 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 957 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return true;
		}
		#line default
		
		public override string toString() {
			#line 957 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return global::haxe.lang.Enum.paramsToString("TDClass", new object[]{this.superClass, this.interfaces, this.isInterface, this.isFinal});
		}
		#line default
		
		public readonly object superClass;
		
		public readonly global::haxe.root.Array interfaces;
		
		public readonly object isInterface;
		
		public readonly object isFinal;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class TypeDefKind_TDAlias : global::haxe.macro.TypeDefKind {
		
		public TypeDefKind_TDAlias(global::haxe.macro.ComplexType t) : base(3) {
			#line 962 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.t = t;
		}
		#line default
		
		public override global::haxe.root.Array getParams() {
			#line 962 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.root.Array(new object[]{this.t});
		}
		#line default
		
		public override string getTag() {
			#line 962 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "TDAlias";
		}
		#line default
		
		public override int GetHashCode() {
			unchecked {
				#line 962 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return global::haxe.lang.Enum.paramsGetHashCode(3, new object[]{this.t});
			}
			#line default
		}
		
		
		public override bool Equals(object other) {
			#line 962 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				#line 962 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return true;
			}
			
			#line 962 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			global::haxe.macro.TypeDefKind_TDAlias en = ( other as global::haxe.macro.TypeDefKind_TDAlias );
			#line 962 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (( en == null )) {
				#line 962 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 962 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.t) ), ((object) (en.t) ))) ) {
				#line 962 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 962 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return true;
		}
		#line default
		
		public override string toString() {
			#line 962 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return global::haxe.lang.Enum.paramsToString("TDAlias", new object[]{this.t});
		}
		#line default
		
		public readonly global::haxe.macro.ComplexType t;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class TypeDefKind_TDAbstract : global::haxe.macro.TypeDefKind {
		
		public TypeDefKind_TDAbstract(global::haxe.macro.ComplexType tthis, global::haxe.root.Array @from, global::haxe.root.Array to) : base(4) {
			#line 967 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.tthis = tthis;
			#line 967 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.@from = @from;
			#line 967 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.to = to;
		}
		#line default
		
		public override global::haxe.root.Array getParams() {
			#line 967 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.root.Array(new object[]{this.tthis, this.@from, this.to});
		}
		#line default
		
		public override string getTag() {
			#line 967 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "TDAbstract";
		}
		#line default
		
		public override int GetHashCode() {
			unchecked {
				#line 967 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return global::haxe.lang.Enum.paramsGetHashCode(4, new object[]{this.tthis, this.@from, this.to});
			}
			#line default
		}
		
		
		public override bool Equals(object other) {
			#line 967 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				#line 967 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return true;
			}
			
			#line 967 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			global::haxe.macro.TypeDefKind_TDAbstract en = ( other as global::haxe.macro.TypeDefKind_TDAbstract );
			#line 967 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (( en == null )) {
				#line 967 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 967 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.tthis) ), ((object) (en.tthis) ))) ) {
				#line 967 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 967 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.@from) ), ((object) (en.@from) ))) ) {
				#line 967 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 967 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.to) ), ((object) (en.to) ))) ) {
				#line 967 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 967 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return true;
		}
		#line default
		
		public override string toString() {
			#line 967 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return global::haxe.lang.Enum.paramsToString("TDAbstract", new object[]{this.tthis, this.@from, this.to});
		}
		#line default
		
		public readonly global::haxe.macro.ComplexType tthis;
		
		public readonly global::haxe.root.Array @from;
		
		public readonly global::haxe.root.Array to;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public class Error : global::haxe.lang.HxObject {
		
		public Error(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Error(string m, object p) {
			#line 987 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			global::haxe.macro.Error.__hx_ctor_haxe_macro_Error(this, m, p);
		}
		#line default
		
		protected static void __hx_ctor_haxe_macro_Error(global::haxe.macro.Error __hx_this, string m, object p) {
			#line 988 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			__hx_this.message = m;
			__hx_this.pos = p;
		}
		#line default
		
		public string message;
		
		public object pos;
		
		public virtual string toString() {
			#line 996 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return this.message;
		}
		#line default
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				#line 973 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				switch (hash) {
					case 5594516:
					{
						#line 973 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
						this.pos = ((object) (@value) );
						#line 973 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
						return @value;
					}
					
					
					default:
					{
						#line 973 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
			#line default
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				#line 973 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				switch (hash) {
					case 5594516:
					{
						#line 973 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
						this.pos = ((object) (@value) );
						#line 973 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
						return @value;
					}
					
					
					case 437335495:
					{
						#line 973 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
						this.message = global::haxe.lang.Runtime.toString(@value);
						#line 973 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
						return @value;
					}
					
					
					default:
					{
						#line 973 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
			#line default
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				#line 973 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				switch (hash) {
					case 946786476:
					{
						#line 973 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "toString", 946786476)) );
					}
					
					
					case 5594516:
					{
						#line 973 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
						return this.pos;
					}
					
					
					case 437335495:
					{
						#line 973 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
						return this.message;
					}
					
					
					default:
					{
						#line 973 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
			#line default
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				#line 973 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				switch (hash) {
					case 5594516:
					{
						#line 973 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
						return ((double) (global::haxe.lang.Runtime.toDouble(this.pos)) );
					}
					
					
					default:
					{
						#line 973 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
			#line default
		}
		
		
		public override object __hx_invokeField(string field, int hash, object[] dynargs) {
			unchecked {
				#line 973 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				switch (hash) {
					case 946786476:
					{
						#line 973 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
						return this.toString();
					}
					
					
					default:
					{
						#line 973 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
			}
			#line default
		}
		
		
		public override void __hx_getFields(global::haxe.root.Array baseArr) {
			#line 973 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			baseArr.push("pos");
			#line 973 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			baseArr.push("message");
			#line 973 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			base.__hx_getFields(baseArr);
		}
		#line default
		
		public override string ToString(){
			return this.toString();
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public class ImportMode : global::haxe.lang.Enum {
		
		protected ImportMode(int index) : base(index) {
		}
		
		
		public static readonly global::haxe.macro.ImportMode INormal = new global::haxe.macro.ImportMode_INormal();
		
		public static global::haxe.macro.ImportMode IAsName(string alias) {
			#line 1013 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.macro.ImportMode_IAsName(alias);
		}
		#line default
		
		public static readonly global::haxe.macro.ImportMode IAll = new global::haxe.macro.ImportMode_IAll();
		
		protected static readonly string[] __hx_constructs = new string[]{"INormal", "IAsName", "IAll"};
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class ImportMode_INormal : global::haxe.macro.ImportMode {
		
		public ImportMode_INormal() : base(0) {
		}
		
		
		public override string getTag() {
			#line 1008 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "INormal";
		}
		#line default
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class ImportMode_IAsName : global::haxe.macro.ImportMode {
		
		public ImportMode_IAsName(string alias) : base(1) {
			#line 1013 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			this.alias = alias;
		}
		#line default
		
		public override global::haxe.root.Array getParams() {
			#line 1013 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return new global::haxe.root.Array(new object[]{this.alias});
		}
		#line default
		
		public override string getTag() {
			#line 1013 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "IAsName";
		}
		#line default
		
		public override int GetHashCode() {
			unchecked {
				#line 1013 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return global::haxe.lang.Enum.paramsGetHashCode(1, new object[]{this.alias});
			}
			#line default
		}
		
		
		public override bool Equals(object other) {
			#line 1013 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				#line 1013 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return true;
			}
			
			#line 1013 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			global::haxe.macro.ImportMode_IAsName en = ( other as global::haxe.macro.ImportMode_IAsName );
			#line 1013 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if (( en == null )) {
				#line 1013 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 1013 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.alias) ), ((object) (en.alias) ))) ) {
				#line 1013 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
				return false;
			}
			
			#line 1013 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return true;
		}
		#line default
		
		public override string toString() {
			#line 1013 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return global::haxe.lang.Enum.paramsToString("IAsName", new object[]{this.alias});
		}
		#line default
		
		public readonly string alias;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public sealed class ImportMode_IAll : global::haxe.macro.ImportMode {
		
		public ImportMode_IAll() : base(2) {
		}
		
		
		public override string getTag() {
			#line 1018 "C:\\HaxeToolkit\\haxe\\std\\haxe\\macro\\Expr.hx"
			return "IAll";
		}
		#line default
		
	}
}


