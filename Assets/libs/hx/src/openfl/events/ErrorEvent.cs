// Generated by Haxe 4.1.0-rc.1+0d88c583b
using haxe.root;

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace openfl.events {
	public class ErrorEvent : global::openfl.events.TextEvent {
		
		static ErrorEvent() {
			global::openfl.events.ErrorEvent.ERROR = ((string) ("error") );
		}
		
		
		public ErrorEvent(global::haxe.lang.EmptyObject empty) : base(global::haxe.lang.EmptyObject.EMPTY) {
		}
		
		
		public ErrorEvent(string type, object bubbles, object cancelable, string text, object id) : base(global::haxe.lang.EmptyObject.EMPTY) {
			global::openfl.events.ErrorEvent.__hx_ctor_openfl_events_ErrorEvent(this, type, bubbles, cancelable, text, id);
		}
		
		
		protected static void __hx_ctor_openfl_events_ErrorEvent(global::openfl.events.ErrorEvent __hx_this, string type, object bubbles, object cancelable, string text, object id) {
			int id1 = ( (( id == default(object) )) ? (0) : (((int) (global::haxe.lang.Runtime.toInt(id)) )) );
			if (( text == null )) {
				text = "";
			}
			
			bool cancelable1 = ( (( cancelable == default(object) )) ? (false) : (global::haxe.lang.Runtime.toBool(cancelable)) );
			bool bubbles1 = ( (( bubbles == default(object) )) ? (false) : (global::haxe.lang.Runtime.toBool(bubbles)) );
			global::openfl.events.TextEvent.__hx_ctor_openfl_events_TextEvent(__hx_this, type, bubbles1, cancelable1, text);
			__hx_this.errorID = id1;
		}
		
		
		public static string ERROR;
		
		public int errorID;
		
		public override global::openfl.events.Event clone() {
			global::openfl.events.ErrorEvent @event = new global::openfl.events.ErrorEvent(this.type, this.bubbles, this.cancelable, this.text, this.errorID);
			@event.target = this.target;
			@event.currentTarget = this.currentTarget;
			@event.eventPhase = this.eventPhase;
			return @event;
		}
		
		
		public override string toString() {
			return this.__formatToString("ErrorEvent", new global::haxe.root.Array(new object[]{"type", "bubbles", "cancelable", "text", "errorID"}));
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1779076515:
					{
						this.errorID = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1779076515:
					{
						this.errorID = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 946786476:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "toString", 946786476)) );
					}
					
					
					case 1214452573:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "clone", 1214452573)) );
					}
					
					
					case 1779076515:
					{
						return this.errorID;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1779076515:
					{
						return ((double) (this.errorID) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override void __hx_getFields(global::haxe.root.Array baseArr) {
			baseArr.push("errorID");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}


