// Generated by Haxe 4.1.0-rc.1+0d88c583b
using haxe.root;

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace openfl.events {
	public class TextEvent : global::openfl.events.Event {
		
		static TextEvent() {
			global::openfl.events.TextEvent.LINK = ((string) ("link") );
			global::openfl.events.TextEvent.TEXT_INPUT = ((string) ("textInput") );
		}
		
		
		public TextEvent(global::haxe.lang.EmptyObject empty) : base(global::haxe.lang.EmptyObject.EMPTY) {
		}
		
		
		public TextEvent(string type, object bubbles, object cancelable, string text) : base(global::haxe.lang.EmptyObject.EMPTY) {
			global::openfl.events.TextEvent.__hx_ctor_openfl_events_TextEvent(this, type, bubbles, cancelable, text);
		}
		
		
		protected static void __hx_ctor_openfl_events_TextEvent(global::openfl.events.TextEvent __hx_this, string type, object bubbles, object cancelable, string text) {
			if (( text == null )) {
				text = "";
			}
			
			bool cancelable1 = ( (( cancelable == default(object) )) ? (false) : (global::haxe.lang.Runtime.toBool(cancelable)) );
			bool bubbles1 = ( (( bubbles == default(object) )) ? (false) : (global::haxe.lang.Runtime.toBool(bubbles)) );
			global::openfl.events.Event.__hx_ctor_openfl_events_Event(__hx_this, type, bubbles1, cancelable1);
			__hx_this.text = text;
		}
		
		
		public static string LINK;
		
		public static string TEXT_INPUT;
		
		public string text;
		
		public override global::openfl.events.Event clone() {
			global::openfl.events.TextEvent @event = new global::openfl.events.TextEvent(this.type, this.bubbles, this.cancelable, this.text);
			@event.target = this.target;
			@event.currentTarget = this.currentTarget;
			@event.eventPhase = this.eventPhase;
			return @event;
		}
		
		
		public override string toString() {
			return this.__formatToString("TextEvent", new global::haxe.root.Array(new object[]{"type", "bubbles", "cancelable", "text"}));
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1291439277:
					{
						this.text = global::haxe.lang.Runtime.toString(@value);
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 946786476:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "toString", 946786476)) );
					}
					
					
					case 1214452573:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "clone", 1214452573)) );
					}
					
					
					case 1291439277:
					{
						return this.text;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override void __hx_getFields(global::haxe.root.Array baseArr) {
			baseArr.push("text");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}


