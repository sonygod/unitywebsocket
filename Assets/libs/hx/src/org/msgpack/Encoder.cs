// Generated by Haxe 4.1.0-rc.1+0d88c583b
using haxe.root;

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace org.msgpack {
	public class Encoder : global::haxe.lang.HxObject {
		
		static Encoder() {
			global::org.msgpack.Encoder.FLOAT_SINGLE_MIN = 1.40129846432481707e-45;
			global::org.msgpack.Encoder.FLOAT_SINGLE_MAX = 3.40282346638528860e+38;
			global::org.msgpack.Encoder.FLOAT_DOUBLE_MIN = 4.94065645841246544e-324;
			global::org.msgpack.Encoder.FLOAT_DOUBLE_MAX = 1.79769313486231570e+308;
		}
		
		
		public Encoder(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Encoder(object d) {
			global::org.msgpack.Encoder.__hx_ctor_org_msgpack_Encoder(this, d);
		}
		
		
		protected static void __hx_ctor_org_msgpack_Encoder(global::org.msgpack.Encoder __hx_this, object d) {
			__hx_this.o = new global::haxe.io.BytesOutput();
			__hx_this.o.set_bigEndian(true);
			__hx_this.encode(d);
		}
		
		
		public static double FLOAT_SINGLE_MIN;
		
		public static double FLOAT_SINGLE_MAX;
		
		public static double FLOAT_DOUBLE_MIN;
		
		public static double FLOAT_DOUBLE_MAX;
		
		public global::haxe.io.BytesOutput o;
		
		public virtual void encode(object d) {
			unchecked {
				global::haxe.root.ValueType _g = global::haxe.root.Type.@typeof(d);
				switch (_g._hx_index) {
					case 0:
					{
						this.o.writeByte(192);
						break;
					}
					
					
					case 1:
					{
						int d1 = ((int) (global::haxe.lang.Runtime.toInt(d)) );
						if (( d1 < -32 )) {
							if (( d1 < -32768 )) {
								this.o.writeByte(210);
								this.o.writeInt32(d1);
							}
							else if (( d1 < -128 )) {
								this.o.writeByte(209);
								this.o.writeInt16(d1);
							}
							else {
								this.o.writeByte(208);
								this.o.writeInt8(d1);
							}
							
						}
						else if (( d1 < 128 )) {
							this.o.writeByte(( d1 & 255 ));
						}
						else if (( d1 < 256 )) {
							this.o.writeByte(204);
							this.o.writeByte(d1);
						}
						else if (( d1 < 65536 )) {
							this.o.writeByte(205);
							this.o.writeUInt16(d1);
						}
						else {
							int k = ((int) (global::haxe.lang.Runtime.toInt(global::haxe.root.Std.parseInt(global::haxe.root.Std.@string(d1)))) );
							this.o.writeByte(206);
							this.o.writeInt32(d1);
						}
						
						break;
					}
					
					
					case 2:
					{
						double d2 = ((double) (global::haxe.lang.Runtime.toDouble(d)) );
						double a = global::System.Math.Abs(((double) (d2) ));
						if (( ( a > 1.40129846432481707e-45 ) && ( a < 3.40282346638528860e+38 ) )) {
							this.o.writeByte(202);
							this.o.writeFloat(d2);
						}
						else {
							this.o.writeByte(203);
							this.o.writeDouble(d2);
						}
						
						break;
					}
					
					
					case 3:
					{
						this.o.writeByte(( (global::haxe.lang.Runtime.toBool((d))) ? (195) : (194) ));
						break;
					}
					
					
					case 4:
					{
						global::haxe.root.Array f = global::haxe.root.Reflect.fields(d);
						{
							int length = global::haxe.root.Lambda.count(((object) (f) ), default(global::haxe.lang.Function));
							if (( length < 16 )) {
								this.o.writeByte(( 128 | length ));
							}
							else if (( length < 65536 )) {
								this.o.writeByte(222);
								this.o.writeUInt16(length);
							}
							else {
								this.o.writeByte(223);
								this.o.writeInt32(length);
							}
							
						}
						
						{
							int _g1 = 0;
							while (( _g1 < f.length )) {
								string k1 = global::haxe.lang.Runtime.toString(f.__get(_g1));
								 ++ _g1;
								this.encode(k1);
								this.encode(global::haxe.root.Reflect.field(d, k1));
							}
							
						}
						
						break;
					}
					
					
					case 5:
					{
						throw global::haxe.lang.HaxeException.wrap("Error: Function not supported");
					}
					
					
					case 6:
					{
						global::System.Type c = ( _g as global::haxe.root.ValueType_TClass ).c;
						{
							string __name = global::haxe.root.Type.getClassName(c);
							string _name = ( (( global::haxe.root.Std.@string(__name) == "true" )) ? ("String") : (__name) );
							switch (_name) {
								case "Array":
								{
									global::haxe.root.Array d3 = ((global::haxe.root.Array) (d) );
									int length1 = d3.length;
									if (( length1 < 16 )) {
										this.o.writeByte(( 144 | length1 ));
									}
									else if (( length1 < 65536 )) {
										this.o.writeByte(220);
										this.o.writeUInt16(length1);
									}
									else {
										this.o.writeByte(221);
										this.o.writeInt32(length1);
									}
									
									{
										int _g2 = 0;
										while (( _g2 < d3.length )) {
											object e = d3.__get(_g2);
											 ++ _g2;
											this.encode(e);
										}
										
									}
									
									break;
								}
								
								
								case "String":
								{
									global::haxe.io.Bytes b = global::haxe.io.Bytes.ofString(global::haxe.lang.Runtime.toString(d), null);
									int length2 = b.length;
									this.o.writeByte(217);
									this.o.writeInt32(length2);
									this.o.writeBytes(b, 0, b.length);
									break;
								}
								
								
								case "System.UInt32":
								{
									this.o.writeByte(206);
									global::binary128.@internal.Leb128.writeUint32(this.o, ((uint) (global::haxe.lang.Runtime.toInt(d)) ));
									break;
								}
								
								
								case "haxe._Int64.___Int64":
								{
									long d4 = global::haxe.lang.Runtime.toLong(d);
									this.o.writeByte(211);
									this.o.writeInt32(((int) (( ((long) (d4) ) >> 32 )) ));
									this.o.writeInt32(((int) (((long) (d4) )) ));
									break;
								}
								
								
								case "haxe.ds.IntMap":
								case "haxe.ds.StringMap":
								case "haxe.ds.UnsafeStringMap":
								{
									global::haxe.IMap d5 = ((global::haxe.IMap) (d) );
									int length3 = 0;
									{
										object k2 = d5.keys();
										while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(k2, "hasNext", 407283053, null))) {
											object k3 = ((object) (global::haxe.lang.Runtime.callField(k2, "next", 1224901875, null)) );
											 ++ length3;
										}
										
									}
									
									if (( length3 < 16 )) {
										this.o.writeByte(( 128 | length3 ));
									}
									else if (( length3 < 65536 )) {
										this.o.writeByte(222);
										this.o.writeUInt16(length3);
									}
									else {
										this.o.writeByte(223);
										this.o.writeInt32(length3);
									}
									
									{
										object k4 = d5.keys();
										while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(k4, "hasNext", 407283053, null))) {
											object k5 = ((object) (global::haxe.lang.Runtime.callField(k4, "next", 1224901875, null)) );
											this.encode(k5);
											this.encode(((object) (d5.@get(k5)) ));
										}
										
									}
									
									break;
								}
								
								
								case "haxe.io.Bytes":
								{
									global::haxe.io.Bytes b1 = ((global::haxe.io.Bytes) (d) );
									int length4 = b1.length;
									if (( length4 < 256 )) {
										this.o.writeByte(196);
										this.o.writeByte(length4);
									}
									else if (( length4 < 65536 )) {
										this.o.writeByte(197);
										this.o.writeUInt16(length4);
									}
									else {
										this.o.writeByte(198);
										this.o.writeInt32(length4);
									}
									
									this.o.write(b1);
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("Error: ", global::haxe.root.Type.getClassName(c)), " not supported"));
								}
								
							}
							
						}
						
						break;
					}
					
					
					case 7:
					{
						global::System.Type e1 = ( _g as global::haxe.root.ValueType_TEnum ).e;
						throw global::haxe.lang.HaxeException.wrap("Error: Enum not supported");
					}
					
					
					case 8:
					{
						throw global::haxe.lang.HaxeException.wrap("Error: Unknown Data Type");
					}
					
					
				}
				
			}
		}
		
		
		public void writeInt64(long d) {
			unchecked {
				this.o.writeByte(211);
				this.o.writeInt32(((int) (( ((long) (d) ) >> 32 )) ));
				this.o.writeInt32(((int) (((long) (d) )) ));
			}
		}
		
		
		public void writeUInt32(uint d) {
			unchecked {
				this.o.writeByte(206);
				global::binary128.@internal.Leb128.writeUint32(this.o, d);
			}
		}
		
		
		public void writeInt(int d) {
			unchecked {
				if (( d < -32 )) {
					if (( d < -32768 )) {
						this.o.writeByte(210);
						this.o.writeInt32(d);
					}
					else if (( d < -128 )) {
						this.o.writeByte(209);
						this.o.writeInt16(d);
					}
					else {
						this.o.writeByte(208);
						this.o.writeInt8(d);
					}
					
				}
				else if (( d < 128 )) {
					this.o.writeByte(( d & 255 ));
				}
				else if (( d < 256 )) {
					this.o.writeByte(204);
					this.o.writeByte(d);
				}
				else if (( d < 65536 )) {
					this.o.writeByte(205);
					this.o.writeUInt16(d);
				}
				else {
					int k = ((int) (global::haxe.lang.Runtime.toInt(global::haxe.root.Std.parseInt(global::haxe.root.Std.@string(d)))) );
					this.o.writeByte(206);
					this.o.writeInt32(d);
				}
				
			}
		}
		
		
		public void writeFloat(double d) {
			unchecked {
				double a = global::System.Math.Abs(((double) (d) ));
				if (( ( a > 1.40129846432481707e-45 ) && ( a < 3.40282346638528860e+38 ) )) {
					this.o.writeByte(202);
					this.o.writeFloat(d);
				}
				else {
					this.o.writeByte(203);
					this.o.writeDouble(d);
				}
				
			}
		}
		
		
		public void writeBinary(global::haxe.io.Bytes b) {
			unchecked {
				int length = b.length;
				if (( length < 256 )) {
					this.o.writeByte(196);
					this.o.writeByte(length);
				}
				else if (( length < 65536 )) {
					this.o.writeByte(197);
					this.o.writeUInt16(length);
				}
				else {
					this.o.writeByte(198);
					this.o.writeInt32(length);
				}
				
				this.o.write(b);
			}
		}
		
		
		public void writeString(string s) {
			unchecked {
				int size = 0;
				global::haxe.io.Bytes b = global::haxe.io.Bytes.ofString(s, null);
				int length = b.length;
				this.o.writeByte(217);
				this.o.writeInt32(length);
				this.o.writeBytes(b, 0, b.length);
			}
		}
		
		
		public void writeArray(global::haxe.root.Array d) {
			unchecked {
				int length = d.length;
				if (( length < 16 )) {
					this.o.writeByte(( 144 | length ));
				}
				else if (( length < 65536 )) {
					this.o.writeByte(220);
					this.o.writeUInt16(length);
				}
				else {
					this.o.writeByte(221);
					this.o.writeInt32(length);
				}
				
				{
					int _g = 0;
					while (( _g < d.length )) {
						object e = d.__get(_g);
						 ++ _g;
						this.encode(e);
					}
					
				}
				
			}
		}
		
		
		public void writeMapLength(int length) {
			unchecked {
				if (( length < 16 )) {
					this.o.writeByte(( 128 | length ));
				}
				else if (( length < 65536 )) {
					this.o.writeByte(222);
					this.o.writeUInt16(length);
				}
				else {
					this.o.writeByte(223);
					this.o.writeInt32(length);
				}
				
			}
		}
		
		
		public void writeMap(global::haxe.IMap d) {
			unchecked {
				int length = 0;
				{
					object k = d.keys();
					while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(k, "hasNext", 407283053, null))) {
						object k1 = ((object) (global::haxe.lang.Runtime.callField(k, "next", 1224901875, null)) );
						 ++ length;
					}
					
				}
				
				if (( length < 16 )) {
					this.o.writeByte(( 128 | length ));
				}
				else if (( length < 65536 )) {
					this.o.writeByte(222);
					this.o.writeUInt16(length);
				}
				else {
					this.o.writeByte(223);
					this.o.writeInt32(length);
				}
				
				{
					object k2 = d.keys();
					while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(k2, "hasNext", 407283053, null))) {
						object k3 = ((object) (global::haxe.lang.Runtime.callField(k2, "next", 1224901875, null)) );
						this.encode(k3);
						this.encode(((object) (d.@get(k3)) ));
					}
					
				}
				
			}
		}
		
		
		public void writeObject(object d) {
			unchecked {
				global::haxe.root.Array f = global::haxe.root.Reflect.fields(d);
				{
					int length = global::haxe.root.Lambda.count(((object) (f) ), default(global::haxe.lang.Function));
					if (( length < 16 )) {
						this.o.writeByte(( 128 | length ));
					}
					else if (( length < 65536 )) {
						this.o.writeByte(222);
						this.o.writeUInt16(length);
					}
					else {
						this.o.writeByte(223);
						this.o.writeInt32(length);
					}
					
				}
				
				{
					int _g = 0;
					while (( _g < f.length )) {
						string k = global::haxe.lang.Runtime.toString(f.__get(_g));
						 ++ _g;
						this.encode(k);
						this.encode(global::haxe.root.Reflect.field(d, k));
					}
					
				}
				
			}
		}
		
		
		public global::haxe.io.Bytes getBytes() {
			return this.o.getBytes();
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 111:
					{
						this.o = ((global::haxe.io.BytesOutput) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 493819893:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "getBytes", 493819893)) );
					}
					
					
					case 708366590:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "writeObject", 708366590)) );
					}
					
					
					case 603155197:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "writeMap", 603155197)) );
					}
					
					
					case 1806782403:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "writeMapLength", 1806782403)) );
					}
					
					
					case 978413626:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "writeArray", 978413626)) );
					}
					
					
					case 640252688:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "writeString", 640252688)) );
					}
					
					
					case 33885760:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "writeBinary", 33885760)) );
					}
					
					
					case 391692349:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "writeFloat", 391692349)) );
					}
					
					
					case 602959184:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "writeInt", 602959184)) );
					}
					
					
					case 772312280:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "writeUInt32", 772312280)) );
					}
					
					
					case 1390579854:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "writeInt64", 1390579854)) );
					}
					
					
					case 2044981782:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "encode", 2044981782)) );
					}
					
					
					case 111:
					{
						return this.o;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, object[] dynargs) {
			unchecked {
				switch (hash) {
					case 493819893:
					{
						return this.getBytes();
					}
					
					
					case 708366590:
					{
						this.writeObject(((object) (dynargs[0]) ));
						break;
					}
					
					
					case 603155197:
					{
						this.writeMap(((global::haxe.IMap) (((object) (dynargs[0]) )) ));
						break;
					}
					
					
					case 1806782403:
					{
						this.writeMapLength(((int) (global::haxe.lang.Runtime.toInt(((object) (dynargs[0]) ))) ));
						break;
					}
					
					
					case 978413626:
					{
						this.writeArray(((global::haxe.root.Array) (((object) (dynargs[0]) )) ));
						break;
					}
					
					
					case 640252688:
					{
						this.writeString(global::haxe.lang.Runtime.toString(((object) (dynargs[0]) )));
						break;
					}
					
					
					case 33885760:
					{
						this.writeBinary(((global::haxe.io.Bytes) (((object) (dynargs[0]) )) ));
						break;
					}
					
					
					case 391692349:
					{
						this.writeFloat(((double) (global::haxe.lang.Runtime.toDouble(((object) (dynargs[0]) ))) ));
						break;
					}
					
					
					case 602959184:
					{
						this.writeInt(((int) (global::haxe.lang.Runtime.toInt(((object) (dynargs[0]) ))) ));
						break;
					}
					
					
					case 772312280:
					{
						this.writeUInt32(((uint) (global::haxe.lang.Runtime.toInt(((object) (dynargs[0]) ))) ));
						break;
					}
					
					
					case 1390579854:
					{
						this.writeInt64(global::haxe.lang.Runtime.toLong(((object) (dynargs[0]) )));
						break;
					}
					
					
					case 2044981782:
					{
						this.encode(((object) (dynargs[0]) ));
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::haxe.root.Array baseArr) {
			baseArr.push("o");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}


