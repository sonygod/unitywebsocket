// Generated by Haxe 4.1.0-rc.1+0d88c583b

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace utils {
	public class TimerOne : global::haxe.lang.HxObject {
		
		public TimerOne(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public TimerOne() {
			global::utils.TimerOne.__hx_ctor_utils_TimerOne(this);
		}
		
		
		protected static void __hx_ctor_utils_TimerOne(global::utils.TimerOne __hx_this) {
			unchecked {
				__hx_this.totoal = ((uint) (0) );
				__hx_this.t = 1000;
				__hx_this.map = new global::haxe.ds.IntMap();
				{
					if (( global::utils.TimerOne._instance != null )) {
						throw global::haxe.lang.HaxeException.wrap("webinstance eror!");
					}
					
					__hx_this.timer = new global::haxe.Timer(((int) (__hx_this.t) ));
					__hx_this.timer.run = ((global::haxe.lang.Function) (new global::haxe.lang.Closure(__hx_this, "run", 5695307)) );
				}
				
			}
		}
		
		
		public static global::utils.TimerOne _instance;
		
		public static global::utils.TimerOne getInstance() {
			if (( global::utils.TimerOne._instance == null )) {
				global::utils.TimerOne._instance = new global::utils.TimerOne();
			}
			
			return global::utils.TimerOne._instance;
		}
		
		
		public global::haxe.Timer timer;
		
		public global::haxe.ds.IntMap map;
		
		public int t;
		
		public uint totoal;
		
		public virtual void run() {
			object _g = ((object) (new global::haxe.iterators.MapKeyValueIterator(((global::haxe.IMap) (((global::haxe.ds.IntMap) (((global::haxe.IMap) (this.map) )) )) ))) );
			while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(_g, "hasNext", 407283053, null))) {
				object _g1 = ((object) (global::haxe.lang.Runtime.callField(_g, "next", 1224901875, null)) );
				int key = ((int) (global::haxe.lang.Runtime.getField_f(_g1, "key", 5343647, true)) );
				object v = global::haxe.lang.Runtime.getField(_g1, "value", 834174833, true);
				if (( v == null )) {
					((global::haxe.ds.IntMap) (((global::haxe.IMap) (this.map) )) ).@remove(((int) (key) ));
				}
				else {
					{
						object __temp_dynop1 = v;
						int __temp_expr1 = ((int) (global::haxe.lang.Runtime.setField_f(__temp_dynop1, "dt", 22416, ((double) (( ((int) (global::haxe.lang.Runtime.getField_f(__temp_dynop1, "dt", 22416, true)) ) + this.t )) ))) );
					}
					
					if (( ((int) (global::haxe.lang.Runtime.getField_f(v, "dt", 22416, true)) ) >= ((int) (global::haxe.lang.Runtime.getField_f(v, "delay", 1462163331, true)) ) )) {
						object __temp_expr2 = ((object) (global::haxe.lang.Runtime.callField(v, "func", 1136978756, null)) );
						if (( ! (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(v, "keep", 1191628933, true))) )) {
							((global::haxe.ds.IntMap) (((global::haxe.IMap) (this.map) )) ).@remove(((int) (key) ));
						}
						
						int __temp_expr3 = ((int) (global::haxe.lang.Runtime.setField_f(v, "dt", 22416, ((double) (0) ))) );
					}
					
				}
				
			}
			
		}
		
		
		public virtual void reg(global::haxe.lang.Function func, int delay, object keep) {
			unchecked {
				bool keep1 = ( (( keep == default(object) )) ? (true) : (global::haxe.lang.Runtime.toBool(keep)) );
				object tc = new global::haxe.lang.DynamicObject(new int[]{1136978756, 1191628933}, new object[]{func, keep1}, new int[]{22416, 1462163331}, new double[]{((double) (0) ), ((double) (delay) )});
				((global::haxe.ds.IntMap) (((global::haxe.IMap) (this.map) )) ).@set(((int) (this.totoal++) ), ((object) (tc) ));
				if (((bool) (( this.totoal > 1000000000 )) )) {
					this.totoal = ((uint) (1000) );
				}
				
			}
		}
		
		
		public virtual void unReg(global::haxe.lang.Function func) {
			object _g = ((object) (new global::haxe.iterators.MapKeyValueIterator(((global::haxe.IMap) (((global::haxe.ds.IntMap) (((global::haxe.IMap) (this.map) )) )) ))) );
			while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(_g, "hasNext", 407283053, null))) {
				object _g1 = ((object) (global::haxe.lang.Runtime.callField(_g, "next", 1224901875, null)) );
				int key = ((int) (global::haxe.lang.Runtime.getField_f(_g1, "key", 5343647, true)) );
				object e = global::haxe.lang.Runtime.getField(_g1, "value", 834174833, true);
				if (( ((global::haxe.lang.Function) (global::haxe.lang.Runtime.getField(e, "func", 1136978756, true)) ) == func )) {
					((global::haxe.ds.IntMap) (((global::haxe.IMap) (this.map) )) ).@remove(((int) (key) ));
				}
				
			}
			
		}
		
		
		public virtual void delay(global::haxe.lang.Function func, int delay) {
			this.reg(func, delay, false);
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 400657953:
					{
						this.totoal = ((uint) (@value) );
						return @value;
					}
					
					
					case 116:
					{
						this.t = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 400657953:
					{
						this.totoal = ((uint) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 116:
					{
						this.t = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 5442204:
					{
						this.map = ((global::haxe.ds.IntMap) (@value) );
						return @value;
					}
					
					
					case 271957957:
					{
						this.timer = ((global::haxe.Timer) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1462163331:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "delay", 1462163331)) );
					}
					
					
					case 651552891:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "unReg", 651552891)) );
					}
					
					
					case 5691732:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "reg", 5691732)) );
					}
					
					
					case 5695307:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "run", 5695307)) );
					}
					
					
					case 400657953:
					{
						return this.totoal;
					}
					
					
					case 116:
					{
						return this.t;
					}
					
					
					case 5442204:
					{
						return this.map;
					}
					
					
					case 271957957:
					{
						return this.timer;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 400657953:
					{
						return ((double) (this.totoal) );
					}
					
					
					case 116:
					{
						return ((double) (this.t) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, object[] dynargs) {
			unchecked {
				switch (hash) {
					case 1462163331:
					{
						this.delay(((global::haxe.lang.Function) (((object) (dynargs[0]) )) ), ((int) (global::haxe.lang.Runtime.toInt(((object) (dynargs[1]) ))) ));
						break;
					}
					
					
					case 651552891:
					{
						this.unReg(((global::haxe.lang.Function) (((object) (dynargs[0]) )) ));
						break;
					}
					
					
					case 5691732:
					{
						this.reg(((global::haxe.lang.Function) (((object) (dynargs[0]) )) ), ((int) (global::haxe.lang.Runtime.toInt(((object) (dynargs[1]) ))) ), ((object) (dynargs[2]) ));
						break;
					}
					
					
					case 5695307:
					{
						this.run();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::haxe.root.Array baseArr) {
			baseArr.push("totoal");
			baseArr.push("t");
			baseArr.push("map");
			baseArr.push("timer");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}


