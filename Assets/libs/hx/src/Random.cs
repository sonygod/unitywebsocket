// Generated by Haxe 4.1.0-rc.1+0d88c583b
using haxe.root;

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.root {
	public class Random : global::haxe.lang.HxObject {
		
		public Random(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Random() {
			global::haxe.root.Random.__hx_ctor__Random(this);
		}
		
		
		protected static void __hx_ctor__Random(global::haxe.root.Random __hx_this) {
		}
		
		
		public static bool @bool() {
			return ( global::haxe.root.Math.rand.NextDouble() < 0.5 );
		}
		
		
		public static int @int(int @from, int to) {
			unchecked {
				return ( @from + ((int) (global::System.Math.Floor(((double) (( (( ( to - @from ) + 1 )) * global::haxe.root.Math.rand.NextDouble() )) ))) ) );
			}
		}
		
		
		public static double @float(double @from, double to) {
			return ( @from + ( (( to - @from )) * global::haxe.root.Math.rand.NextDouble() ) );
		}
		
		
		public static string @string(int length, string charactersToUse) {
			unchecked {
				if (( charactersToUse == null )) {
					charactersToUse = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
				}
				
				string str = "";
				{
					int _g = 0;
					int _g1 = length;
					while (( _g < _g1 )) {
						int i = _g++;
						str = global::haxe.lang.Runtime.concat(str, global::haxe.lang.StringExt.charAt(charactersToUse, ((int) (global::System.Math.Floor(((double) (( (( ( charactersToUse.Length - 1 ) + 1 )) * global::haxe.root.Math.rand.NextDouble() )) ))) )));
					}
					
				}
				
				return str;
			}
		}
		
		
		public static global::haxe.root.Date date(global::haxe.root.Date earliest, global::haxe.root.Date latest) {
			double @from = ( ((double) (((long) (( ((long) (global::System.TimeZone.CurrentTimeZone.ToUniversalTime(((global::System.DateTime) (earliest.date) )).Ticks) ) - ((long) (global::haxe.root.Date.epochTicks) ) )) )) ) / ((double) (global::System.TimeSpan.TicksPerMillisecond) ) );
			double t = ( @from + ( (( ( ((double) (((long) (( ((long) (global::System.TimeZone.CurrentTimeZone.ToUniversalTime(((global::System.DateTime) (latest.date) )).Ticks) ) - ((long) (global::haxe.root.Date.epochTicks) ) )) )) ) / ((double) (global::System.TimeSpan.TicksPerMillisecond) ) ) - @from )) * global::haxe.root.Math.rand.NextDouble() ) );
			return new global::haxe.root.Date(((global::System.DateTime) (global::System.TimeZone.CurrentTimeZone.ToLocalTime(((global::System.DateTime) (new global::System.DateTime(((long) (( ((long) (( t * ((double) (global::System.TimeSpan.TicksPerMillisecond) ) )) ) + ((long) (global::haxe.root.Date.epochTicks) ) )) ))) ))) ));
		}
		
		
		public static object fromArray(global::haxe.root.Array arr) {
			unchecked {
				if (( ( arr != null ) && ( arr.length > 0 ) )) {
					return arr.__get(((int) (global::System.Math.Floor(((double) (( (( ( arr.length - 1 ) + 1 )) * global::haxe.root.Math.rand.NextDouble() )) ))) ));
				}
				else {
					return null;
				}
				
			}
		}
		
		
		public static global::haxe.root.Array shuffle(global::haxe.root.Array arr) {
			unchecked {
				if (( arr != null )) {
					int _g = 0;
					int _g1 = arr.length;
					while (( _g < _g1 )) {
						int i = _g++;
						int j = ((int) (global::System.Math.Floor(((double) (( (( ( arr.length - 1 ) + 1 )) * global::haxe.root.Math.rand.NextDouble() )) ))) );
						object a = arr.__get(i);
						object b = arr.__get(j);
						arr.__set(i, b);
						arr.__set(j, a);
					}
					
				}
				
				return arr;
			}
		}
		
		
		public static object fromIterable(object it) {
			unchecked {
				if (( it != null )) {
					global::haxe.root.Array arr = global::haxe.root.Lambda.array(((object) (it) ));
					if (( ( arr != null ) && ( arr.length > 0 ) )) {
						return arr.__get(((int) (global::System.Math.Floor(((double) (( (( ( arr.length - 1 ) + 1 )) * global::haxe.root.Math.rand.NextDouble() )) ))) ));
					}
					else {
						return null;
					}
					
				}
				else {
					return null;
				}
				
			}
		}
		
		
		public static object enumConstructor(global::System.Type e) {
			unchecked {
				if ( ! (global::haxe.lang.Runtime.typeEq(e, null)) ) {
					global::haxe.root.Array arr = global::haxe.root.Type.allEnums(((global::System.Type) (e) ));
					if (( ( arr != null ) && ( arr.length > 0 ) )) {
						return arr.__get(((int) (global::System.Math.Floor(((double) (( (( ( arr.length - 1 ) + 1 )) * global::haxe.root.Math.rand.NextDouble() )) ))) ));
					}
					else {
						return null;
					}
					
				}
				else {
					return null;
				}
				
			}
		}
		
		
	}
}


