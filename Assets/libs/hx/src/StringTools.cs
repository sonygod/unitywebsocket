// Generated by Haxe 4.1.0-rc.1+0d88c583b
using haxe.root;

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.root {
	public class StringTools : global::haxe.lang.HxObject {
		
		static StringTools() {
			unchecked{
				global::haxe.root.StringTools.winMetaCharacters = ((global::haxe.root.Array) (global::haxe.SysTools.winMetaCharacters) );
				global::haxe.root.StringTools.MIN_SURROGATE_CODE_POINT = 65536;
			}
		}
		
		
		public StringTools(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public StringTools() {
			global::haxe.root.StringTools.__hx_ctor__StringTools(this);
		}
		
		
		protected static void __hx_ctor__StringTools(global::haxe.root.StringTools __hx_this) {
		}
		
		
		public static string urlEncode(string s) {
			return global::System.Uri.EscapeDataString(((string) (s) ));
		}
		
		
		public static string urlDecode(string s) {
			return global::System.Uri.UnescapeDataString(((string) (s) ));
		}
		
		
		public static string htmlEscape(string s, object quotes) {
			unchecked {
				global::haxe.root.StringBuf buf = new global::haxe.root.StringBuf();
				{
					int _g_offset = 0;
					string _g_s = s;
					while (( _g_offset < _g_s.Length )) {
						string s1 = _g_s;
						int index = _g_offset++;
						int c = ( (((bool) (( ((uint) (index) ) < s1.Length )) )) ? (((int) (s1[index]) )) : (-1) );
						if (( ( c >= 55296 ) && ( c <= 56319 ) )) {
							int index1 = ( index + 1 );
							c = ( ( ( c - 55232 ) << 10 ) | ( (( (((bool) (( ((uint) (index1) ) < s1.Length )) )) ? (((int) (s1[index1]) )) : (-1) )) & 1023 ) );
						}
						
						int c1 = c;
						if (( c1 >= 65536 )) {
							 ++ _g_offset;
						}
						
						int code = c1;
						switch (code) {
							case 34:
							{
								if (global::haxe.lang.Runtime.toBool((quotes))) {
									buf.b.Append(((string) ("&quot;") ));
								}
								else {
									buf.addChar(code);
								}
								
								break;
							}
							
							
							case 38:
							{
								buf.b.Append(((string) ("&amp;") ));
								break;
							}
							
							
							case 39:
							{
								if (global::haxe.lang.Runtime.toBool((quotes))) {
									buf.b.Append(((string) ("&#039;") ));
								}
								else {
									buf.addChar(code);
								}
								
								break;
							}
							
							
							case 60:
							{
								buf.b.Append(((string) ("&lt;") ));
								break;
							}
							
							
							case 62:
							{
								buf.b.Append(((string) ("&gt;") ));
								break;
							}
							
							
							default:
							{
								buf.addChar(code);
								break;
							}
							
						}
						
					}
					
				}
				
				return buf.b.ToString();
			}
		}
		
		
		public static string htmlUnescape(string s) {
			return global::haxe.lang.StringExt.split(global::haxe.lang.StringExt.split(global::haxe.lang.StringExt.split(global::haxe.lang.StringExt.split(global::haxe.lang.StringExt.split(s, "&gt;").@join(">"), "&lt;").@join("<"), "&quot;").@join("\""), "&#039;").@join("\'"), "&amp;").@join("&");
		}
		
		
		public static bool contains(string s, string @value) {
			unchecked {
				return ( global::haxe.lang.StringExt.indexOf(s, @value, null) != -1 );
			}
		}
		
		
		public static bool startsWith(string s, string start) {
			return s.StartsWith(start);
		}
		
		
		public static bool endsWith(string s, string end) {
			return s.EndsWith(end);
		}
		
		
		public static bool isSpace(string s, int pos) {
			unchecked {
				object c = global::haxe.lang.StringExt.charCodeAt(s, pos);
				if ( ! ((( ( ((int) (global::haxe.lang.Runtime.toInt(c)) ) > 8 ) && ( ((int) (global::haxe.lang.Runtime.toInt(c)) ) < 14 ) ))) ) {
					return global::haxe.lang.Runtime.eq(c, 32);
				}
				else {
					return true;
				}
				
			}
		}
		
		
		public static string ltrim(string s) {
			return s.TrimStart();
		}
		
		
		public static string rtrim(string s) {
			return s.TrimEnd();
		}
		
		
		public static string trim(string s) {
			return s.Trim();
		}
		
		
		public static string lpad(string s, string c, int l) {
			if (( c.Length <= 0 )) {
				return s;
			}
			
			global::System.Text.StringBuilder buf_b = new global::System.Text.StringBuilder();
			l -= s.Length;
			while (( buf_b.Length < l )) {
				buf_b.Append(((string) (global::haxe.root.Std.@string(c)) ));
			}
			
			buf_b.Append(((string) (global::haxe.root.Std.@string(s)) ));
			return buf_b.ToString();
		}
		
		
		public static string rpad(string s, string c, int l) {
			if (( c.Length <= 0 )) {
				return s;
			}
			
			global::System.Text.StringBuilder buf_b = new global::System.Text.StringBuilder();
			buf_b.Append(((string) (global::haxe.root.Std.@string(s)) ));
			while (( buf_b.Length < l )) {
				buf_b.Append(((string) (global::haxe.root.Std.@string(c)) ));
			}
			
			return buf_b.ToString();
		}
		
		
		public static string replace(string s, string sub, string @by) {
			if (( sub.Length == 0 )) {
				return global::haxe.lang.StringExt.split(s, sub).@join(@by);
			}
			else {
				return s.Replace(sub, @by);
			}
			
		}
		
		
		public static string hex(int n, object digits) {
			unchecked {
				string s = "";
				string hexChars = "0123456789ABCDEF";
				while (true) {
					s = global::haxe.lang.Runtime.concat(global::haxe.lang.StringExt.charAt(hexChars, ( n & 15 )), s);
					n = ((int) (( ((uint) (n) ) >> 4 )) );
					if ( ! ((( n > 0 ))) ) {
						break;
					}
					
				}
				
				if (( digits != default(object) )) {
					while (( s.Length < ((int) (global::haxe.lang.Runtime.toInt(digits)) ) )) {
						s = global::haxe.lang.Runtime.concat("0", s);
					}
					
				}
				
				return s;
			}
		}
		
		
		public static int fastCodeAt(string s, int index) {
			unchecked {
				if (((bool) (( ((uint) (index) ) < s.Length )) )) {
					return ((int) (s[index]) );
				}
				else {
					return -1;
				}
				
			}
		}
		
		
		public static global::haxe.iterators.StringIterator iterator(string s) {
			return new global::haxe.iterators.StringIterator(((string) (s) ));
		}
		
		
		public static global::haxe.iterators.StringKeyValueIterator keyValueIterator(string s) {
			return new global::haxe.iterators.StringKeyValueIterator(((string) (s) ));
		}
		
		
		public static bool isEof(int c) {
			unchecked {
				return ( c == -1 );
			}
		}
		
		
		[global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
		public static string quoteUnixArg(string argument) {
			if (( argument == "" )) {
				return "\'\'";
			}
			else if ( ! (new global::haxe.root.EReg("[^a-zA-Z0-9_@%+=:,./-]", "").match(argument)) ) {
				return argument;
			}
			else {
				return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("\'", global::haxe.root.StringTools.replace(argument, "\'", "\'\"\'\"\'")), "\'");
			}
			
		}
		
		
		[global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
		public static global::haxe.root.Array winMetaCharacters;
		
		[global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
		public static string quoteWinArg(string argument, bool escapeMetaCharacters) {
			unchecked {
				string argument1 = argument;
				if ( ! (new global::haxe.root.EReg("^[^ \t\\\\\"]+$", "").match(argument1)) ) {
					global::haxe.root.StringBuf result = new global::haxe.root.StringBuf();
					bool needquote = ( ( ( global::haxe.lang.StringExt.indexOf(argument1, " ", null) != -1 ) || ( global::haxe.lang.StringExt.indexOf(argument1, "\t", null) != -1 ) ) || ( argument1 == "" ) );
					if (needquote) {
						result.b.Append(((string) ("\"") ));
					}
					
					global::haxe.root.StringBuf bs_buf = new global::haxe.root.StringBuf();
					{
						int _g = 0;
						int _g1 = argument1.Length;
						while (( _g < _g1 )) {
							int i = _g++;
							{
								object _g2 = global::haxe.lang.StringExt.charCodeAt(argument1, i);
								if (( _g2 == default(object) )) {
									object c = _g2;
									{
										if (( bs_buf.b.Length > 0 )) {
											{
												string x = bs_buf.b.ToString();
												result.b.Append(((string) (global::haxe.root.Std.@string(x)) ));
											}
											
											bs_buf = new global::haxe.root.StringBuf();
										}
										
										result.addChar(((int) (global::haxe.lang.Runtime.toInt(c)) ));
									}
									
								}
								else {
									switch (((int) (global::haxe.lang.Runtime.toInt((_g2))) )) {
										case 34:
										{
											string bs = bs_buf.b.ToString();
											result.b.Append(((string) (global::haxe.root.Std.@string(bs)) ));
											result.b.Append(((string) (global::haxe.root.Std.@string(bs)) ));
											bs_buf = new global::haxe.root.StringBuf();
											result.b.Append(((string) ("\\\"") ));
											break;
										}
										
										
										case 92:
										{
											bs_buf.b.Append(((string) ("\\") ));
											break;
										}
										
										
										default:
										{
											object c1 = _g2;
											{
												if (( bs_buf.b.Length > 0 )) {
													{
														string x1 = bs_buf.b.ToString();
														result.b.Append(((string) (global::haxe.root.Std.@string(x1)) ));
													}
													
													bs_buf = new global::haxe.root.StringBuf();
												}
												
												result.addChar(((int) (global::haxe.lang.Runtime.toInt(c1)) ));
											}
											
											break;
										}
										
									}
									
								}
								
							}
							
						}
						
					}
					
					{
						string x2 = bs_buf.b.ToString();
						result.b.Append(((string) (global::haxe.root.Std.@string(x2)) ));
					}
					
					if (needquote) {
						{
							string x3 = bs_buf.b.ToString();
							result.b.Append(((string) (global::haxe.root.Std.@string(x3)) ));
						}
						
						result.b.Append(((string) ("\"") ));
					}
					
					argument1 = result.b.ToString();
				}
				
				if (escapeMetaCharacters) {
					global::haxe.root.StringBuf result1 = new global::haxe.root.StringBuf();
					{
						int _g3 = 0;
						int _g11 = argument1.Length;
						while (( _g3 < _g11 )) {
							int i1 = _g3++;
							object c2 = global::haxe.lang.StringExt.charCodeAt(argument1, i1);
							if (( global::haxe.SysTools.winMetaCharacters.indexOf(c2, null) >= 0 )) {
								result1.addChar(94);
							}
							
							result1.addChar(((int) (global::haxe.lang.Runtime.toInt(c2)) ));
						}
						
					}
					
					return result1.b.ToString();
				}
				else {
					return argument1;
				}
				
			}
		}
		
		
		public static int MIN_SURROGATE_CODE_POINT;
		
		public static int utf16CodePointAt(string s, int index) {
			unchecked {
				int c = ( (((bool) (( ((uint) (index) ) < s.Length )) )) ? (((int) (s[index]) )) : (-1) );
				if (( ( c >= 55296 ) && ( c <= 56319 ) )) {
					int index1 = ( index + 1 );
					c = ( ( ( c - 55232 ) << 10 ) | ( (( (((bool) (( ((uint) (index1) ) < s.Length )) )) ? (((int) (s[index1]) )) : (-1) )) & 1023 ) );
				}
				
				return c;
			}
		}
		
		
	}
}


