// Generated by Haxe 4.1.0-rc.1+0d88c583b
using haxe.root;

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.root {
	public class Sys : global::haxe.lang.HxObject {
		
		public Sys(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Sys() {
			global::haxe.root.Sys.__hx_ctor__Sys(this);
		}
		
		
		protected static void __hx_ctor__Sys(global::haxe.root.Sys __hx_this) {
		}
		
		
		public static global::haxe.ds.StringMap _env;
		
		public static global::haxe.root.Array _args;
		
		public static void print(object v) {
			global::System.Console.Write(((object) (v) ));
		}
		
		
		public static void println(object v) {
			global::System.Console.WriteLine(((object) (v) ));
		}
		
		
		public static global::haxe.root.Array args() {
			if (( global::haxe.root.Sys._args == null )) {
				string[] native = global::System.Environment.GetCommandLineArgs();
				object[] ret = new object[( native as global::System.Array ).Length];
				{
					int _g = 0;
					int _g1 = ( native as global::System.Array ).Length;
					while (( _g < _g1 )) {
						int i = _g++;
						ret[i] = ((string) (native[i]) );
					}
					
				}
				
				object[] dyn = ret;
				global::haxe.root.Array ret1 = new global::haxe.root.Array(((object[]) (dyn) ));
				string __temp_expr1 = global::haxe.lang.Runtime.toString(ret1.shift());
				global::haxe.root.Sys._args = ret1;
			}
			
			return global::haxe.root.Sys._args.copy();
		}
		
		
		public static string getEnv(string s) {
			return global::System.Environment.GetEnvironmentVariable(((string) (s) ));
		}
		
		
		public static void putEnv(string s, string v) {
			global::System.Environment.SetEnvironmentVariable(((string) (s) ), ((string) (v) ));
			if (( global::haxe.root.Sys._env != null )) {
				global::haxe.root.Sys._env.@set(((string) (s) ), ((object) (v) ));
			}
			
		}
		
		
		public static global::haxe.ds.StringMap environment() {
			if (( global::haxe.root.Sys._env == null )) {
				global::haxe.ds.StringMap e = global::haxe.root.Sys._env = new global::haxe.ds.StringMap();
				global::System.Collections.IDictionaryEnumerator nenv = ((global::System.Collections.IDictionaryEnumerator) (( global::System.Environment.GetEnvironmentVariables() as global::System.Collections.IEnumerable ).GetEnumerator()) );
				while (( nenv as global::System.Collections.IEnumerator ).MoveNext()) {
					e.@set(global::haxe.lang.Runtime.toString(nenv.Key), ((object) (nenv.Value) ));
				}
				
			}
			
			return ((global::haxe.ds.StringMap) (global::haxe.root.Sys._env) );
		}
		
		
		public static void sleep(double seconds) {
			unchecked {
				global::System.Threading.Thread.Sleep(((int) (((int) (( seconds * 1000 )) )) ));
			}
		}
		
		
		public static bool setTimeLocale(string loc) {
			return false;
		}
		
		
		public static string getCwd() {
			return global::System.IO.Directory.GetCurrentDirectory();
		}
		
		
		public static void setCwd(string s) {
			global::System.IO.Directory.SetCurrentDirectory(((string) (s) ));
		}
		
		
		public static string systemName() {
			unchecked {
				switch (global::haxe.lang.Runtime.concat(global::haxe.root.Std.@string(global::System.Environment.OSVersion.Platform), "")) {
					case "MacOSX":
					{
						return "Mac";
					}
					
					
					case "Unix":
					{
						return "Linux";
					}
					
					
					case "Xbox":
					{
						return "Xbox";
					}
					
					
					default:
					{
						int ver = ((int) (global::haxe.lang.Runtime.toInt(((object) (global::System.Environment.OSVersion.Platform) ))) );
						if (( ( ( ver == 4 ) || ( ver == 6 ) ) || ( ver == 128 ) )) {
							return "Linux";
						}
						
						return "Windows";
					}
					
				}
				
			}
		}
		
		
		public static int command(string cmd, global::haxe.root.Array args) {
			global::System.Diagnostics.Process proc = global::sys.io.Process.createNativeProcess(cmd, args);
			global::System.Diagnostics.DataReceivedEventHandler this1 = ((global::System.Diagnostics.DataReceivedEventHandler) (( (( global::Sys_command_107__Fun.__hx_current != null )) ? (global::Sys_command_107__Fun.__hx_current) : (global::Sys_command_107__Fun.__hx_current = ((global::Sys_command_107__Fun) (new global::Sys_command_107__Fun()) )) ).Delegate) );
			proc.OutputDataReceived += ((global::System.Diagnostics.DataReceivedEventHandler) (this1) );
			global::haxe.io.Output stderr = ((global::haxe.io.Output) (new global::cs.io.NativeOutput(((global::System.IO.Stream) (global::System.Console.OpenStandardError()) ))) );
			global::System.Diagnostics.DataReceivedEventHandler this2 = ((global::System.Diagnostics.DataReceivedEventHandler) (new global::Sys_command_113__Fun(stderr).Delegate) );
			proc.ErrorDataReceived += ((global::System.Diagnostics.DataReceivedEventHandler) (this2) );
			proc.Start();
			proc.BeginOutputReadLine();
			proc.BeginErrorReadLine();
			proc.WaitForExit();
			int exitCode = proc.ExitCode;
			( proc as global::System.ComponentModel.Component ).Dispose();
			return exitCode;
		}
		
		
		public static void exit(int code) {
			global::System.Environment.Exit(((int) (code) ));
		}
		
		
		public static readonly long epochTicks = new global::System.DateTime(1970, 1, 1).Ticks;
		
		public static double time() {
			return ( ((double) (((long) (( ((long) (global::System.DateTime.UtcNow.Ticks) ) - ((long) (global::haxe.root.Sys.epochTicks) ) )) )) ) / ((double) (global::System.TimeSpan.TicksPerSecond) ) );
		}
		
		
		public static double cpuTime() {
			unchecked {
				return ( ((double) (global::System.Environment.TickCount) ) / 1000 );
			}
		}
		
		
		public static string executablePath() {
			return global::System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase;
		}
		
		
		public static string programPath() {
			return global::System.Reflection.Assembly.GetExecutingAssembly().Location;
		}
		
		
		public static int getChar(bool echo) {
			return ((int) (global::System.Console.ReadKey(((bool) ( ! (echo) ) )).KeyChar) );
		}
		
		
		public static global::haxe.io.Input stdin() {
			return new global::cs.io.NativeInput(((global::System.IO.Stream) (global::System.Console.OpenStandardInput()) ));
		}
		
		
		public static global::haxe.io.Output stdout() {
			return new global::cs.io.NativeOutput(((global::System.IO.Stream) (global::System.Console.OpenStandardOutput()) ));
		}
		
		
		public static global::haxe.io.Output stderr() {
			return new global::cs.io.NativeOutput(((global::System.IO.Stream) (global::System.Console.OpenStandardError()) ));
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
public class Sys_command_107__Fun : global::haxe.lang.Function {
	
	public Sys_command_107__Fun() : base(2, 0) {
	}
	
	
	public static global::Sys_command_107__Fun __hx_current;
	
	public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
		global::System.Diagnostics.DataReceivedEventArgs evtArgs = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((global::System.Diagnostics.DataReceivedEventArgs) (((object) (__fn_float2) )) )) : (((global::System.Diagnostics.DataReceivedEventArgs) (__fn_dyn2) )) );
		object p = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float1) )) : (((object) (__fn_dyn1) )) );
		this.Delegate(p, evtArgs);
		return null;
	}
	
	
	public void Delegate(object p, global::System.Diagnostics.DataReceivedEventArgs evtArgs) {
		string data = evtArgs.Data;
		if (( (( data != null )) ? (( data != "" )) : (false) )) {
			global::System.Console.WriteLine(((object) (data) ));
		}
		
	}
	
	
}



#pragma warning disable 109, 114, 219, 429, 168, 162
public class Sys_command_113__Fun : global::haxe.lang.Function {
	
	public Sys_command_113__Fun(global::haxe.io.Output stderr) : base(2, 0) {
		this.stderr = stderr;
	}
	
	
	public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
		global::System.Diagnostics.DataReceivedEventArgs evtArgs1 = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((global::System.Diagnostics.DataReceivedEventArgs) (((object) (__fn_float2) )) )) : (((global::System.Diagnostics.DataReceivedEventArgs) (__fn_dyn2) )) );
		object p1 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float1) )) : (((object) (__fn_dyn1) )) );
		this.Delegate(p1, evtArgs1);
		return null;
	}
	
	
	public void Delegate(object p1, global::System.Diagnostics.DataReceivedEventArgs evtArgs1) {
		string data1 = evtArgs1.Data;
		if (( (( data1 != null )) ? (( data1 != "" )) : (false) )) {
			this.stderr.writeString(global::haxe.lang.Runtime.concat(data1, "\n"), null);
		}
		
	}
	
	
	public global::haxe.io.Output stderr;
	
}


