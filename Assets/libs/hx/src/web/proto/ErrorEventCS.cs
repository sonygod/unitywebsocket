// Generated by Haxe 4.1.0-rc.1+0d88c583b
using haxe.root;

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace web.proto {
	public class ErrorEventCS : global::openfl.events.ErrorEvent {
		
		static ErrorEventCS() {
			global::web.proto.ErrorEventCS.ERROR = ((string) ("error") );
		}
		
		
		public ErrorEventCS(global::haxe.lang.EmptyObject empty) : base(global::haxe.lang.EmptyObject.EMPTY) {
		}
		
		
		public ErrorEventCS(string type, string text, object playerID, object bubbles, object cancelable, object id) : base(global::haxe.lang.EmptyObject.EMPTY) {
			global::web.proto.ErrorEventCS.__hx_ctor_web_proto_ErrorEventCS(this, type, text, playerID, bubbles, cancelable, id);
		}
		
		
		protected static void __hx_ctor_web_proto_ErrorEventCS(global::web.proto.ErrorEventCS __hx_this, string type, string text, object playerID, object bubbles, object cancelable, object id) {
			unchecked {
				int id1 = ( (( id == default(object) )) ? (0) : (((int) (global::haxe.lang.Runtime.toInt(id)) )) );
				bool cancelable1 = ( (( cancelable == default(object) )) ? (false) : (global::haxe.lang.Runtime.toBool(cancelable)) );
				bool bubbles1 = ( (( bubbles == default(object) )) ? (false) : (global::haxe.lang.Runtime.toBool(bubbles)) );
				int playerID1 = ( (( playerID == default(object) )) ? (-1) : (((int) (global::haxe.lang.Runtime.toInt(playerID)) )) );
				if (( text == null )) {
					text = "";
				}
				
				global::openfl.events.ErrorEvent.__hx_ctor_openfl_events_ErrorEvent(__hx_this, type, bubbles1, cancelable1, text, id1);
				__hx_this.playerID = playerID1;
			}
		}
		
		
		public static new string ERROR;
		
		public int playerID;
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1213433212:
					{
						this.playerID = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1213433212:
					{
						this.playerID = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1213433212:
					{
						return this.playerID;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1213433212:
					{
						return ((double) (this.playerID) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override void __hx_getFields(global::haxe.root.Array baseArr) {
			baseArr.push("playerID");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}


