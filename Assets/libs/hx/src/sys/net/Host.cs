// Generated by Haxe 4.0.0+ef18b627e
using haxe.root;

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace sys.net {
	public class Host : global::haxe.lang.HxObject {
		
		public Host(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Host(string name) {
			#line 47 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\sys\\net\\Host.hx"
			global::sys.net.Host.__hx_ctor_sys_net_Host(this, name);
		}
		#line default
		
		protected static void __hx_ctor_sys_net_Host(global::sys.net.Host __hx_this, string name) {
			unchecked {
				#line 48 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\sys\\net\\Host.hx"
				global::haxe.Log.trace.__hx_invoke2_o(default(double), global::haxe.lang.Runtime.concat("host name=", name), default(double), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"new", "sys.net.Host", "sys/net/Host.hx"}, new int[]{1981972957}, new double[]{((double) (48) )}));
				__hx_this.host = name;
				#line 58 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\sys\\net\\Host.hx"
				global::System.Net.IPAddress[] ips = global::System.Net.Dns.GetHostAddresses(((string) (name) ));
				__hx_this.ipAddress = ((global::System.Net.IPAddress) (ips[0]) );
			}
			#line default
		}
		
		
		public static string localhost() {
			#line 71 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\sys\\net\\Host.hx"
			return global::System.Net.Dns.GetHostName();
		}
		#line default
		
		public global::System.Net.IPHostEntry hostEntry;
		
		public global::System.Net.IPAddress ipAddress;
		
		public string host;
		
		public int ip;
		
		public virtual int get_ip() {
			#line 44 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\sys\\net\\Host.hx"
			return new global::haxe.io.BytesInput(global::haxe.io.Bytes.ofData(this.ipAddress.GetAddressBytes()), null, null).readInt32();
		}
		#line default
		
		public virtual string toString() {
			#line 63 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\sys\\net\\Host.hx"
			return this.ipAddress.ToString();
		}
		#line default
		
		public virtual string reverse() {
			#line 67 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\sys\\net\\Host.hx"
			return this.hostEntry.HostName;
		}
		#line default
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				#line 35 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\sys\\net\\Host.hx"
				switch (hash) {
					case 23527:
					{
						#line 35 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\sys\\net\\Host.hx"
						this.ip = ((int) (@value) );
						#line 35 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\sys\\net\\Host.hx"
						return @value;
					}
					
					
					default:
					{
						#line 35 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\sys\\net\\Host.hx"
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
			#line default
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				#line 35 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\sys\\net\\Host.hx"
				switch (hash) {
					case 23527:
					{
						#line 35 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\sys\\net\\Host.hx"
						this.ip = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						#line 35 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\sys\\net\\Host.hx"
						return @value;
					}
					
					
					case 1158860648:
					{
						#line 35 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\sys\\net\\Host.hx"
						this.host = global::haxe.lang.Runtime.toString(@value);
						#line 35 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\sys\\net\\Host.hx"
						return @value;
					}
					
					
					case 1970444429:
					{
						#line 35 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\sys\\net\\Host.hx"
						this.ipAddress = ((global::System.Net.IPAddress) (@value) );
						#line 35 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\sys\\net\\Host.hx"
						return @value;
					}
					
					
					case 305151978:
					{
						#line 35 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\sys\\net\\Host.hx"
						this.hostEntry = ((global::System.Net.IPHostEntry) (@value) );
						#line 35 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\sys\\net\\Host.hx"
						return @value;
					}
					
					
					default:
					{
						#line 35 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\sys\\net\\Host.hx"
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
			#line default
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				#line 35 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\sys\\net\\Host.hx"
				switch (hash) {
					case 452737314:
					{
						#line 35 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\sys\\net\\Host.hx"
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "reverse", 452737314)) );
					}
					
					
					case 946786476:
					{
						#line 35 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\sys\\net\\Host.hx"
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "toString", 946786476)) );
					}
					
					
					case 590345008:
					{
						#line 35 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\sys\\net\\Host.hx"
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "get_ip", 590345008)) );
					}
					
					
					case 23527:
					{
						#line 35 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\sys\\net\\Host.hx"
						return this.ip;
					}
					
					
					case 1158860648:
					{
						#line 35 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\sys\\net\\Host.hx"
						return this.host;
					}
					
					
					case 1970444429:
					{
						#line 35 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\sys\\net\\Host.hx"
						return this.ipAddress;
					}
					
					
					case 305151978:
					{
						#line 35 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\sys\\net\\Host.hx"
						return this.hostEntry;
					}
					
					
					default:
					{
						#line 35 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\sys\\net\\Host.hx"
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
			#line default
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				#line 35 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\sys\\net\\Host.hx"
				switch (hash) {
					case 23527:
					{
						#line 35 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\sys\\net\\Host.hx"
						return ((double) (this.ip) );
					}
					
					
					default:
					{
						#line 35 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\sys\\net\\Host.hx"
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
			#line default
		}
		
		
		public override object __hx_invokeField(string field, int hash, object[] dynargs) {
			unchecked {
				#line 35 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\sys\\net\\Host.hx"
				switch (hash) {
					case 452737314:
					{
						#line 35 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\sys\\net\\Host.hx"
						return this.reverse();
					}
					
					
					case 946786476:
					{
						#line 35 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\sys\\net\\Host.hx"
						return this.toString();
					}
					
					
					case 590345008:
					{
						#line 35 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\sys\\net\\Host.hx"
						return this.get_ip();
					}
					
					
					default:
					{
						#line 35 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\sys\\net\\Host.hx"
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
			}
			#line default
		}
		
		
		public override void __hx_getFields(global::haxe.root.Array baseArr) {
			#line 35 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\sys\\net\\Host.hx"
			baseArr.push("ip");
			#line 35 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\sys\\net\\Host.hx"
			baseArr.push("host");
			#line 35 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\sys\\net\\Host.hx"
			baseArr.push("ipAddress");
			#line 35 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\sys\\net\\Host.hx"
			baseArr.push("hostEntry");
			#line 35 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\sys\\net\\Host.hx"
			base.__hx_getFields(baseArr);
		}
		#line default
		
		public override string ToString(){
			return this.toString();
		}
		
		
	}
}


