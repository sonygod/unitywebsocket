// Generated by Haxe 4.1.0-rc.1+0d88c583b
using haxe.root;

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace sys.io {
	public class Process : global::haxe.lang.HxObject {
		
		public Process(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Process(string cmd, global::haxe.root.Array args, object detached) {
			global::sys.io.Process.__hx_ctor_sys_io_Process(this, cmd, args, detached);
		}
		
		
		protected static void __hx_ctor_sys_io_Process(global::sys.io.Process __hx_this, string cmd, global::haxe.root.Array args, object detached) {
			if (global::haxe.lang.Runtime.toBool((detached))) {
				throw global::haxe.lang.HaxeException.wrap("Detached process is not supported on this platform");
			}
			
			__hx_this.native = global::sys.io.Process.createNativeProcess(cmd, args);
			__hx_this.native.Start();
			__hx_this.stdout = new global::cs.io.NativeInput(((global::System.IO.Stream) (__hx_this.native.StandardOutput.BaseStream) ));
			__hx_this.stderr = new global::cs.io.NativeInput(((global::System.IO.Stream) (__hx_this.native.StandardError.BaseStream) ));
			__hx_this.stdin = new global::cs.io.NativeOutput(((global::System.IO.Stream) (__hx_this.native.StandardInput.BaseStream) ));
		}
		
		
		public static global::System.Diagnostics.Process createNativeProcess(string cmd, global::haxe.root.Array args) {
			unchecked {
				global::System.Diagnostics.Process native = new global::System.Diagnostics.Process();
				native.StartInfo.CreateNoWindow = ((bool) (true) );
				native.StartInfo.RedirectStandardError = ((bool) (native.StartInfo.RedirectStandardInput = ((bool) (native.StartInfo.RedirectStandardOutput = ((bool) (true) )) )) );
				if (( args != null )) {
					if (( ( global::haxe.lang.StringExt.indexOf(cmd, "/", null) != -1 ) || ( global::haxe.lang.StringExt.indexOf(cmd, "\\", null) != -1 ) )) {
						cmd = global::sys.FileSystem.fullPath(cmd);
					}
					
					native.StartInfo.FileName = ((string) (cmd) );
					native.StartInfo.UseShellExecute = ((bool) (false) );
					native.StartInfo.Arguments = ((string) (global::sys.io.Process.buildArgumentsString(args)) );
				}
				else {
					if (( global::haxe.root.Sys.systemName() == "Windows" )) {
						global::System.Diagnostics.ProcessStartInfo tmp = native.StartInfo;
						string _g = global::System.Environment.GetEnvironmentVariable(((string) ("COMSPEC") ));
						string tmp1 = null;
						if (( _g == null )) {
							tmp1 = "cmd.exe";
						}
						else {
							string comspec = _g;
							tmp1 = comspec;
						}
						
						tmp.FileName = ((string) (tmp1) );
						native.StartInfo.Arguments = ((string) (global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("/C \"", cmd), "\"")) );
					}
					else {
						native.StartInfo.FileName = ((string) ("/bin/sh") );
						native.StartInfo.Arguments = ((string) (global::sys.io.Process.buildArgumentsString(new global::haxe.root.Array(new object[]{"-c", cmd}))) );
					}
					
					native.StartInfo.UseShellExecute = ((bool) (false) );
				}
				
				return native;
			}
		}
		
		
		public static string buildArgumentsString(global::haxe.root.Array args) {
			unchecked {
				if (( global::haxe.root.Sys.systemName() == "Windows" )) {
					global::haxe.root.Array _g = new global::haxe.root.Array(new object[]{});
					{
						int _g1 = 0;
						while (( _g1 < args.length )) {
							string a = global::haxe.lang.Runtime.toString(args.__get(_g1));
							 ++ _g1;
							_g.push(global::haxe.SysTools.quoteWinArg(a, false));
						}
						
					}
					
					return _g.@join(" ");
				}
				else {
					global::haxe.root.Array _g2 = new global::haxe.root.Array(new object[]{});
					{
						int _g11 = 0;
						while (( _g11 < args.length )) {
							string arg = global::haxe.lang.Runtime.toString(args.__get(_g11));
							 ++ _g11;
							global::haxe.root.StringBuf b = new global::haxe.root.StringBuf();
							b.b.Append(((string) ("\"") ));
							{
								int _g12 = 0;
								int _g21 = arg.Length;
								while (( _g12 < _g21 )) {
									int i = _g12++;
									object c = global::haxe.lang.StringExt.charCodeAt(arg, i);
									if (( c == default(object) )) {
									}
									else {
										switch (((int) (global::haxe.lang.Runtime.toInt((c))) )) {
											case 34:
											case 92:
											{
												b.addChar(92);
												break;
											}
											
											
											default:
											{
												break;
											}
											
										}
										
									}
									
									b.addChar(((int) (global::haxe.lang.Runtime.toInt(c)) ));
								}
								
							}
							
							b.b.Append(((string) ("\"") ));
							_g2.push(b.b.ToString());
						}
						
					}
					
					return _g2.@join(" ");
				}
				
			}
		}
		
		
		public global::haxe.io.Input stdout;
		
		public global::haxe.io.Input stderr;
		
		public global::haxe.io.Output stdin;
		
		public global::System.Diagnostics.Process native;
		
		public virtual int getPid() {
			return this.native.Id;
		}
		
		
		public virtual object exitCode(object block) {
			bool block1 = ( (( block == default(object) )) ? (true) : (global::haxe.lang.Runtime.toBool(block)) );
			if (( ( block1 == false ) &&  ! (this.native.HasExited)  )) {
				return null;
			}
			
			this.native.WaitForExit();
			return this.native.ExitCode;
		}
		
		
		public virtual void close() {
			this.native.Close();
		}
		
		
		public virtual void kill() {
			this.native.Kill();
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 572311959:
					{
						this.native = ((global::System.Diagnostics.Process) (@value) );
						return @value;
					}
					
					
					case 68006728:
					{
						this.stdin = ((global::haxe.io.Output) (@value) );
						return @value;
					}
					
					
					case 132916898:
					{
						this.stderr = ((global::haxe.io.Input) (@value) );
						return @value;
					}
					
					
					case 133414859:
					{
						this.stdout = ((global::haxe.io.Input) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1191829406:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "kill", 1191829406)) );
					}
					
					
					case 1214453688:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "close", 1214453688)) );
					}
					
					
					case 25738091:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "exitCode", 25738091)) );
					}
					
					
					case 589599061:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "getPid", 589599061)) );
					}
					
					
					case 572311959:
					{
						return this.native;
					}
					
					
					case 68006728:
					{
						return this.stdin;
					}
					
					
					case 132916898:
					{
						return this.stderr;
					}
					
					
					case 133414859:
					{
						return this.stdout;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, object[] dynargs) {
			unchecked {
				switch (hash) {
					case 1191829406:
					{
						this.kill();
						break;
					}
					
					
					case 1214453688:
					{
						this.close();
						break;
					}
					
					
					case 25738091:
					{
						return this.exitCode(((object) (dynargs[0]) ));
					}
					
					
					case 589599061:
					{
						return this.getPid();
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::haxe.root.Array baseArr) {
			baseArr.push("native");
			baseArr.push("stdin");
			baseArr.push("stderr");
			baseArr.push("stdout");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}


