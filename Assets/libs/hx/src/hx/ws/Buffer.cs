// Generated by Haxe 4.1.0-rc.1+0d88c583b
using haxe.root;

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hx.ws {
	public class Buffer : global::haxe.lang.HxObject {
		
		public Buffer(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Buffer() {
			global::hx.ws.Buffer.__hx_ctor_hx_ws_Buffer(this);
		}
		
		
		protected static void __hx_ctor_hx_ws_Buffer(global::hx.ws.Buffer __hx_this) {
			__hx_this.chunks = new global::haxe.root.Array(new object[]{});
			__hx_this.currentData = null;
			__hx_this.currentOffset = 0;
			__hx_this.length = 0;
			__hx_this.available = 0;
			{
			}
			
		}
		
		
		public int available;
		
		public int length;
		
		public int currentOffset;
		
		public global::haxe.io.Bytes currentData;
		
		public global::haxe.root.Array chunks;
		
		public virtual void writeByte(int v) {
			unchecked {
				global::haxe.io.Bytes b = global::haxe.io.Bytes.alloc(1);
				b.b[0] = ((byte) (v) );
				this.writeBytes(b);
			}
		}
		
		
		public virtual void writeShort(int v) {
			unchecked {
				global::haxe.io.Bytes b = global::haxe.io.Bytes.alloc(2);
				b.b[0] = ((byte) (( ( v >> 8 ) & 255 )) );
				b.b[1] = ((byte) (( v & 255 )) );
				this.writeBytes(b);
			}
		}
		
		
		public virtual void writeInt(int v) {
			unchecked {
				global::haxe.io.Bytes b = global::haxe.io.Bytes.alloc(4);
				b.b[0] = ((byte) (( ( v >> 24 ) & 255 )) );
				b.b[1] = ((byte) (( ( v >> 16 ) & 255 )) );
				b.b[2] = ((byte) (( ( v >> 8 ) & 255 )) );
				b.b[3] = ((byte) (( v & 255 )) );
				this.writeBytes(b);
			}
		}
		
		
		public virtual void writeBytes(global::haxe.io.Bytes data) {
			this.chunks.push(data);
			this.available += data.length;
			this.length = this.available;
		}
		
		
		public virtual global::haxe.io.Bytes readAllAvailableBytes() {
			return this.readBytes(this.available);
		}
		
		
		public virtual string readLine() {
			global::haxe.io.Bytes bytes = this.readUntil("\n");
			if (( bytes == null )) {
				return null;
			}
			
			return bytes.toString().Trim();
		}
		
		
		public virtual global::haxe.root.Array readLinesUntil(string delimiter) {
			global::haxe.io.Bytes bytes = this.readUntil(delimiter);
			if (( bytes == null )) {
				return null;
			}
			
			return global::haxe.lang.StringExt.split(bytes.toString().Trim(), "\n");
		}
		
		
		public virtual global::haxe.io.Bytes readUntil(string delimiter) {
			unchecked {
				int dl = delimiter.Length;
				{
					int _g = 0;
					int _g1 = ( this.available - dl );
					while (( _g < _g1 )) {
						int i = _g++;
						bool matched = true;
						{
							int _g2 = 0;
							int _g11 = dl;
							while (( _g2 < _g11 )) {
								int j = _g2++;
								if (global::haxe.lang.Runtime.eq(this.peekByte(( ( ( this.currentOffset + i ) + j ) + 1 )), global::haxe.lang.StringExt.charCodeAt(delimiter, j))) {
									continue;
								}
								
								matched = false;
								break;
							}
							
						}
						
						if (matched) {
							global::haxe.io.Bytes bytes = this.readBytes(( ( i + dl ) + 1 ));
							return bytes;
						}
						
					}
					
				}
				
				return null;
			}
		}
		
		
		public virtual global::haxe.io.Bytes readBytes(int count) {
			int count2 = ((int) (global::System.Math.Min(((double) (count) ), ((double) (this.available) ))) );
			global::haxe.io.Bytes @out = global::haxe.io.Bytes.alloc(count2);
			{
				int _g = 0;
				int _g1 = count2;
				while (( _g < _g1 )) {
					int n = _g++;
					{
						int v = this.readByte();
						@out.b[n] = ((byte) (v) );
					}
					
				}
				
			}
			
			return @out;
		}
		
		
		public virtual uint readUnsignedShort() {
			unchecked {
				int h = this.readByte();
				int l = this.readByte();
				return ((uint) (( ( h << 8 ) | l )) );
			}
		}
		
		
		public virtual uint readUnsignedInt() {
			unchecked {
				int v3 = this.readByte();
				int v2 = this.readByte();
				int v1 = this.readByte();
				int v0 = this.readByte();
				return ((uint) (( ( ( ( v3 << 24 ) | ( v2 << 16 ) ) | ( v1 << 8 ) ) | v0 )) );
			}
		}
		
		
		public virtual int readByte() {
			if (( this.available <= 0 )) {
				throw global::haxe.lang.HaxeException.wrap("No bytes available");
			}
			
			while (( ( this.currentData == null ) || ( this.currentOffset >= this.currentData.length ) )) {
				this.currentOffset = 0;
				this.currentData = ((global::haxe.io.Bytes) (this.chunks.shift()) );
			}
			
			this.available--;
			this.length = this.available;
			return ((int) (((byte) (this.currentData.b[this.currentOffset++]) )) );
		}
		
		
		public virtual int peekByte(int offset) {
			if (( this.available <= 0 )) {
				throw global::haxe.lang.HaxeException.wrap("No bytes available");
			}
			
			int tempOffset = offset;
			global::haxe.io.Bytes tempData = ((global::haxe.io.Bytes) (this.chunks.__get(0)) );
			if (( tempData == null )) {
				tempData = this.currentData;
			}
			
			int chunkIndex = 0;
			while (( tempOffset >= tempData.length )) {
				tempOffset -= tempData.length;
				 ++ chunkIndex;
				tempData = ((global::haxe.io.Bytes) (this.chunks.__get(chunkIndex)) );
			}
			
			return ((int) (((byte) (tempData.b[tempOffset]) )) );
		}
		
		
		public virtual int peekUntil(int @byte) {
			unchecked {
				int tempOffset = this.currentOffset;
				global::haxe.io.Bytes tempData = ((global::haxe.io.Bytes) (this.chunks.__get(0)) );
				if (( tempData == null )) {
					tempData = this.currentData;
				}
				
				int chunkIndex = 0;
				while (( tempOffset >= tempData.length )) {
					tempOffset -= tempData.length;
					 ++ chunkIndex;
					tempData = ((global::haxe.io.Bytes) (this.chunks.__get(chunkIndex)) );
				}
				
				while (( tempOffset < tempData.length )) {
					if (( ((int) (((byte) (tempData.b[tempOffset]) )) ) == @byte )) {
						return ( tempOffset + 1 );
					}
					
					 ++ tempOffset;
				}
				
				return -1;
			}
		}
		
		
		public virtual bool endsWith(string e) {
			int i = ( this.available - e.Length );
			int n = this.currentOffset;
			while (( i < this.available )) {
				if (( ! (global::haxe.lang.Runtime.eq(this.peekByte(i), global::haxe.lang.StringExt.charCodeAt(e, n))) )) {
					return false;
				}
				
				 ++ i;
				 ++ n;
			}
			
			return true;
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1134303404:
					{
						this.currentOffset = ((int) (@value) );
						return @value;
					}
					
					
					case 520590566:
					{
						this.length = ((int) (@value) );
						return @value;
					}
					
					
					case 2005096905:
					{
						this.available = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1152047462:
					{
						this.chunks = ((global::haxe.root.Array) (@value) );
						return @value;
					}
					
					
					case 2062888707:
					{
						this.currentData = ((global::haxe.io.Bytes) (@value) );
						return @value;
					}
					
					
					case 1134303404:
					{
						this.currentOffset = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 520590566:
					{
						this.length = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 2005096905:
					{
						this.available = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1538685534:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "endsWith", 1538685534)) );
					}
					
					
					case 1154061571:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "peekUntil", 1154061571)) );
					}
					
					
					case 401708611:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "peekByte", 401708611)) );
					}
					
					
					case 1763375486:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "readByte", 1763375486)) );
					}
					
					
					case 89107268:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "readUnsignedInt", 89107268)) );
					}
					
					
					case 1997218321:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "readUnsignedShort", 1997218321)) );
					}
					
					
					case 243225909:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "readBytes", 243225909)) );
					}
					
					
					case 2010580328:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "readUntil", 2010580328)) );
					}
					
					
					case 1115112725:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "readLinesUntil", 1115112725)) );
					}
					
					
					case 1873474154:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "readLine", 1873474154)) );
					}
					
					
					case 1224228525:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "readAllAvailableBytes", 1224228525)) );
					}
					
					
					case 1381630732:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "writeBytes", 1381630732)) );
					}
					
					
					case 602959184:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "writeInt", 602959184)) );
					}
					
					
					case 283737885:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "writeShort", 283737885)) );
					}
					
					
					case 1238832007:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "writeByte", 1238832007)) );
					}
					
					
					case 1152047462:
					{
						return this.chunks;
					}
					
					
					case 2062888707:
					{
						return this.currentData;
					}
					
					
					case 1134303404:
					{
						return this.currentOffset;
					}
					
					
					case 520590566:
					{
						return this.length;
					}
					
					
					case 2005096905:
					{
						return this.available;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1134303404:
					{
						return ((double) (this.currentOffset) );
					}
					
					
					case 520590566:
					{
						return ((double) (this.length) );
					}
					
					
					case 2005096905:
					{
						return ((double) (this.available) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, object[] dynargs) {
			unchecked {
				switch (hash) {
					case 1538685534:
					{
						return this.endsWith(global::haxe.lang.Runtime.toString(((object) (dynargs[0]) )));
					}
					
					
					case 1154061571:
					{
						return this.peekUntil(((int) (global::haxe.lang.Runtime.toInt(((object) (dynargs[0]) ))) ));
					}
					
					
					case 401708611:
					{
						return this.peekByte(((int) (global::haxe.lang.Runtime.toInt(((object) (dynargs[0]) ))) ));
					}
					
					
					case 1763375486:
					{
						return this.readByte();
					}
					
					
					case 89107268:
					{
						return this.readUnsignedInt();
					}
					
					
					case 1997218321:
					{
						return this.readUnsignedShort();
					}
					
					
					case 243225909:
					{
						return this.readBytes(((int) (global::haxe.lang.Runtime.toInt(((object) (dynargs[0]) ))) ));
					}
					
					
					case 2010580328:
					{
						return this.readUntil(global::haxe.lang.Runtime.toString(((object) (dynargs[0]) )));
					}
					
					
					case 1115112725:
					{
						return this.readLinesUntil(global::haxe.lang.Runtime.toString(((object) (dynargs[0]) )));
					}
					
					
					case 1873474154:
					{
						return this.readLine();
					}
					
					
					case 1224228525:
					{
						return this.readAllAvailableBytes();
					}
					
					
					case 1381630732:
					{
						this.writeBytes(((global::haxe.io.Bytes) (((object) (dynargs[0]) )) ));
						break;
					}
					
					
					case 602959184:
					{
						this.writeInt(((int) (global::haxe.lang.Runtime.toInt(((object) (dynargs[0]) ))) ));
						break;
					}
					
					
					case 283737885:
					{
						this.writeShort(((int) (global::haxe.lang.Runtime.toInt(((object) (dynargs[0]) ))) ));
						break;
					}
					
					
					case 1238832007:
					{
						this.writeByte(((int) (global::haxe.lang.Runtime.toInt(((object) (dynargs[0]) ))) ));
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::haxe.root.Array baseArr) {
			baseArr.push("chunks");
			baseArr.push("currentData");
			baseArr.push("currentOffset");
			baseArr.push("length");
			baseArr.push("available");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}


