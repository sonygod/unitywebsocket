// Generated by Haxe 4.1.0-rc.1+0d88c583b
using haxe.root;

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hx.ws {
	public class WebSocketCommon : global::haxe.lang.HxObject {
		
		static WebSocketCommon() {
			unchecked{
				global::hx.ws.WebSocketCommon._nextId = 1;
			}
		}
		
		
		public WebSocketCommon(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public WebSocketCommon(global::hx.ws.cs.NonBlockingSocket socket) {
			global::hx.ws.WebSocketCommon.__hx_ctor_hx_ws_WebSocketCommon(this, socket);
		}
		
		
		protected static void __hx_ctor_hx_ws_WebSocketCommon(global::hx.ws.WebSocketCommon __hx_this, global::hx.ws.cs.NonBlockingSocket socket) {
			__hx_this._lastPong = null;
			__hx_this._payload = null;
			__hx_this._buffer = new global::hx.ws.Buffer();
			__hx_this._lastError = null;
			__hx_this._onopenCalled = null;
			__hx_this.state = global::hx.ws.State.Handshake;
			{
				__hx_this.id = global::hx.ws.WebSocketCommon._nextId++;
				if (( socket == null )) {
					__hx_this._socket = new global::hx.ws.cs.NonBlockingSocket();
					__hx_this._socket.setBlocking(false);
				}
				else {
					__hx_this._socket = socket;
				}
				
			}
			
		}
		
		
		public static int _nextId;
		
		public static global::haxe.io.Bytes generateMask() {
			unchecked {
				global::haxe.io.Bytes maskData = global::haxe.io.Bytes.alloc(4);
				{
					int v = global::haxe.root.Std.random(256);
					maskData.b[0] = ((byte) (v) );
				}
				
				{
					int v1 = global::haxe.root.Std.random(256);
					maskData.b[1] = ((byte) (v1) );
				}
				
				{
					int v2 = global::haxe.root.Std.random(256);
					maskData.b[2] = ((byte) (v2) );
				}
				
				{
					int v3 = global::haxe.root.Std.random(256);
					maskData.b[3] = ((byte) (v3) );
				}
				
				return maskData;
			}
		}
		
		
		public static global::haxe.io.Bytes applyMask(global::haxe.io.Bytes payload, global::haxe.io.Bytes mask) {
			global::haxe.io.Bytes maskedPayload = global::haxe.io.Bytes.alloc(payload.length);
			{
				int _g = 0;
				int _g1 = payload.length;
				while (( _g < _g1 )) {
					int n = _g++;
					maskedPayload.b[n] = ((byte) (( ((int) (((byte) (payload.b[n]) )) ) ^ ((int) (((byte) (mask.b[( n % mask.length )]) )) ) )) );
				}
				
			}
			
			return maskedPayload;
		}
		
		
		public int id;
		
		public global::hx.ws.State state;
		
		public global::hx.ws.cs.NonBlockingSocket _socket;
		
		public object _onopenCalled;
		
		public object _lastError;
		
		public global::haxe.lang.Function onopen;
		
		public global::haxe.lang.Function onclose;
		
		public global::haxe.lang.Function onerror;
		
		public global::haxe.lang.Function onmessage;
		
		public global::hx.ws.Buffer _buffer;
		
		public virtual void send(global::haxe.io.Bytes data) {
			unchecked {
				this.sendFrame(data, ((int) (2) ));
			}
		}
		
		
		public virtual void sendFrame(global::haxe.io.Bytes data, int type) {
			this.writeBytes(this.prepareFrame(data, type, true));
		}
		
		
		public bool _isFinal;
		
		public bool _isMasked;
		
		public int _opcode;
		
		public bool _frameIsBinary;
		
		public int _partialLength;
		
		public int _length;
		
		public global::haxe.io.Bytes _mask;
		
		public global::hx.ws.Buffer _payload;
		
		public global::haxe.root.Date _lastPong;
		
		public virtual void handleData() {
			unchecked {
				switch (this.state._hx_index) {
					case 1:
					{
						if (( this._buffer.available < 2 )) {
							return;
						}
						
						int b0 = this._buffer.readByte();
						int b1 = this._buffer.readByte();
						this._isFinal = ( (( ( b0 >> 7 ) & 1 )) != 0 );
						this._opcode = ((int) (( b0 & 15 )) );
						this._frameIsBinary = ( (( this._opcode == ((int) (1) ) )) ? (false) : (( (( this._opcode == ((int) (2) ) )) ? (true) : (this._frameIsBinary) )) );
						this._partialLength = ( b1 & 127 );
						this._isMasked = ( (( ( b1 >> 7 ) & 1 )) != 0 );
						this.state = global::hx.ws.State.HeadExtraLength;
						this.handleData();
						break;
					}
					
					
					case 2:
					{
						if (( this._partialLength == 126 )) {
							if (( this._buffer.available < 2 )) {
								return;
							}
							
							this._length = ((int) (this._buffer.readUnsignedShort()) );
						}
						else if (( this._partialLength == 127 )) {
							if (( this._buffer.available < 8 )) {
								return;
							}
							
							uint tmp = this._buffer.readUnsignedInt();
							if (((bool) (( tmp != 0 )) )) {
								throw global::haxe.lang.HaxeException.wrap("message too long");
							}
							
							this._length = ((int) (this._buffer.readUnsignedInt()) );
						}
						else {
							this._length = this._partialLength;
						}
						
						this.state = global::hx.ws.State.HeadExtraMask;
						this.handleData();
						break;
					}
					
					
					case 3:
					{
						if (this._isMasked) {
							if (( this._buffer.available < 4 )) {
								return;
							}
							
							this._mask = this._buffer.readBytes(4);
						}
						
						this.state = global::hx.ws.State.Body;
						this.handleData();
						break;
					}
					
					
					case 4:
					{
						if (( this._buffer.available < this._length )) {
							return;
						}
						
						if (( this._payload == null )) {
							this._payload = new global::hx.ws.Buffer();
						}
						
						this._payload.writeBytes(this._buffer.readBytes(this._length));
						switch (this._opcode) {
							case 0:
							case 1:
							case 2:
							{
								if (this._isFinal) {
									global::haxe.io.Bytes messageData = this._payload.readAllAvailableBytes();
									global::haxe.io.Bytes unmaskedMessageData = ( (this._isMasked) ? (global::hx.ws.WebSocketCommon.applyMask(messageData, this._mask)) : (messageData) );
									if (this._frameIsBinary) {
										if (( this.onmessage != null )) {
											global::hx.ws.Buffer buffer = new global::hx.ws.Buffer();
											buffer.writeBytes(unmaskedMessageData);
											this.onmessage.__hx_invoke1_o(default(double), new global::haxe.lang.DynamicObject(new int[]{1113806378, 1292432058}, new object[]{buffer, "binary"}, new int[]{}, new double[]{}));
										}
										
									}
									else {
										string stringPayload = global::hx.ws.Utf8Encoder.decode(unmaskedMessageData);
										global::hx.ws.Log.data(stringPayload, this.id);
										if (( this.onmessage != null )) {
											this.onmessage.__hx_invoke1_o(default(double), new global::haxe.lang.DynamicObject(new int[]{1113806378, 1292432058}, new object[]{stringPayload, "text"}, new int[]{}, new double[]{}));
										}
										
									}
									
									this._payload = null;
								}
								
								break;
							}
							
							
							case 8:
							{
								this.close();
								break;
							}
							
							
							case 9:
							{
								this.sendFrame(this._payload.readAllAvailableBytes(), ((int) (10) ));
								break;
							}
							
							
							case 10:
							{
								this._lastPong = new global::haxe.root.Date(((global::System.DateTime) (global::System.DateTime.Now) ));
								break;
							}
							
							
						}
						
						if (( this.state != global::hx.ws.State.Closed )) {
							this.state = global::hx.ws.State.Head;
						}
						
						this.handleData();
						break;
					}
					
					
					case 5:
					{
						this.close();
						break;
					}
					
					
					default:
					{
						global::haxe.Log.trace.__hx_invoke2_o(default(double), global::haxe.lang.Runtime.concat("State not impl: ", global::haxe.root.Std.@string(this.state)), default(double), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"handleData", "hx.ws.WebSocketCommon", "src/hx/ws/WebSocketCommon.hx"}, new int[]{1981972957}, new double[]{((double) (149) )}));
						break;
					}
					
				}
				
			}
		}
		
		
		public virtual void close() {
			unchecked {
				if (( this.state != global::hx.ws.State.Closed )) {
					try {
						global::hx.ws.Log.debug("Closed", this.id);
						global::haxe.Log.trace.__hx_invoke2_o(default(double), "\u4e3b\u52a8\u5173\u95edsocket!!!!", default(double), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"close", "hx.ws.WebSocketCommon", "src/hx/ws/WebSocketCommon.hx"}, new int[]{1981972957}, new double[]{((double) (157) )}));
						this.sendFrame(global::haxe.io.Bytes.alloc(0), ((int) (8) ));
						this.state = global::hx.ws.State.Closed;
						this._socket.close();
					}
					catch (global::System.Exception catchallException){
						global::haxe.lang.Exceptions.exception = catchallException;
						object e = ( (( catchallException is global::haxe.lang.HaxeException )) ? (((global::haxe.lang.HaxeException) (catchallException) ).obj) : ((object) (catchallException) ) );
					}
					
					
					if (( this.onclose != null )) {
						this.onclose.__hx_invoke0_o();
					}
					
				}
				
			}
		}
		
		
		public virtual void writeBytes(global::haxe.io.Bytes data) {
			try {
				this._socket.output.write(data);
				this._socket.output.flush();
			}
			catch (global::System.Exception catchallException){
				global::haxe.lang.Exceptions.exception = catchallException;
				{
					object e = ( (( catchallException is global::haxe.lang.HaxeException )) ? (((global::haxe.lang.HaxeException) (catchallException) ).obj) : ((object) (catchallException) ) );
					global::hx.ws.Log.debug(global::haxe.lang.Runtime.toString(e), this.id);
					if (( this.onerror != null )) {
						this.onerror.__hx_invoke1_o(default(double), global::haxe.root.Std.@string(e));
					}
					
				}
				
			}
			
			
		}
		
		
		public virtual global::haxe.io.Bytes prepareFrame(global::haxe.io.Bytes data, int type, bool isFinal) {
			unchecked {
				global::hx.ws.Buffer @out = new global::hx.ws.Buffer();
				bool isMasked = false;
				global::haxe.io.Bytes mask = global::hx.ws.WebSocketCommon.generateMask();
				int sizeMask = ( (isMasked) ? (128) : (0) );
				@out.writeByte(( global::hx.ws._OpCode.OpCode_Impl_.toInt(type) | (( (isFinal) ? (128) : (0) )) ));
				if (( data.length < 126 )) {
					@out.writeByte(( data.length | sizeMask ));
				}
				else if (( data.length < 65536 )) {
					@out.writeByte(( 126 | sizeMask ));
					@out.writeShort(data.length);
				}
				else {
					@out.writeByte(( 127 | sizeMask ));
					@out.writeInt(0);
					@out.writeInt(data.length);
				}
				
				if (isMasked) {
					@out.writeBytes(mask);
				}
				
				@out.writeBytes(( (isMasked) ? (global::hx.ws.WebSocketCommon.applyMask(data, mask)) : (data) ));
				return @out.readAllAvailableBytes();
			}
		}
		
		
		public virtual void process() {
			unchecked {
				if (global::haxe.lang.Runtime.eq(this._onopenCalled, false)) {
					this._onopenCalled = true;
					if (( this.onopen != null )) {
						this.onopen.__hx_invoke0_o();
					}
					
				}
				
				if (( this._lastError != null )) {
					object error = this._lastError;
					this._lastError = null;
					if (( this.onerror != null )) {
						this.onerror.__hx_invoke1_o(default(double), error);
					}
					
				}
				
				bool needClose = false;
				object result = null;
				try {
					result = global::hx.ws.cs.NonBlockingSocket.@select(((global::haxe.root.Array) (new global::haxe.root.Array(new object[]{this._socket})) ), default(global::haxe.root.Array), default(global::haxe.root.Array), ((object) (0.01) ));
				}
				catch (global::System.Exception catchallException){
					global::haxe.lang.Exceptions.exception = catchallException;
					{
						object e = ( (( catchallException is global::haxe.lang.HaxeException )) ? (((global::haxe.lang.HaxeException) (catchallException) ).obj) : ((object) (catchallException) ) );
						global::hx.ws.Log.debug(global::haxe.lang.Runtime.concat("Error selecting socket: ", global::haxe.root.Std.@string(e)), null);
						needClose = true;
					}
					
				}
				
				
				if (( ( result != null ) && ( needClose == false ) )) {
					if (( ((global::haxe.root.Array) (global::haxe.lang.Runtime.getField(result, "read", 1269254998, true)) ).length > 0 )) {
						try {
							while (true) {
								global::haxe.io.Bytes data = global::haxe.io.Bytes.alloc(1024);
								int read = this._socket.input.readBytes(data, 0, data.length);
								if (( read <= 0 )) {
									break;
								}
								
								global::hx.ws.Log.debug(global::haxe.lang.Runtime.concat("Bytes read: ", global::haxe.lang.Runtime.toString(read)), this.id);
								this._buffer.writeBytes(data.sub(0, read));
							}
							
						}
						catch (global::System.Exception catchallException1){
							global::haxe.lang.Exceptions.exception = catchallException1;
							{
								object e1 = ( (( catchallException1 is global::haxe.lang.HaxeException )) ? (((global::haxe.lang.HaxeException) (catchallException1) ).obj) : ((object) (catchallException1) ) );
								global::haxe.Log.trace.__hx_invoke2_o(default(double), global::haxe.lang.Runtime.concat("error  ", global::haxe.root.Std.@string(e1)), default(double), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"process", "hx.ws.WebSocketCommon", "src/hx/ws/WebSocketCommon.hx"}, new int[]{1981972957}, new double[]{((double) (260) )}));
								needClose = true;
								if (( e1 is global::System.IO.IOException )) {
									global::System.IO.IOException ioex = ((global::System.IO.IOException) (e1) );
									global::haxe.Log.trace.__hx_invoke2_o(default(double), "cast ok?", default(double), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"process", "hx.ws.WebSocketCommon", "src/hx/ws/WebSocketCommon.hx"}, new int[]{1981972957}, new double[]{((double) (264) )}));
									if (( ( ioex as global::System.Exception ).GetBaseException() is global::System.Net.Sockets.SocketException )) {
										global::System.Net.Sockets.SocketException sockex = ((global::System.Net.Sockets.SocketException) (( ioex as global::System.Exception ).GetBaseException()) );
										needClose = ( sockex.SocketErrorCode != global::System.Net.Sockets.SocketError.WouldBlock );
									}
									else {
										global::haxe.Log.trace.__hx_invoke2_o(default(double), "what? ios is not here?", default(double), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"process", "hx.ws.WebSocketCommon", "src/hx/ws/WebSocketCommon.hx"}, new int[]{1981972957}, new double[]{((double) (269) )}));
									}
									
								}
								
								global::haxe.Log.trace.__hx_invoke2_o(default(double), global::haxe.lang.Runtime.concat("needClose ", global::haxe.root.Std.@string(needClose)), default(double), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"process", "hx.ws.WebSocketCommon", "src/hx/ws/WebSocketCommon.hx"}, new int[]{1981972957}, new double[]{((double) (272) )}));
								if (needClose) {
									global::haxe.Log.trace.__hx_invoke2_o(default(double), global::haxe.lang.Runtime.concat("\u4ec0\u4e48\u7c7b\u578b\uff1f=", global::haxe.root.Std.@string(global::haxe.root.Type.@typeof(e1))), default(double), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"process", "hx.ws.WebSocketCommon", "src/hx/ws/WebSocketCommon.hx"}, new int[]{1981972957}, new double[]{((double) (275) )}));
								}
								
							}
							
						}
						
						
						if (( needClose == false )) {
							this.handleData();
						}
						
					}
					
				}
				
				if (( needClose == true )) {
					if (( this.state != global::hx.ws.State.Closed )) {
						try {
							global::hx.ws.Log.debug("Closed", this.id);
							this.state = global::hx.ws.State.Closed;
							this._socket.close();
						}
						catch (global::System.Exception catchallException2){
							global::haxe.lang.Exceptions.exception = catchallException2;
							object e2 = ( (( catchallException2 is global::haxe.lang.HaxeException )) ? (((global::haxe.lang.HaxeException) (catchallException2) ).obj) : ((object) (catchallException2) ) );
						}
						
						
						if (( this.onclose != null )) {
							this.onclose.__hx_invoke0_o();
						}
						
					}
					
				}
				
			}
		}
		
		
		public virtual void sendHttpRequest(global::hx.ws.HttpRequest httpRequest) {
			string data = httpRequest.build();
			global::hx.ws.Log.data(data, this.id);
			try {
				this._socket.output.write(global::haxe.io.Bytes.ofString(data, null));
				this._socket.output.flush();
			}
			catch (global::System.Exception catchallException){
				global::haxe.lang.Exceptions.exception = catchallException;
				{
					object e = ( (( catchallException is global::haxe.lang.HaxeException )) ? (((global::haxe.lang.HaxeException) (catchallException) ).obj) : ((object) (catchallException) ) );
					if (( this.onerror != null )) {
						this.onerror.__hx_invoke1_o(default(double), global::haxe.root.Std.@string(e));
					}
					
					this.close();
				}
				
			}
			
			
		}
		
		
		public virtual void sendHttpResponse(global::hx.ws.HttpResponse httpResponse) {
			string data = httpResponse.build();
			global::hx.ws.Log.data(data, this.id);
			this._socket.output.write(global::haxe.io.Bytes.ofString(data, null));
			this._socket.output.flush();
		}
		
		
		public virtual global::hx.ws.HttpRequest recvHttpRequest() {
			if ( ! (this._buffer.endsWith("\r\n\r\n")) ) {
				return null;
			}
			
			global::hx.ws.HttpRequest httpRequest = new global::hx.ws.HttpRequest();
			while (true) {
				string line = this._buffer.readLine();
				if (( ( line == null ) || ( line == "" ) )) {
					break;
				}
				
				httpRequest.addLine(line);
			}
			
			global::hx.ws.Log.data(httpRequest.toString(), this.id);
			return httpRequest;
		}
		
		
		public virtual global::hx.ws.HttpResponse recvHttpResponse() {
			global::haxe.root.Array response = this._buffer.readLinesUntil("\r\n\r\n");
			if (( response == null )) {
				return null;
			}
			
			global::hx.ws.HttpResponse httpResponse = new global::hx.ws.HttpResponse();
			{
				int _g = 0;
				while (( _g < response.length )) {
					string line = global::haxe.lang.Runtime.toString(response.__get(_g));
					 ++ _g;
					if (( ( line == null ) || ( line == "" ) )) {
						break;
					}
					
					httpResponse.addLine(line);
				}
				
			}
			
			global::hx.ws.Log.data(httpResponse.toString(), this.id);
			return httpResponse;
		}
		
		
		public string makeWSKey(string key) {
			return global::haxe.crypto.Base64.encode(global::haxe.crypto.Sha1.make(global::haxe.io.Bytes.ofString(global::haxe.lang.Runtime.concat(key, "258EAFA5-E914-47DA-95CA-C5AB0DC85B11"), null)), null);
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 226403973:
					{
						this._length = ((int) (@value) );
						return @value;
					}
					
					
					case 1084680072:
					{
						this._partialLength = ((int) (@value) );
						return @value;
					}
					
					
					case 247056493:
					{
						this._opcode = ((int) (@value) );
						return @value;
					}
					
					
					case 460944723:
					{
						this._lastError = ((object) (@value) );
						return @value;
					}
					
					
					case 1216737445:
					{
						this._onopenCalled = ((object) (@value) );
						return @value;
					}
					
					
					case 23515:
					{
						this.id = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 624660685:
					{
						this._lastPong = ((global::haxe.root.Date) (@value) );
						return @value;
					}
					
					
					case 653138191:
					{
						this._payload = ((global::hx.ws.Buffer) (@value) );
						return @value;
					}
					
					
					case 2070371531:
					{
						this._mask = ((global::haxe.io.Bytes) (@value) );
						return @value;
					}
					
					
					case 226403973:
					{
						this._length = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1084680072:
					{
						this._partialLength = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1554247961:
					{
						this._frameIsBinary = global::haxe.lang.Runtime.toBool(@value);
						return @value;
					}
					
					
					case 247056493:
					{
						this._opcode = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1528381236:
					{
						this._isMasked = global::haxe.lang.Runtime.toBool(@value);
						return @value;
					}
					
					
					case 1457020077:
					{
						this._isFinal = global::haxe.lang.Runtime.toBool(@value);
						return @value;
					}
					
					
					case 1057738399:
					{
						this._buffer = ((global::hx.ws.Buffer) (@value) );
						return @value;
					}
					
					
					case 610977416:
					{
						this.onmessage = ((global::haxe.lang.Function) (@value) );
						return @value;
					}
					
					
					case 1983511113:
					{
						this.onerror = ((global::haxe.lang.Function) (@value) );
						return @value;
					}
					
					
					case 1265845817:
					{
						this.onclose = ((global::haxe.lang.Function) (@value) );
						return @value;
					}
					
					
					case 23388265:
					{
						this.onopen = ((global::haxe.lang.Function) (@value) );
						return @value;
					}
					
					
					case 460944723:
					{
						this._lastError = ((object) (@value) );
						return @value;
					}
					
					
					case 1216737445:
					{
						this._onopenCalled = ((object) (@value) );
						return @value;
					}
					
					
					case 347970898:
					{
						this._socket = ((global::hx.ws.cs.NonBlockingSocket) (@value) );
						return @value;
					}
					
					
					case 67859985:
					{
						this.state = ((global::hx.ws.State) (@value) );
						return @value;
					}
					
					
					case 23515:
					{
						this.id = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 257783349:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "makeWSKey", 257783349)) );
					}
					
					
					case 875792495:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "recvHttpResponse", 875792495)) );
					}
					
					
					case 2075401505:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "recvHttpRequest", 2075401505)) );
					}
					
					
					case 1900901265:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "sendHttpResponse", 1900901265)) );
					}
					
					
					case 1887398975:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "sendHttpRequest", 1887398975)) );
					}
					
					
					case 1900716655:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "process", 1900716655)) );
					}
					
					
					case 2050190630:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "prepareFrame", 2050190630)) );
					}
					
					
					case 1381630732:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "writeBytes", 1381630732)) );
					}
					
					
					case 1214453688:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "close", 1214453688)) );
					}
					
					
					case 1627978226:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "handleData", 1627978226)) );
					}
					
					
					case 624660685:
					{
						return this._lastPong;
					}
					
					
					case 653138191:
					{
						return this._payload;
					}
					
					
					case 2070371531:
					{
						return this._mask;
					}
					
					
					case 226403973:
					{
						return this._length;
					}
					
					
					case 1084680072:
					{
						return this._partialLength;
					}
					
					
					case 1554247961:
					{
						return this._frameIsBinary;
					}
					
					
					case 247056493:
					{
						return this._opcode;
					}
					
					
					case 1528381236:
					{
						return this._isMasked;
					}
					
					
					case 1457020077:
					{
						return this._isFinal;
					}
					
					
					case 1190344133:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "sendFrame", 1190344133)) );
					}
					
					
					case 1280347464:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "send", 1280347464)) );
					}
					
					
					case 1057738399:
					{
						return this._buffer;
					}
					
					
					case 610977416:
					{
						return this.onmessage;
					}
					
					
					case 1983511113:
					{
						return this.onerror;
					}
					
					
					case 1265845817:
					{
						return this.onclose;
					}
					
					
					case 23388265:
					{
						return this.onopen;
					}
					
					
					case 460944723:
					{
						return this._lastError;
					}
					
					
					case 1216737445:
					{
						return this._onopenCalled;
					}
					
					
					case 347970898:
					{
						return this._socket;
					}
					
					
					case 67859985:
					{
						return this.state;
					}
					
					
					case 23515:
					{
						return this.id;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 226403973:
					{
						return ((double) (this._length) );
					}
					
					
					case 1084680072:
					{
						return ((double) (this._partialLength) );
					}
					
					
					case 247056493:
					{
						return ((double) (this._opcode) );
					}
					
					
					case 460944723:
					{
						return ((double) (global::haxe.lang.Runtime.toDouble(this._lastError)) );
					}
					
					
					case 1216737445:
					{
						return ((double) (global::haxe.lang.Runtime.toDouble(this._onopenCalled)) );
					}
					
					
					case 23515:
					{
						return ((double) (this.id) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, object[] dynargs) {
			unchecked {
				switch (hash) {
					case 257783349:
					{
						return this.makeWSKey(global::haxe.lang.Runtime.toString(((object) (dynargs[0]) )));
					}
					
					
					case 875792495:
					{
						return this.recvHttpResponse();
					}
					
					
					case 2075401505:
					{
						return this.recvHttpRequest();
					}
					
					
					case 1900901265:
					{
						this.sendHttpResponse(((global::hx.ws.HttpResponse) (((object) (dynargs[0]) )) ));
						break;
					}
					
					
					case 1887398975:
					{
						this.sendHttpRequest(((global::hx.ws.HttpRequest) (((object) (dynargs[0]) )) ));
						break;
					}
					
					
					case 1900716655:
					{
						this.process();
						break;
					}
					
					
					case 2050190630:
					{
						return this.prepareFrame(((global::haxe.io.Bytes) (((object) (dynargs[0]) )) ), ((int) (global::haxe.lang.Runtime.toInt(((object) (dynargs[1]) ))) ), global::haxe.lang.Runtime.toBool(((object) (dynargs[2]) )));
					}
					
					
					case 1381630732:
					{
						this.writeBytes(((global::haxe.io.Bytes) (((object) (dynargs[0]) )) ));
						break;
					}
					
					
					case 1214453688:
					{
						this.close();
						break;
					}
					
					
					case 1627978226:
					{
						this.handleData();
						break;
					}
					
					
					case 1190344133:
					{
						this.sendFrame(((global::haxe.io.Bytes) (((object) (dynargs[0]) )) ), ((int) (global::haxe.lang.Runtime.toInt(((object) (dynargs[1]) ))) ));
						break;
					}
					
					
					case 1280347464:
					{
						this.send(((global::haxe.io.Bytes) (((object) (dynargs[0]) )) ));
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::haxe.root.Array baseArr) {
			baseArr.push("_lastPong");
			baseArr.push("_payload");
			baseArr.push("_mask");
			baseArr.push("_length");
			baseArr.push("_partialLength");
			baseArr.push("_frameIsBinary");
			baseArr.push("_opcode");
			baseArr.push("_isMasked");
			baseArr.push("_isFinal");
			baseArr.push("_buffer");
			baseArr.push("onmessage");
			baseArr.push("onerror");
			baseArr.push("onclose");
			baseArr.push("onopen");
			baseArr.push("_lastError");
			baseArr.push("_onopenCalled");
			baseArr.push("_socket");
			baseArr.push("state");
			baseArr.push("id");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}


