// Generated by Haxe 4.1.0-rc.1+0d88c583b
using haxe.root;

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace cs {
	public class Lib : global::haxe.lang.HxObject {
		
		public Lib(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Lib() {
			global::cs.Lib.__hx_ctor_cs_Lib(this);
		}
		
		
		protected static void __hx_ctor_cs_Lib(global::cs.Lib __hx_this) {
		}
		
		
		public static string decimalSeparator;
		
		public static void applyCultureChanges() {
			global::System.Globalization.CultureInfo ci = new global::System.Globalization.CultureInfo(((string) (global::System.Threading.Thread.CurrentThread.CurrentCulture.Name) ), ((bool) (true) ));
			global::cs.Lib.decimalSeparator = ci.NumberFormat.NumberDecimalSeparator;
			ci.NumberFormat.NumberDecimalSeparator = ((string) (".") );
			global::System.Threading.Thread.CurrentThread.CurrentCulture = ((global::System.Globalization.CultureInfo) (ci) );
		}
		
		
		public static void revertDefaultCulture() {
			global::System.Globalization.CultureInfo ci = new global::System.Globalization.CultureInfo(((string) (global::System.Threading.Thread.CurrentThread.CurrentCulture.Name) ), ((bool) (true) ));
			global::System.Threading.Thread.CurrentThread.CurrentCulture = ((global::System.Globalization.CultureInfo) (ci) );
		}
		
		
		public static global::System.Type fromNativeType(global::System.Type t) {
			return t;
		}
		
		
		public static global::System.Type toNativeType(global::System.Type cl) {
			return cl;
		}
		
		
		public static global::System.Type toNativeEnum(global::System.Type cl) {
			return cl;
		}
		
		
		public static global::System.Type nativeType(object obj) {
			return obj.GetType();
		}
		
		
		public static global::System.Type getNativeType(object obj) {
			return obj.GetType();
		}
		
		
		public static object[] mkDynamic(object[] native) {
			object[] ret = new object[( native as global::System.Array ).Length];
			{
				int _g = 0;
				int _g1 = ( native as global::System.Array ).Length;
				while (( _g < _g1 )) {
					int i = _g++;
					ret[i] = ((object) (native[i]) );
				}
				
			}
			
			return ret;
		}
		
		
		public static global::haxe.root.Array array(object[] native) {
			object[] ret = new object[( native as global::System.Array ).Length];
			{
				int _g = 0;
				int _g1 = ( native as global::System.Array ).Length;
				while (( _g < _g1 )) {
					int i = _g++;
					ret[i] = ((object) (native[i]) );
				}
				
			}
			
			object[] dyn = ret;
			return new global::haxe.root.Array(((object[]) (dyn) ));
		}
		
		
		public static global::haxe.root.Array arrayAlloc(int size) {
			return new global::haxe.root.Array(((object[]) (new object[size]) ));
		}
		
		
	}
}


