// Generated by Haxe 4.1.0-rc.1+0d88c583b

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.root {
	public class ValueType : global::haxe.lang.Enum {
		
		protected ValueType(int index) : base(index) {
		}
		
		
		public static readonly global::haxe.root.ValueType TNull = new global::haxe.root.ValueType_TNull();
		
		public static readonly global::haxe.root.ValueType TInt = new global::haxe.root.ValueType_TInt();
		
		public static readonly global::haxe.root.ValueType TFloat = new global::haxe.root.ValueType_TFloat();
		
		public static readonly global::haxe.root.ValueType TBool = new global::haxe.root.ValueType_TBool();
		
		public static readonly global::haxe.root.ValueType TObject = new global::haxe.root.ValueType_TObject();
		
		public static readonly global::haxe.root.ValueType TFunction = new global::haxe.root.ValueType_TFunction();
		
		public static global::haxe.root.ValueType TClass(global::System.Type c) {
			return new global::haxe.root.ValueType_TClass(c);
		}
		
		
		public static global::haxe.root.ValueType TEnum(global::System.Type e) {
			return new global::haxe.root.ValueType_TEnum(e);
		}
		
		
		public static readonly global::haxe.root.ValueType TUnknown = new global::haxe.root.ValueType_TUnknown();
		
		protected static readonly string[] __hx_constructs = new string[]{"TNull", "TInt", "TFloat", "TBool", "TObject", "TFunction", "TClass", "TEnum", "TUnknown"};
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.root {
	public sealed class ValueType_TNull : global::haxe.root.ValueType {
		
		public ValueType_TNull() : base(0) {
		}
		
		
		public override string getTag() {
			return "TNull";
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.root {
	public sealed class ValueType_TInt : global::haxe.root.ValueType {
		
		public ValueType_TInt() : base(1) {
		}
		
		
		public override string getTag() {
			return "TInt";
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.root {
	public sealed class ValueType_TFloat : global::haxe.root.ValueType {
		
		public ValueType_TFloat() : base(2) {
		}
		
		
		public override string getTag() {
			return "TFloat";
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.root {
	public sealed class ValueType_TBool : global::haxe.root.ValueType {
		
		public ValueType_TBool() : base(3) {
		}
		
		
		public override string getTag() {
			return "TBool";
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.root {
	public sealed class ValueType_TObject : global::haxe.root.ValueType {
		
		public ValueType_TObject() : base(4) {
		}
		
		
		public override string getTag() {
			return "TObject";
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.root {
	public sealed class ValueType_TFunction : global::haxe.root.ValueType {
		
		public ValueType_TFunction() : base(5) {
		}
		
		
		public override string getTag() {
			return "TFunction";
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.root {
	public sealed class ValueType_TClass : global::haxe.root.ValueType {
		
		public ValueType_TClass(global::System.Type c) : base(6) {
			this.c = c;
		}
		
		
		public override global::haxe.root.Array getParams() {
			return new global::haxe.root.Array(new object[]{this.c});
		}
		
		
		public override string getTag() {
			return "TClass";
		}
		
		
		public override int GetHashCode() {
			unchecked {
				return global::haxe.lang.Enum.paramsGetHashCode(6, new object[]{this.c});
			}
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::haxe.root.ValueType_TClass en = ( other as global::haxe.root.ValueType_TClass );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.c) ), ((object) (en.c) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("TClass", new object[]{this.c});
		}
		
		
		public readonly global::System.Type c;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.root {
	public sealed class ValueType_TEnum : global::haxe.root.ValueType {
		
		public ValueType_TEnum(global::System.Type e) : base(7) {
			this.e = e;
		}
		
		
		public override global::haxe.root.Array getParams() {
			return new global::haxe.root.Array(new object[]{this.e});
		}
		
		
		public override string getTag() {
			return "TEnum";
		}
		
		
		public override int GetHashCode() {
			unchecked {
				return global::haxe.lang.Enum.paramsGetHashCode(7, new object[]{this.e});
			}
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::haxe.root.ValueType_TEnum en = ( other as global::haxe.root.ValueType_TEnum );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::haxe.root.Type.enumEq(((object) (this.e) ), ((object) (en.e) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("TEnum", new object[]{this.e});
		}
		
		
		public readonly global::System.Type e;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.root {
	public sealed class ValueType_TUnknown : global::haxe.root.ValueType {
		
		public ValueType_TUnknown() : base(8) {
		}
		
		
		public override string getTag() {
			return "TUnknown";
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.root {
	public class Type : global::haxe.lang.HxObject {
		
		public Type(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Type() {
			global::haxe.root.Type.__hx_ctor__Type(this);
		}
		
		
		protected static void __hx_ctor__Type(global::haxe.root.Type __hx_this) {
		}
		
		
		public static global::System.Type getClass(object o) {
			if (( ( global::System.Object.ReferenceEquals(((object) (o) ), default(object)) || ( o is global::haxe.lang.DynamicObject ) ) || ( o is global::System.Type ) )) {
				return null;
			}
			
			return ((global::System.Type) (((object) (o) ).GetType()) );
		}
		
		
		public static global::System.Type getEnum(object o) {
			if (( o is global::haxe.lang.Enum )) {
				return ((global::System.Type) (((object) (o) ).GetType().BaseType) );
			}
			else if (( o is global::System.Enum )) {
				return ((global::System.Type) (((object) (o) ).GetType()) );
			}
			
			return null;
		}
		
		
		public static global::System.Type getSuperClass(global::System.Type c) {
			global::System.Type @base = ((global::System.Type) (c) ).BaseType;
			if (( ( global::System.Object.ReferenceEquals(((object) (@base) ), default(object)) || ( ( @base as global::System.Reflection.MemberInfo ).ToString() == "haxe.lang.HxObject" ) ) || ( ( @base as global::System.Reflection.MemberInfo ).ToString() == "System.Object" ) )) {
				return null;
			}
			
			return ((global::System.Type) (@base) );
		}
		
		
		public static string getClassName(global::System.Type c) {
			unchecked {
				string ret = ( ((global::System.Type) (c) ) as global::System.Reflection.MemberInfo ).ToString();
				if (( ( ret.Length > 10 ) && ret.StartsWith("haxe.root.") )) {
					ret = global::haxe.lang.StringExt.substr(ret, 10, null);
				}
				
				switch (ret) {
					case "System.Boolean":
					{
						return "Bool";
					}
					
					
					case "System.Double":
					{
						return "Float";
					}
					
					
					case "System.Int32":
					{
						return "Int";
					}
					
					
					case "System.Object":
					{
						return "Dynamic";
					}
					
					
					case "System.String":
					{
						return "String";
					}
					
					
					case "System.Type":
					{
						return "Class";
					}
					
					
					default:
					{
						return ((string) ((((global::System.String) (((object) (ret) )) )).Split(((char[]) (new char[]{((char) (96) )}) ))[0]) );
					}
					
				}
				
			}
		}
		
		
		public static string getEnumName(global::System.Type e) {
			unchecked {
				string ret = ( ((global::System.Type) (e) ) as global::System.Reflection.MemberInfo ).ToString();
				if (( ( ret.Length > 10 ) && ret.StartsWith("haxe.root.") )) {
					ret = global::haxe.lang.StringExt.substr(ret, 10, null);
				}
				
				return ret;
			}
		}
		
		
		public static global::System.Type resolveClass(string name) {
			unchecked {
				if (( global::haxe.lang.StringExt.indexOf(name, ".", null) == -1 )) {
					name = global::haxe.lang.Runtime.concat("haxe.root.", name);
				}
				
				global::System.Type t = global::System.Type.GetType(((string) (name) ));
				if (global::System.Object.ReferenceEquals(((object) (t) ), default(object))) {
					global::System.Collections.IEnumerator all = ( global::System.AppDomain.CurrentDomain.GetAssemblies() as global::System.Array ).GetEnumerator();
					while (all.MoveNext()) {
						global::System.Reflection.Assembly t2 = ((global::System.Reflection.Assembly) (all.Current) );
						t = t2.GetType(((string) (name) ));
						if ( ! (global::System.Object.ReferenceEquals(((object) (t) ), default(object))) ) {
							break;
						}
						
					}
					
				}
				
				if (global::System.Object.ReferenceEquals(((object) (t) ), default(object))) {
					switch (name) {
						case "haxe.root.Bool":
						{
							return ((global::System.Type) (typeof(bool)) );
						}
						
						
						case "haxe.root.Class":
						{
							return ((global::System.Type) (typeof(global::System.Type)) );
						}
						
						
						case "haxe.root.Dynamic":
						{
							return ((global::System.Type) (typeof(object)) );
						}
						
						
						case "haxe.root.Float":
						{
							return ((global::System.Type) (typeof(double)) );
						}
						
						
						case "haxe.root.Int":
						{
							return ((global::System.Type) (typeof(int)) );
						}
						
						
						case "haxe.root.String":
						{
							return ((global::System.Type) (typeof(string)) );
						}
						
						
						default:
						{
							return null;
						}
						
					}
					
				}
				else {
					return ((global::System.Type) (t) );
				}
				
			}
		}
		
		
		public static global::System.Type resolveEnum(string name) {
			global::System.Type t = global::haxe.root.Type.resolveClass(name);
			if ((  ! (global::System.Object.ReferenceEquals(((object) (t) ), default(object)))  && (( t.BaseType.Equals(((global::System.Type) (typeof(global::System.Enum)) )) || ((global::System.Type) (typeof(global::haxe.lang.Enum)) ).IsAssignableFrom(((global::System.Type) (t) )) )) )) {
				return ((global::System.Type) (t) );
			}
			
			return null;
		}
		
		
		public static object createInstance(global::System.Type cl, global::haxe.root.Array args) {
			if (global::System.Object.ReferenceEquals(((object) (cl) ), ((object) (typeof(string)) ))) {
				return args.__get(0);
			}
			
			global::System.Type t = ((global::System.Type) (cl) );
			if (t.IsInterface) {
				t = global::haxe.root.Type.resolveClass(global::haxe.root.Type.getClassName(cl));
			}
			
			global::System.Reflection.ConstructorInfo[] ctors = t.GetConstructors();
			int tmp = ( ctors as global::System.Array ).Length;
			object[] ret = new object[args.length];
			{
				int _g = 0;
				int _g1 = args.length;
				while (( _g < _g1 )) {
					int i = _g++;
					ret[i] = args.__get(i);
				}
				
			}
			
			return global::haxe.lang.Runtime.callMethod(null, ((global::System.Reflection.MethodBase[]) (ctors) ), tmp, ret);
		}
		
		
		protected static readonly object[] __createEmptyInstance_EMPTY_ARGS = new object[]{((object) (global::haxe.lang.EmptyObject.EMPTY) )};
		
		public static object createEmptyInstance(global::System.Type cl) {
			global::System.Type t = ((global::System.Type) (cl) );
			if (global::System.Object.ReferenceEquals(((object) (t) ), ((object) (typeof(string)) ))) {
				return "";
			}
			
			object res = default(object);
			try {
				res = global::System.Activator.CreateInstance(((global::System.Type) (t) ), ((object[]) (global::haxe.root.Type.__createEmptyInstance_EMPTY_ARGS) ));
			}
			catch (global::System.MissingMemberException _){
				global::haxe.lang.Exceptions.exception = _;
				res = global::System.Activator.CreateInstance(((global::System.Type) (t) ));
			}
			
			
			return res;
		}
		
		
		public static object createEnum(global::System.Type e, string constr, global::haxe.root.Array @params) {
			if (( ( @params == null ) || ( @params.length == 0 ) )) {
				object ret = global::haxe.lang.Runtime.slowGetField(e, constr, true);
				if (( ((object) (ret) ) is global::haxe.lang.Function )) {
					throw global::haxe.lang.HaxeException.wrap(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("Constructor ", constr), " needs parameters"));
				}
				
				return ret;
			}
			else {
				object[] ret1 = new object[@params.length];
				{
					int _g = 0;
					int _g1 = @params.length;
					while (( _g < _g1 )) {
						int i = _g++;
						ret1[i] = @params.__get(i);
					}
					
				}
				
				return global::haxe.lang.Runtime.slowCallField(e, constr, ret1);
			}
			
		}
		
		
		public static object createEnumIndex(global::System.Type e, int index, global::haxe.root.Array @params) {
			global::haxe.root.Array constr = global::haxe.root.Type.getEnumConstructs(e);
			return global::haxe.root.Type.createEnum(((global::System.Type) (e) ), global::haxe.lang.Runtime.toString(constr.__get(index)), ((global::haxe.root.Array) (@params) ));
		}
		
		
		public static global::haxe.root.Array getInstanceFields(global::System.Type c) {
			unchecked {
				if (global::haxe.lang.Runtime.refEq(c, typeof(string))) {
					return global::haxe.lang.StringRefl.fields;
				}
				
				global::System.Type c1 = ((global::System.Type) (c) );
				global::haxe.root.Array ret = new global::haxe.root.Array(new object[]{});
				object initial = global::System.Reflection.BindingFlags.Public;
				global::System.Reflection.BindingFlags this1 = ( (( initial == default(object) )) ? (default(global::System.Reflection.BindingFlags)) : (((global::System.Reflection.BindingFlags) (initial) )) );
				object initial1 = ((global::System.Reflection.BindingFlags) (( ((global::System.Reflection.BindingFlags) (this1) ) | ((global::System.Reflection.BindingFlags) (global::System.Reflection.BindingFlags.Instance) ) )) );
				global::System.Reflection.BindingFlags this2 = ( (( initial1 == default(object) )) ? (default(global::System.Reflection.BindingFlags)) : (((global::System.Reflection.BindingFlags) (initial1) )) );
				object initial2 = ((global::System.Reflection.BindingFlags) (( ((global::System.Reflection.BindingFlags) (this2) ) | ((global::System.Reflection.BindingFlags) (global::System.Reflection.BindingFlags.FlattenHierarchy) ) )) );
				global::System.Reflection.BindingFlags this3 = ( (( initial2 == default(object) )) ? (default(global::System.Reflection.BindingFlags)) : (((global::System.Reflection.BindingFlags) (initial2) )) );
				global::System.Reflection.MemberInfo[] mis = c1.GetMembers(((global::System.Reflection.BindingFlags) (this3) ));
				{
					int _g = 0;
					int _g1 = ( mis as global::System.Array ).Length;
					while (( _g < _g1 )) {
						int i = _g++;
						global::System.Reflection.MemberInfo i1 = ((global::System.Reflection.MemberInfo) (mis[i]) );
						if (( i1 is global::System.Reflection.PropertyInfo )) {
							continue;
						}
						
						string n = i1.Name;
						if ((  ! (n.StartsWith("__hx_"))  && ( (( (((bool) (( ((uint) (0) ) < n.Length )) )) ? (((int) (n[0]) )) : (-1) )) != 46 ) )) {
							switch (n) {
								case "Equals":
								case "GetHashCode":
								case "GetType":
								case "ToString":
								{
									break;
								}
								
								
								default:
								{
									ret.push(n);
									break;
								}
								
							}
							
						}
						
					}
					
				}
				
				return ret;
			}
		}
		
		
		public static global::haxe.root.Array getClassFields(global::System.Type c) {
			if (global::System.Object.ReferenceEquals(((object) (c) ), ((object) (typeof(string)) ))) {
				return new global::haxe.root.Array(new object[]{"fromCharCode"});
			}
			
			global::haxe.root.Array ret = new global::haxe.root.Array(new object[]{});
			object initial = global::System.Reflection.BindingFlags.Public;
			global::System.Reflection.BindingFlags this1 = ( (( initial == default(object) )) ? (default(global::System.Reflection.BindingFlags)) : (((global::System.Reflection.BindingFlags) (initial) )) );
			object initial1 = ((global::System.Reflection.BindingFlags) (( ((global::System.Reflection.BindingFlags) (this1) ) | ((global::System.Reflection.BindingFlags) (global::System.Reflection.BindingFlags.Static) ) )) );
			global::System.Reflection.BindingFlags this2 = ( (( initial1 == default(object) )) ? (default(global::System.Reflection.BindingFlags)) : (((global::System.Reflection.BindingFlags) (initial1) )) );
			global::System.Reflection.MemberInfo[] infos = ((global::System.Type) (c) ).GetMembers(((global::System.Reflection.BindingFlags) (this2) ));
			{
				int _g = 0;
				int _g1 = ( infos as global::System.Array ).Length;
				while (( _g < _g1 )) {
					int i = _g++;
					string name = ((global::System.Reflection.MemberInfo) (infos[i]) ).Name;
					if ( ! (name.StartsWith("__hx_")) ) {
						ret.push(name);
					}
					
				}
				
			}
			
			return ret;
		}
		
		
		public static global::haxe.root.Array getEnumConstructs(global::System.Type e) {
			global::System.Type t = ((global::System.Type) (( ((object) (e) ) as global::System.Type )) );
			object initial = global::System.Reflection.BindingFlags.Static;
			global::System.Reflection.BindingFlags this1 = ( (( initial == default(object) )) ? (default(global::System.Reflection.BindingFlags)) : (((global::System.Reflection.BindingFlags) (initial) )) );
			object initial1 = ((global::System.Reflection.BindingFlags) (( ((global::System.Reflection.BindingFlags) (this1) ) | ((global::System.Reflection.BindingFlags) (global::System.Reflection.BindingFlags.NonPublic) ) )) );
			global::System.Reflection.BindingFlags this2 = ( (( initial1 == default(object) )) ? (default(global::System.Reflection.BindingFlags)) : (((global::System.Reflection.BindingFlags) (initial1) )) );
			global::System.Reflection.FieldInfo f = t.GetField(((string) ("__hx_constructs") ), ((global::System.Reflection.BindingFlags) (this2) ));
			if (( f != null )) {
				global::System.Array values = ((global::System.Array) (f.GetValue(default(object))) );
				string[] copy = new string[values.Length];
				global::System.Array.Copy(((global::System.Array) (values) ), ((global::System.Array) (copy) ), ((int) (values.Length) ));
				object[] ret = new object[( copy as global::System.Array ).Length];
				{
					int _g = 0;
					int _g1 = ( copy as global::System.Array ).Length;
					while (( _g < _g1 )) {
						int i = _g++;
						ret[i] = ((string) (copy[i]) );
					}
					
				}
				
				object[] dyn = ret;
				return new global::haxe.root.Array(((object[]) (dyn) ));
			}
			else {
				string[] native = global::System.Enum.GetNames(((global::System.Type) (t) ));
				object[] ret1 = new object[( native as global::System.Array ).Length];
				{
					int _g2 = 0;
					int _g11 = ( native as global::System.Array ).Length;
					while (( _g2 < _g11 )) {
						int i1 = _g2++;
						ret1[i1] = ((string) (native[i1]) );
					}
					
				}
				
				object[] dyn1 = ret1;
				return new global::haxe.root.Array(((object[]) (dyn1) ));
			}
			
		}
		
		
		public static global::haxe.root.ValueType @typeof(object v) {
			if (( v == null )) {
				return global::haxe.root.ValueType.TNull;
			}
			
			global::System.Type t = ((global::System.Type) (( v as global::System.Type )) );
			if ( ! (global::System.Object.ReferenceEquals(((object) (t) ), default(object))) ) {
				return global::haxe.root.ValueType.TObject;
			}
			
			t = ((global::System.Type) (v.GetType()) );
			if (t.IsEnum) {
				return global::haxe.root.ValueType.TEnum(((global::System.Type) (t) ));
			}
			
			if (( v is global::haxe.lang.Enum )) {
				return global::haxe.root.ValueType.TEnum(((global::System.Type) (t.BaseType) ));
			}
			
			if (t.IsValueType) {
				global::System.IConvertible vc = ((global::System.IConvertible) (v) );
				if (( vc != null )) {
					switch (vc.GetTypeCode()) {
						case global::System.TypeCode.Boolean:
						{
							return global::haxe.root.ValueType.TBool;
						}
						
						
						case global::System.TypeCode.Int32:
						{
							return global::haxe.root.ValueType.TInt;
						}
						
						
						case global::System.TypeCode.Double:
						{
							double d = vc.ToDouble(default(global::System.IFormatProvider));
							if (( ( ( d >= global::System.Int32.MinValue ) && ( d <= global::System.Int32.MaxValue ) ) && ( d == vc.ToInt32(default(global::System.IFormatProvider)) ) )) {
								return global::haxe.root.ValueType.TInt;
							}
							else {
								return global::haxe.root.ValueType.TFloat;
							}
							
						}
						
						
						default:
						{
							return global::haxe.root.ValueType.TClass(((global::System.Type) (t) ));
						}
						
					}
					
				}
				else {
					return global::haxe.root.ValueType.TClass(((global::System.Type) (t) ));
				}
				
			}
			
			if (( v is global::haxe.lang.IHxObject )) {
				if (( v is global::haxe.lang.DynamicObject )) {
					return global::haxe.root.ValueType.TObject;
				}
				
				return global::haxe.root.ValueType.TClass(((global::System.Type) (t) ));
			}
			else if (( v is global::haxe.lang.Function )) {
				return global::haxe.root.ValueType.TFunction;
			}
			else {
				return global::haxe.root.ValueType.TClass(((global::System.Type) (t) ));
			}
			
		}
		
		
		public static bool enumEq(object a, object b) {
			if (global::haxe.lang.Runtime.eq(a, null)) {
				return global::haxe.lang.Runtime.eq(b, null);
			}
			else if (global::haxe.lang.Runtime.eq(b, null)) {
				return false;
			}
			else {
				return a.Equals(b);
			}
			
		}
		
		
		public static string enumConstructor(object e) {
			if (( e is global::System.Enum )) {
				return ( (((global::System.Enum) (e) )) as global::System.ValueType ).ToString();
			}
			else {
				return (((global::haxe.lang.Enum) (e) )).getTag();
			}
			
		}
		
		
		public static global::haxe.root.Array enumParameters(object e) {
			if (( e is global::System.Enum )) {
				return new global::haxe.root.Array(new object[]{});
			}
			else {
				return (((global::haxe.lang.Enum) (e) )).getParams();
			}
			
		}
		
		
		public static int enumIndex(object e) {
			if (( e is global::System.Enum )) {
				global::System.Array values = global::System.Enum.GetValues(((global::System.Type) (((object) (e) ).GetType()) ));
				return global::System.Array.IndexOf(((global::System.Array) (values) ), ((object) (e) ));
			}
			else {
				return (((global::haxe.lang.Enum) (e) ))._hx_index;
			}
			
		}
		
		
		public static global::haxe.root.Array allEnums(global::System.Type e) {
			global::haxe.root.Array ctors = global::haxe.root.Type.getEnumConstructs(e);
			global::haxe.root.Array ret = new global::haxe.root.Array(new object[]{});
			{
				int _g = 0;
				while (( _g < ctors.length )) {
					string ctor = global::haxe.lang.Runtime.toString(ctors.__get(_g));
					 ++ _g;
					object v = global::haxe.root.Reflect.field(e, ctor);
					if (global::haxe.root.Std.@is(v, e)) {
						ret.push(v);
					}
					
				}
				
			}
			
			return ret;
		}
		
		
	}
}


